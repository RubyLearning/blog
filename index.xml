<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RubyLearning Blog</title>
    <link>http://rubylearning.com/blog/</link>
    <description>Recent content on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Learn Ruby programming - 64th batch</title>
      <link>http://rubylearning.com/blog/2015/10/11/learn-ruby-programming---64th-batch/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/10/11/learn-ruby-programming---64th-batch/</guid>
      <description>

&lt;p&gt;Registrations are now open for RubyLearning&amp;rsquo;s &lt;em&gt;long-running and popular&lt;/em&gt;
Ruby programming course. This is an intensive, online course for
&lt;em&gt;beginners&lt;/em&gt; that helps you get started with &lt;strong&gt;Ruby&lt;/strong&gt; programming. The
course starts on &lt;strong&gt;Saturday, 5 December 2015&lt;/strong&gt; and runs for seven weeks.&lt;/p&gt;

&lt;h2 id=&#34;course-fee-and-discount:0abd26cdb3a9774f40682720c8206489&#34;&gt;Course Fee and Discount&lt;/h2&gt;

&lt;p&gt;Please &lt;a href=&#34;http://rubylearning.org/classes/login/index.php&#34;&gt;create a new
account&lt;/a&gt; first and then
pay US $44.95 by clicking on the PayPal button
&lt;a href=&#34;http://rubylearning.org/classes/enrol/index.php?id=63&#34;&gt;&lt;img src=&#34;http://rubylearning.com/images/paypal_ruby.gif&#34; alt=&#34;Paypal&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you do not have a PayPal account and would like to pay by
credit card on PayPal then do email me at satish [at] rubylearning.org.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Download &lt;a href=&#34;http://rubylearning.com/data/AdviceRuby.zip&#34;&gt;&amp;lsquo;Advice for Ruby
Beginners&amp;rsquo;&lt;/a&gt; as a .zip file.&lt;/p&gt;

&lt;p&gt;Here is what &lt;strong&gt;Sandra Randall (Butler)&lt;/strong&gt;, a participant who just
graduated, has to say - &amp;ldquo;You kindly offered me the opportunity to join
your Ruby course. I&amp;rsquo;m new to development and found the course, even
though basic for programmers, a little tricky for me. I managed to
complete all of the assessments and really learnt a lot. Thank you very
much for the opportunity. It has really given me the push I needed to
learn Ruby and I&amp;rsquo;m currently treading my way through both the pickaxe
and Agile Development books and enjoying it. I&amp;rsquo;ve recently been offered
a position as a Junior Systems Developer at a local Software house in
South Africa - all thanks to the push you gave me which gave me the
motivation and drive to get going.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;what-s-ruby:0abd26cdb3a9774f40682720c8206489&#34;&gt;What&amp;rsquo;s Ruby?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/ruby_350.png&#34; alt=&#34;Ruby&#34; title=&#34;License: http://creativecommons.org/licenses/by-sa/2.5/&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;According to
&lt;a href=&#34;http://www.ruby-lang.org/en/&#34;&gt;http://www.ruby-lang.org/en/&lt;/a&gt; - &amp;ldquo;Ruby is
a dynamic, open source programming language with a focus on simplicity
and productivity. Ruby&amp;rsquo;s elegant syntax is natural to read and easy to
write.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yukihiro Matsumoto&lt;/strong&gt;, the creator of Ruby, in &lt;strong&gt;&lt;a href=&#34;http://linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html&#34;&gt;an
interview&lt;/a&gt;&lt;/strong&gt;
says -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I believe people want to express themselves when they program. They
don&amp;rsquo;t want to fight with the language. Programming languages must feel
natural to programmers. I tried to make people enjoy programming and
concentrate on the fun and creative part of programming when they use
Ruby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-will-i-learn:0abd26cdb3a9774f40682720c8206489&#34;&gt;What Will I Learn?&lt;/h2&gt;

&lt;p&gt;In the Ruby programming course, you will learn the &lt;a href=&#34;http://rubylearning.com/satishtalim/tutorial.html&#34;&gt;essential features
of Ruby&lt;/a&gt; that you
will end up using every day. You will also be introduced to Git, GitHub,
HTTP concepts, RubyGems, Rack and Heroku.&lt;/p&gt;

&lt;h2 id=&#34;some-highlights:0abd26cdb3a9774f40682720c8206489&#34;&gt;Some Highlights&lt;/h2&gt;

&lt;h3 id=&#34;rubylearning-s-irc-channel:0abd26cdb3a9774f40682720c8206489&#34;&gt;RubyLearning&amp;rsquo;s IRC Channel&lt;/h3&gt;

&lt;p&gt;Some of the mentors and students hang out at RubyLearning&amp;rsquo;s IRC
(irc.freenode.net) channel (#rubylearning.org) for both technical and
non-technical discussions. Everyone benefits with the active discussions
on Ruby with the mentors.&lt;/p&gt;

&lt;h3 id=&#34;google-hangouts:0abd26cdb3a9774f40682720c8206489&#34;&gt;Google Hangouts&lt;/h3&gt;

&lt;p&gt;There is a Hangout Event that is open for students, for drop-in hangouts
where students can pair program with mentors or with each other. This is
often where you can get help with your system, editor, and general
environment. Anything that can help you with your coding environment
that you are having problems with are usually discussed interactively
here.&lt;/p&gt;

&lt;h3 id=&#34;git-repositories:0abd26cdb3a9774f40682720c8206489&#34;&gt;Git Repositories&lt;/h3&gt;

&lt;p&gt;Shared (private) repositories available for those that want to learn git
and the revision controlled programming workflow. This allows students
that want to collaborate while learning. This is a great way to record
your progress while learning Ruby.&lt;/p&gt;

&lt;h3 id=&#34;ebook:0abd26cdb3a9774f40682720c8206489&#34;&gt;eBook&lt;/h3&gt;

&lt;p&gt;The course is based on the &lt;strong&gt;The Ultimate Guide to Ruby Programming&lt;/strong&gt;
eBook. This book is &lt;a href=&#34;http://book.rubylearning.org/&#34;&gt;priced at US $9.95&lt;/a&gt;.
However, the &lt;a href=&#34;http://www.amazon.com/gp/product/B0062X2I68/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B0062X2I68&amp;amp;linkCode=as2&amp;amp;tag=satishtalimsw-20&#34;&gt;Kindle
edition&lt;/a&gt;
of the eBook is available for US $6.00.&lt;/p&gt;

&lt;h3 id=&#34;challenges-and-side-tracks:0abd26cdb3a9774f40682720c8206489&#34;&gt;Challenges and Side Tracks&lt;/h3&gt;

&lt;p&gt;This is course material not found in the RubyLearning Study Notes nor in
the E-Book! Depending on participation levels, we throw a Ruby coding
challenge in the mix, right for the level we are at. We have been known
to give out a prize or two for the &amp;lsquo;best&amp;rsquo; solution.&lt;/p&gt;

&lt;h2 id=&#34;who-s-it-for:0abd26cdb3a9774f40682720c8206489&#34;&gt;Who&amp;rsquo;s It For?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A &lt;em&gt;beginner&lt;/em&gt; with some knowledge of programming.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can read what past participants / online magazines have to say about
the course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/other/testimonials.html&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forbes.com/sites/women2/2012/07/07/how-i-learned-to-code/print/&#34;&gt;Forbes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://natashatherobot.com/rubylearning-core-ruby-review/&#34;&gt;Natasha
Murashev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://katpreneur.tumblr.com/post/27084326683/i-am-not-young-enough-to-know-everything&#34;&gt;Katerina
Jackson-Suchkova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://maniempire.blogspot.in/2011/07/ruby-pair-programming.html&#34;&gt;Mani Maran
M&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mentors:0abd26cdb3a9774f40682720c8206489&#34;&gt;Mentors&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://satishtalim.com/&#34;&gt;Satish Talim&lt;/a&gt;, Michael Kohl, Satoshi Asakawa,
Victor Goff III and others from the RubyLearning team.&lt;/p&gt;

&lt;h2 id=&#34;dates:0abd26cdb3a9774f40682720c8206489&#34;&gt;Dates&lt;/h2&gt;

&lt;p&gt;The course starts on &lt;strong&gt;Saturday, 5th of December 2015&lt;/strong&gt; and runs for seven
weeks.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-register-and-pay-the-course-fees:0abd26cdb3a9774f40682720c8206489&#34;&gt;How do I register and pay the course fees?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can pay the course fees either by Paypal or send cash via
&lt;a href=&#34;http://www.westernunion.com/info/selectCountry.asp&#34;&gt;Western Union Money
Transfer&lt;/a&gt; or by
bank transfer (if you are in India). The fees collected helps
RubyLearning maintain the site, this Ruby course, the Ruby eBook,
and provide quality content to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To pay the Course Fee:
&lt;a href=&#34;http://rubylearning.org/classes/enrol/index.php?id=63&#34;&gt;&lt;img src=&#34;http://rubylearning.com/images/paypal_ruby.gif&#34; alt=&#34;Paypal&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&#34;http://rubylearning.org/classes/login/index.php&#34;&gt;create a new
account&lt;/a&gt; first and then
pay US $44.95 by clicking on the PayPal button&lt;/p&gt;

&lt;h2 id=&#34;how-does-the-course-work:0abd26cdb3a9774f40682720c8206489&#34;&gt;How does the course work?&lt;/h2&gt;

&lt;p&gt;For details on how the course works, refer &lt;a href=&#34;http://rubylearning.com/blog/how-the-course-works/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of this course you should have all the knowledge to explore
the wonderful world of Ruby on your own.&lt;/p&gt;

&lt;p&gt;Remember, the idea is to have fun learning Ruby.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Ruby The Hard Way: A Book Review</title>
      <link>http://rubylearning.com/blog/2015/04/27/learn-ruby-the-hard-way-a-book-review/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/04/27/learn-ruby-the-hard-way-a-book-review/</guid>
      <description>

&lt;p&gt;A book review of &lt;strong&gt;Learn Ruby the Hard Way - Third Edition&lt;/strong&gt;.&lt;/br&gt;
Review by: RubyLearning’s mentor Victor Goff.&lt;/br&gt;
Book author: Zed A. Shaw.&lt;/br&gt;
Publisher: Addison-Wesley&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Great idea, generally a good book.  Many minor problems or things
taught that may be misrepresented.&lt;/p&gt;

&lt;p&gt;I got this book a while ago, and of course it is available online as well.  And
though it seems like it might be an easy book to review, it is, what I would
call, a “Pattern Book”.  Due to this, it is actually a bit more difficult to
review.&lt;/p&gt;

&lt;p&gt;This book is patterned from his prior “Learn The Hard Way” books, and follows
along with the theme, which is helpful.  I will be reading more of his books,
as once you now the format of one, you can know what to expect from the others.&lt;/p&gt;

&lt;p&gt;As an instructional book, it is teaching you the “hard way”, because you
really need to follow along, it builds up from the basics and gets you to a
good place to continue to learn from.  And it covers a lot.&lt;/p&gt;

&lt;p&gt;It also has a lot of areas to review because of this, a lot of little
technical things.  I went through every exercise, and am now going through
every exercise with someone new to programming.  I believe that the pace is
good for a new programmer.&lt;/p&gt;

&lt;p&gt;I get an impression that the author wrote this while being immersed in another
language.  There are hints of it throughout.  One problem area, which is not
going to be a show stopper, but a problem area nonetheless, is his explanation
about the triple equals in Ruby.  There is no such thing, but he uses it from
the time he introduces it and through the book.  It is little things like this
that can confuse a new programmer in the language, if they even spot it.  If
they spot it, they start to wonder what else is not right.  It can be a pretty
large distraction.&lt;/p&gt;

&lt;p&gt;There are other areas that are difficult though, where he references things
that are not used, but addresses them in the “Questions” section.&lt;/p&gt;

&lt;p&gt;There are things that are initially overlooked. For example, using string
interpolation early on (Exercise 2) but not explaining what it does.  Why does
the math happen in &lt;code&gt;&amp;quot;3 + 2 #{3 + 2}&amp;quot;&lt;/code&gt; inside the brackets?  Sometimes we do
ignore things when instructing but I felt it was fitting to explain at least
briefly what is happening.  I think that is a little too magical to let it be
seen, yet let it not be addressed there.  That is, for a new programmer.  An
experienced one will likely be familiar enough to know.&lt;/p&gt;

&lt;p&gt;There are places were we are told that an error will happen if we do something,
yet doing so does not raise an error.  This can be very time consuming for
someone new to the language.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;gets.chomp.to_i&lt;/code&gt; which I see occasionally in the wild, but it is never
needed together.  (An integer simply will never have a newline, and so you
don&amp;rsquo;t need to remove it before you convert a string with a newline.)  As an
instructional tool, and the third revision, little things like these should be
taken care of.&lt;/p&gt;

&lt;p&gt;There were also various areas where there seems to have been printing problems.
Where there should have been a backslash or two, but there were none.  This
happens when you programmatically format material, but with code, it is
important to leave some things alone.  Pretty sure those errors happen in
printing, not in the proofreading process while the material is written.  This
can be seen in some places where there should have been backslashes that should
be in the literal display, indicated by &amp;ldquo;What you should see&amp;rdquo; sections but were
removed in print.&lt;/p&gt;

&lt;p&gt;The good news is that some of these problems can likely be taken care of in a
pull request.  The distractions are minor if you are teaching, or leading a
group, but reading this alone could be frustrating as you are trying to dig
into what is going on.  Especially since Zed Shaw states in places, to
paraphrase, &amp;ldquo;Don&amp;rsquo;t worry about it right now, just do as I say.&amp;rdquo;  Once that
statement is made, an explicit level of trust being demanded, I believe this
lowers the tolerance of omissions and errors dramatically.&lt;/p&gt;

&lt;p&gt;I would recommend the book for those that are leading a &amp;lsquo;workshop&amp;rsquo; or putting
together some Ruby classes, that can provide the answers when strange things
are presented.  But for those new to Ruby, I can definitely expect some
confusion.  It would be recommended that someone that is familiar with Ruby be
available to answer questions.&lt;/p&gt;

&lt;p&gt;I was surprised to see some of these problems in a &amp;ldquo;Third Edition&amp;rdquo; copy.&lt;/p&gt;

&lt;h2 id=&#34;summary:8c6e18135b493549ef6bad3cd36b4459&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Too many little problems, some outright technical errors, and some not so
helpful printing problems. Somehow it seems to be missing a layer of technical
review, and final proofing.&lt;/p&gt;

&lt;p&gt;I believe it is still a good tool for supervised instruction.&lt;/p&gt;

&lt;p&gt;I can not recommend this book for a new programmer with no quick feedback loop,
someone to ask.  I would not give this book to one of my kids and leave them to
it.  It should work for a programmer just getting into Ruby, but familiar with
other languages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do You Know How To Use cURL</title>
      <link>http://rubylearning.com/blog/2015/04/16/do-you-know-how-to-use-curl/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/04/16/do-you-know-how-to-use-curl/</guid>
      <description>

&lt;h2 id=&#34;downloading-and-installing-curl:ecd8e27567a98a924278b0bb8f7e4877&#34;&gt;Downloading and installing cURL&lt;/h2&gt;

&lt;p&gt;cURL is available on many platforms, including Windows (all variants),
OSX (all versions) and Linux (all distros). cURL is available from the
cURL website at &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;http://curl.haxx.se/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install cURL on Linux, you should first check for cURL binaries in
your distributions package repository. For exact instructions on how to
do this, refer to your distribution&amp;rsquo;s documentation. On Ubuntu and other
Debian variants, you can install cURL by issuing the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If cURL is not available in your distribution&amp;rsquo;s package repository or
you&amp;rsquo;re running another operating system, you can find the right cURL
package by following the download wizard located at
&lt;a href=&#34;http://curl.haxx.se/dlwiz/&#34;&gt;http://curl.haxx.se/dlwiz/&lt;/a&gt;. Simply select
the &amp;ldquo;curl executable&amp;rdquo; option, input information about your computer and
operating system and it will direct you to the correct file
download. Once downloaded, extract any files in the archive to an easily
accessible file (for example, c:\cURL on Windows).&lt;/p&gt;

&lt;p&gt;cURL is a command-line tool. This means it is run from the command
prompt (in Windows) or terminal (in Linux or OSX) and its results are
displayed in the terminal window. There is no graphical interface. So in
order to use cURL, you first have to open a command-line window.&lt;/p&gt;

&lt;p&gt;On Windows, go to Start -&amp;gt; Run and enter &amp;ldquo;cmd&amp;rdquo; (without quotes) into
the dialog and press enter.&lt;/p&gt;

&lt;p&gt;On OSX, open the Terminal application. You&amp;rsquo;ll find this in the
Applications/Utilities folder.&lt;/p&gt;

&lt;p&gt;On Linux, open a Bash Prompt or Terminal window.  Again, since all
distributions are different, refer to your distributions documentation
for more detailed information.  On Ubuntu, you can open a bash prompt by
going to Applications -&amp;gt; Accessories -&amp;gt; Terminal.&lt;/p&gt;

&lt;p&gt;Though Windows, OSX and Linux all run different command-line shells (the
program that interprets commands on the terminal and runs executables),
the commands presented here will work on all of them.&lt;/p&gt;

&lt;p&gt;First, change the directory to where you extracted the cURL archive. If
you installed cURL using an installer or a package on Linux, cURL will
already be in your path (meaning it can be run even though you&amp;rsquo;re not
currently in the same directory) so this isn&amp;rsquo;t needed. For example, if I
placed cURL in &lt;code&gt;C:\\cURL&lt;/code&gt; on my Windows computer, I would issue the
following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd C:\cURL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now issue cURL commands. On Linux or OSX, you may have to
prepend &lt;code&gt;./&lt;/code&gt; to your commands. For example, instead of &lt;code&gt;curl http://some/url&lt;/code&gt;,
the command you&amp;rsquo;d use would be &lt;code&gt;./curl http://some/url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test cURL, enter the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I http://twitter.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see HTTP response headers. The first line should be &amp;ldquo;HTTP/1.1
200 OK.&amp;ldquo; This means you&amp;rsquo;ve made a successful request to Twitter using
cURL.&lt;/p&gt;

&lt;h2 id=&#34;using-curl:ecd8e27567a98a924278b0bb8f7e4877&#34;&gt;Using cURL&lt;/h2&gt;

&lt;p&gt;cURL is a command-line tool. This means it&amp;rsquo;s launched from a command
line with a number of switches and parameters. Switches change how the
cURL command will act, and begin with the - character. For example, the
previous example used the -I switch, which means to display the HTTP
response headers only, and not the HTTP response body. Parameters pass
information to either a switch, or the cURL command itself. In the
previous example, the Twitter URL was a parameter.&lt;/p&gt;

&lt;p&gt;Please refer to the following URL for the various options available in
cURL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34;&gt;http://curl.haxx.se/docs/manpage.html&lt;/a&gt;
 &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RubyLearning Tutorial Translated To Arabic</title>
      <link>http://rubylearning.com/blog/2015/04/06/rubylearning-tutorial-translated-to-arabic/</link>
      <pubDate>Mon, 06 Apr 2015 00:32:34 -0400</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/04/06/rubylearning-tutorial-translated-to-arabic/</guid>
      <description>&lt;p&gt;Ali Osm is young Libyan programmer, and started programming in 2011.&lt;/p&gt;

&lt;p&gt;In 2014 he saw the Ruby programming language and liked it, and so he decided to
create the &lt;a href=&#34;http://ruby3arabi.com&#34;&gt;Ruby3arabi.com&lt;/a&gt; site and he hopes to help
Ruby language to become popular in the Arabic programmers community.  Here is
Ali Osm telling us about what is going on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/blog/blog/media/ruby3arabi-brand_30.png&#34; alt=&#34;Ruby3arabi&#34; title=&#34;Image of Ruby3arabi
Website Icon&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;On 6 March 2015 we started the site Ruby3arabi.com, which explains the Ruby
programming language which is translated from RubyLearning.com after having
talked Mr. Satish Talim.&lt;/p&gt;

&lt;p&gt;This site includes most of the lessons on the site in Arabic with the
additional feature of using &amp;lsquo;tryruby&amp;rsquo; on the site so that you can run
Ruby in your browser without installing on your own operating system.&lt;/p&gt;

&lt;p&gt;Ruby3arabi.com is the first site which explains Ruby language in detail
in Arabic. In addition to that it is the first Arab site that hosts a
Ruby compiler in Arabic content.&lt;/p&gt;

&lt;p&gt;The team is working on the site and they are doing their best to improve
it to be a social platform which enables Arab Ruby programmers
specifically and the Arab programmers in general to communicate and
exchange experience.&lt;/p&gt;

&lt;p&gt;You can let Ali Osm know what you think below or in &lt;a href=&#34;mailto:aliosm_1997@gmail.com&#34;&gt;e-mail&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comment Types in Ruby</title>
      <link>http://rubylearning.com/blog/2015/03/20/comment-types-in-ruby/</link>
      <pubDate>Fri, 20 Mar 2015 01:15:34 -0400</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/03/20/comment-types-in-ruby/</guid>
      <description>

&lt;p&gt;There are basically two types of comments in Ruby.  And they work the
same.&lt;/p&gt;

&lt;h2 id=&#34;the-block-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The block comment&lt;/h2&gt;

&lt;p&gt;The comment block is created with the &lt;code&gt;=begin&lt;/code&gt; and &lt;code&gt;=end&lt;/code&gt; delimiters.
This looks like:&lt;/p&gt;

&lt;script
src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_block.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;It helps to make readable areas that are without extra marks.  And
wherever and whatever you write in those areas are not interpreted by
Ruby.&lt;/p&gt;

&lt;h2 id=&#34;the-line-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The line comment&lt;/h2&gt;

&lt;p&gt;This is the simple comment where you place an octothorpe as the first
non-whitespace character of the line, and everything else written is
excluded from being interpreted by Ruby.  It is ignored. It looks like:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_line.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;the-in-line-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The in-line comment&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;basically two types&amp;rdquo; part comes in when you comment code at the
end of a statement.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_in_line.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;what-comment-style-should-you-use-and-when:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;What comment style should you use and when?&lt;/h2&gt;

&lt;p&gt;What comment style you use depends on a few factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personal taste&lt;/li&gt;
&lt;li&gt;Team style guides&lt;/li&gt;
&lt;li&gt;The amount of commenting needed

&lt;ul&gt;
&lt;li&gt;a class or module comment may need quite a few lines of comments and
may use the block  style&lt;/li&gt;
&lt;li&gt;a method may need one or two lines and should be above that method&lt;/li&gt;
&lt;li&gt;a clever line of code may need a small comment, so in-line comments
may be appropriate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Functional comments

&lt;ul&gt;
&lt;li&gt;may not give you a choice&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;directive comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is dependent on what that means.  They exist usually to
assist a tool that is not your program, to do something useful.  The
first one that I can think of is the gem &lt;code&gt;rubocop&lt;/code&gt;.  It has directives
that are comment based to allow you to forgive a style infraction.  It
may be more flexible in what is acceptable than the functional comment,
but still not include the ability to use all three styles.&lt;/p&gt;

&lt;h3 id=&#34;in-summary:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;So, the three styles of comments that are directly related to Ruby are;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Block Comment&lt;/li&gt;
&lt;li&gt;Line Comment&lt;/li&gt;
&lt;li&gt;In-line Comment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The comment that is system dependent is the &amp;ldquo;magic comment&amp;rdquo; on the first
line of some files that help them know that they are meant to be
&amp;lsquo;executable&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Finally, not really a &amp;ldquo;Ruby Comment Style&amp;rdquo; but used by some gems are
what I call &amp;ldquo;directive comments&amp;rdquo; and may have rules all of their own.&lt;/p&gt;

&lt;p&gt;Of course, the best code is code that doesn&amp;rsquo;t rely on comments at
all.  But we still need them!  What is your comment style?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby Wizardry - A Book Review</title>
      <link>http://rubylearning.com/blog/2015/03/09/ruby-wizardry---a-book-review/</link>
      <pubDate>Mon, 09 Mar 2015 04:32:42 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/03/09/ruby-wizardry---a-book-review/</guid>
      <description>

&lt;h3 id=&#34;it-all-starts-at-the-beginning:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;It all starts at the beginning.&lt;/h3&gt;

&lt;p&gt;It really is a whimsical story, about a kingdom in some trouble because
of some mischievous hooligans and how this kingdom is saved by, well,
you will have to read it to see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/blog/blog/media/ruby_wizardry_front_cover.png&#34; alt=&#34;Ruby Wizardry&#34; title=&#34;Ruby Wizardry&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;introduction:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This book is written by Eric Weinstein, published by &lt;a href=&#34;http://www.nostarch.com/rubywizardry&#34;&gt;&amp;ldquo;no starch press&amp;rdquo;&lt;/a&gt;
and it is an introduction to programming for kids.&lt;/p&gt;

&lt;h2 id=&#34;troubles-before-we-started:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;Troubles before we started&lt;/h2&gt;

&lt;p&gt;I had problems with reviewing this book, as I showed it to a young
teenager, and I was not able to keep my hands on the book for any
extended period of time.  The book was carried everywhere, and I simply
had to wait for it to find its way back on the table so I could grab it.&lt;/p&gt;

&lt;h2 id=&#34;normal-kid-stuff:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;Normal &amp;ldquo;Kid Stuff&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Fortunately, they were off to grandma&amp;rsquo;s house this weekend and I finally
got to spend some time with it, and now I see why they are fascinated
with the book.&lt;/p&gt;

&lt;h2 id=&#34;finally-a-review:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;Finally, a review!&lt;/h2&gt;

&lt;p&gt;The story is fun, the code examples are relevant to the story, and Eric
does not hide the documentation from you, occasionally pointing to the
official documentation for more information.  But he doesn&amp;rsquo;t push it on
the reader, so they are welcome to explore and enjoy the book.  In fact,
at the end of the story, the excitement of having done all of this
journey is celebrated, and additional references are presented right
there to continue this journey with other resources.  There is no, &amp;ldquo;OK,
what can I do now?  Because that was fun!&amp;rdquo;  You have the additional
steps laid out.  No, it is just &amp;ldquo;That was fun, let&amp;rsquo;s continue!&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;eric-has-style:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;Eric has Style!&lt;/h2&gt;

&lt;p&gt;He has a coding style that he adheres to throughout the book, this makes
the learning simpler as you aren&amp;rsquo;t questioning why things have changed.
He also encourages using the Interactive Ruby (IRB) tool for exploring,
as well as writing the programs in the files that you can run as well.&lt;/p&gt;

&lt;p&gt;The progression is simple, the &amp;lsquo;what comes first&amp;rsquo; obstacle is taken care
of early, so you have the IRB tool and the code that you write taken
care of up front.  How to manage and play with your code interactively,
how to explore Ruby, and about two thirds of the way through the story
you find out how to require the files you write into your IRB session.
Overall, a great basis for continued progress as a programmer.&lt;/p&gt;

&lt;h2 id=&#34;the-journey:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;The journey.&lt;/h2&gt;

&lt;p&gt;As you journey through the book, you will have progressively done
increasingly &amp;ldquo;hard&amp;rdquo; things, but I don&amp;rsquo;t think you will really notice it.
You will have created interactive programs, will have manipulated files,
will have written the most basic web page.&lt;/p&gt;

&lt;p&gt;One thing that I was very happy to find in this book after the first
Table of Contents is the &amp;ldquo;Contents in Detail&amp;rdquo; section.  Finding the
review points in this book is extremely easy, and if you need to
review something, you can easily find the things you are looking for.&lt;/p&gt;

&lt;h2 id=&#34;to-the-future:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;To the future!&lt;/h2&gt;

&lt;p&gt;I was looking forward to reviewing this book, and now I am looking forward
to the time when that young teenager comes up to me and says &amp;ldquo;Hey, you
could write that this way!&amp;rdquo;  And that time is coming up soon.&lt;/p&gt;

&lt;h2 id=&#34;and-finally:e6fe5e88f71fd2ba6db1ee63e7b912f3&#34;&gt;And finally&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Thank you Eric for a wonderful story, and this book will let kids
realize that they can do it! Just like Byte, Compute, A.N.A.L.O.G., ROM,
Antic magazines, I can see this book mentioned years to come as
this generation reminisces about how they learned to program.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meet Volt: a Promising Ruby Framework for Dynamic Applications</title>
      <link>http://rubylearning.com/blog/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;By Amaury Andres Peniche Gonzalez – Software Engineer at
&lt;a href=&#34;http://www.toptal.com/&#34;&gt;Toptal&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/amaury.jpg&#34; width=144 height=144&gt;
&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Amaury is a systems and production engineer with experience in front and
back-end development, computer graphics, and networking. Amaury
currently works as a freelance &lt;a href=&#34;http://www.toptal.com/ruby&#34;&gt;Ruby engineer at
Toptal&lt;/a&gt;, where he was involved in numerous
projects, mainly related to Ruby on Rails.&lt;/p&gt;

&lt;h2 id=&#34;ruby-and-the-volt-framework:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Ruby and the Volt framework&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Volt&lt;/strong&gt; is a Ruby web framework designed for data rich applications.
Both the server and client sides are written in Ruby (which is then
compiled to JS using OPAL), so this allows the developer to write very
dynamic applications without having to write a single line of Javascript
code. If you’re a Ruby fan like me, you’ll love this framework.&lt;/p&gt;

&lt;p&gt;In an attempt to make web applications a lot more dynamic, front-end
Javascript frameworks like Angular.js, Backbone.js and Ember.js have
gained a lot of popularity. However, these frameworks often require a
back-end application to be useful, so they are used in conjunction with
web frameworks like Ruby on Rails and Django.&lt;/p&gt;

&lt;p&gt;On the other hand, Volt is capable of managing the back-end and a
dynamic front-end. Since both functionalities are tightly integrated
into its core (in fact, Volt is more like an MVVM architecture,
leveraging the advantages of data bindings), it enables the developer to
build these applications quickly.&lt;/p&gt;

&lt;p&gt;A very cool feature that comes out of the box is Volt’s real-time
feature. If you ever made real-time applications, you know the process
can be challenging – you probably implemented AJAX-polling, web sockets,
Server-Sent Events (SSE) or even used external services, adding
complexity to the application and even incurring additional costs.
Unlike other frameworks, Volt keeps a connection with the server alive
(via web sockets), so instead of making Ajax requests for each action,
it pushes changes instantly to all clients. No configuration is needed
for this to work.&lt;/p&gt;

&lt;h3 id=&#34;using-volt-to-create-a-chat-application:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Using Volt To Create A Chat Application&lt;/h3&gt;

&lt;p&gt;In this guide I am going to take you through the process of creating a
real-time application using Volt, and what better way than a chat
application to demonstrate its capabilities, since chat remains the
number one use case of real time applications.&lt;/p&gt;

&lt;p&gt;First of all, let’s install Volt and MongoDB. The latter process will
not be covered in detail:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/setup_part1.sh?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now we’re ready to create our first app, lets call it ‘chat’. We can do
that easily in a couple of lines:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/89d0a5924f410c6f5d0e03c1f323b01045a6b536/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/setup_part2.sh?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;The document structure has some similarities to Rails. The main
difference Rails users will notice is that we have an extra folder
inside app that contains the rest of the folders like assets,
controllers, models and views, this extra folder is a ‘Component’.&lt;/p&gt;

&lt;p&gt;A Component is an isolated section of the app. All pages inside a
Component are rendered without reloading the page since all files for
that component are loaded with the initial http request, so if we visit
a page of a different component, a new http request will be made and the
page will be ‘reloaded’. For this example let’s use the default
component called ‘main’.&lt;/p&gt;

&lt;p&gt;Let’s start the server by executing ‘volt server’ command in console,
and see how it looks in the browser by navigating to
&lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt;:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/461f71e3d021d66681b73fe24af2909fc58b5053/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/start_server.sh?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Also don’t forget to start MongoDB in console:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/start_mongod.sh?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can notice that Volt comes with a number of default pages, including
‘Home’ and ‘About’. These can be customized right away.&lt;/p&gt;

&lt;p&gt;The other thing worth mentioning is the login button at the top right
side of the page. Volt has a “user” functionality integrated to the
framework via the ‘volt-user-templates’ gem, which provides a way to
register and authenticate users, right out of the box.&lt;/p&gt;

&lt;h3 id=&#34;getting-started:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;Now, let’s start working on our app. First of all we don’t need the
‘About’ page so we can go ahead and delete the following: The
app/main/views/main/about.html file, the about action in
app/main/controllers/main_controller.rb, remove the ‘/about’ route in
the &lt;code&gt;app/main/config/routes.rb&lt;/code&gt; and the nav link in
&lt;code&gt;app/main/views/main/main.html&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/461f71e3d021d66681b73fe24af2909fc58b5053/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_part1.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now let’s get down to business and start by listing all registered
users:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/461f71e3d021d66681b73fe24af2909fc58b5053/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_part2.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now all the registered users are being listed in the homepage. Note that
the code written inside &lt;code&gt;{{ }}&lt;/code&gt; is Ruby code that gets executed. This way
we can iterate over user collection and print each one out.&lt;/p&gt;

&lt;p&gt;As you may have noticed, &lt;code&gt;users&lt;/code&gt; is the name of the collection where
all users are stored; something to have in mind is that attributes are
accessed with an underscore &lt;code&gt;_&lt;/code&gt; prepended to the attribute name. For
this to work, we first need to add a line of code at the top of the
main_controller.rb file:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_controller.part1.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Volt comes with multiple collection models accessible from the
controller, and each of them stores the information in a different
place. The store collection model stores the data in the data store, and
here we are specifying the controller to use that one (right now the
only data store supported is MongoDB). Let’s create a couple of users to
see what it looks like:&lt;/p&gt;

&lt;p&gt;Right now there is nothing exciting about this page, we’re just listing
the registered users. Now I would like to be able to select a user to
send a message to, remove the name of the currently logged in user from
the list (since he shouldn’t be able to send messages to himself), show
the list only to authenticated users and show a ‘landing’ page to
non-authenticated users:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_.part3.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;Volt.user&lt;/code&gt; returns the current (logged in) user or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;e-click&lt;/code&gt; attribute lets us select a method from the controller that
will be called when that element is clicked.&lt;/p&gt;

&lt;h3 id=&#34;attributes-and-css:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Attributes and CSS&lt;/h3&gt;

&lt;p&gt;In fact, all &lt;code&gt;e-&lt;/code&gt; attributes are event binders in Volt, so for example
we can add &lt;code&gt;e-submit&lt;/code&gt; to a form to choose the action that will be called
on the controller. We are going to add the ‘selected’ user’s ID to the
parameters so we can know which one has been selected and add a class
called &lt;code&gt;active&lt;/code&gt; which we can later style.&lt;/p&gt;

&lt;p&gt;Now let’s create the &lt;code&gt;select_conversation&lt;/code&gt; method in the controller:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_controller.part2.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;And that’s it – if you check out the page again, you can see that the
URL changes every time you click on a user’s name. Also, the class
&lt;code&gt;active&lt;/code&gt; is being added to that element, so let’s add some CSS to make
it visible (I’ll go ahead and add the CSS for items we will add later
on):&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/b774ae9a7ae6cc98fceefea4a99e8b2bdb50d2db/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/active.css?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now let’s create a form on the right side to send messages to each user:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/89d0a5924f410c6f5d0e03c1f323b01045a6b536/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_part2.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;First, we’re checking if there is a user selected before displaying the
form, then we display all messages from the current conversation (the
conversation with the selected user) from a method in the controller
we’re going to define in a bit and at the bottom we’re displaying a form
for sending new messages.&lt;/p&gt;

&lt;p&gt;Notice that the value of the input is an attribute we’re creating on the
page collection model since we don’t want it to be stored in the data
store. Now let’s define the &lt;code&gt;current_conversation&lt;/code&gt; and &lt;code&gt;send_message&lt;/code&gt;
methods in the controller:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/main_controller.part3.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the &lt;code&gt;send_message&lt;/code&gt; method we add a new message to the collection if
the message is not blank (we’re checking inline so we don’t have to mess
with validations at the moment), then we set the &lt;code&gt;page._new_message&lt;/code&gt; to
&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; so we empty the input field.&lt;/p&gt;

&lt;p&gt;We might want to add that line to the end of the select_conversation
method as well. The current conversation method just queries the
&lt;code&gt;_messages&lt;/code&gt; collection for messages between the selected user and the
current user.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up-with-real-time-notifications:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Wrap Up With Real-Time Notifications&lt;/h3&gt;

&lt;p&gt;To finish, I would like to have some kind of notification system, so
users could see when other users are messaging them.&lt;/p&gt;

&lt;p&gt;Let’s add a new collection called &lt;code&gt;_notifications&lt;/code&gt; and create a new one
after each message is sent:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a321082720529d3cf8c1cc4f15b208ff38728b47/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/add_and_delete_notifications.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Also, we need to delete notifications from after a user selects the
conversation and sees the new messages, so I added that part to the
&lt;code&gt;select_conversation&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Let’s add a notification counter right next to the user name:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/0f03f5437f3c9821ce6d49ce3424afda431808f1/2015/02/11/meet-volt-a-promising-ruby-framework-for-dynamic-applications/index_main.part1.html?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now the app is ready, you can open a couple of browsers and start
testing the real-time capabilities of Volt.&lt;/p&gt;

&lt;h3 id=&#34;volt-is-definitely-worth-a-try:d3bc95303a4beee64472c5f06d514b40&#34;&gt;Volt Is Definitely Worth A Try&lt;/h3&gt;

&lt;p&gt;Even though Volt is not as mature and robust as most of the popular
frameworks that have been around for years (at the moment of Volt is
still in beta), it is worth considering and studying.&lt;/p&gt;

&lt;p&gt;In case you are interested, take it out for a spin and keep an eye on
further developments, as Volt looks like a very promising framework even
at this early stage of development.&lt;/p&gt;

&lt;p&gt;There are a lot of cool new features in the pipeline and I’m pretty sure
Volt will become more relevant over the next couple of years, as more
people start experimenting with it. Due to a number of innovative
features, many developers could fall in love with Volt and use it for
their next project.&lt;/p&gt;

&lt;p&gt;Finally, here’s the &lt;a href=&#34;https://gist.github.com/apeniche/2bb6edd82c3e3e0044e6&#34;&gt;complete
code&lt;/a&gt; that we have
developed.
&lt;script src=&#34;https://gist.github.com/apeniche/2bb6edd82c3e3e0044e6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Felipe Elias Philipp Winner RPCFN - 1 (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn---1-reprint/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn---1-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 8th Oct. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    In this brief interview, Satish Talim of RubyLearning talks to &lt;b&gt;Felipe Elias Philipp of Brazil&lt;/b&gt;, winner of the first-ever &lt;a href=&#34;http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-1-reprint/&#34;&gt;Ruby Programming Challenge For Newbies&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Felipe Elias Philipp&#34; src=&#34;http://www.rubylearning.com/images/profile2-125x125.jpg&#34; alt=&#34;Felipe Elias Philipp&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Welcome Felipe and thanks for taking out time to share your thoughts. For the benefit of the readers, could you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; Thanks Satish for the opportunity. Well, about me&amp;#8230; I&amp;#8217;m a Brazilian guy, a web developer and a Mac user. I&amp;#8217;m 22 years old and I started to program at school, since I was 16. Since then, programming has become my life and I can&amp;#8217;t imagine myself doing any other thing.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How did you get involved with Ruby programming?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; I discovered Ruby through Rails on a well-known website by Brazilians: iMasters. I was just amazed as it was so easy to understand the Ruby code and I could solve the problems in a very simple way. This got me very motivated and I became more interested in the subject. At that time, I was working with ASP and I was deciding whether to learn Java or .NET. By then, I had realized that Ruby was simpler and I decided to learn it.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you name three features of Ruby that you like the most, as compared to other languages? Why?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; One of the things that caught my attention was the fact that Ruby is an extremely dynamic language. The way I can open classes and add my own methods is one of the features I like most. Creating DSLs was something I had never seen before and which I found very interesting. These are some of the features I remember at the moment, although I like almost everything in the language.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How was experience of taking part in the Ruby Programming Challenge For Newbies (RPCFN)?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; Despite knowing Ruby for almost two years, I had never written more than 50 lines of code. I had not found a project that motivated me to practice. However the &lt;strong&gt;RPCFN&lt;/strong&gt; aroused me! Also, I enjoyed the challenge very much. I recommend everybody to take part in the &lt;strong&gt;RPCFN&lt;/strong&gt;. Even if you know the language, there is always something new to learn. I intend to participate in all the forthcoming challenges.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What are your future plans?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; I want to study Ruby and Rails deeper, and also learn other languages (Python and Erlang are already on my list). In the short ter, I intend to share whatever I learn about Ruby and about programming in general; perhaps starting my own blog or something else.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Felipe. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Felipe would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Average Arrival Time For A Flight - 2 Reprint</title>
      <link>http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 8th Oct. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;h4&gt;
    RPCFN: Average Arrival Time For A Flight (#2)
  &lt;/h4&gt;
  
  &lt;h5&gt;
    By Chris Strom
  &lt;/h5&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Thank you for the very encouraging response to the &lt;a href=&#34;http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn-1-reprint/&#34;&gt;first-ever&lt;/a&gt; &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8220;. The second Ruby challenge is from Chris Strom.
  &lt;/p&gt;
  
  &lt;h3&gt;
    About Chris Strom
  &lt;/h3&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Chris Strom&#34; src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris Strom&#34; /&gt;Chris Strom (&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt; / &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;blog&lt;/a&gt;) in his day job, is the Director of Software Engineering for mdlogix, a small company in Baltimore, Maryland. They develop software that manages clinical research trials and associated data. They primarily code with Ruby on Rails. His background is in web development, mostly in Perl until ~2005 when he made the switch to Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    Chris has this to say about the challenge:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;em&gt;RPCFN is a good idea as reading books and documentation can only take you so far when learning a new language. To really learn, you need to use the language. RPCFN provides a fabulous forum for using Ruby in the form of regular, engaging (but not arcanely difficult) challenges. Better yet, it provides feedback on how to use Ruby well, as each fortnight the best solution to a challenge is chosen. RPCFN is a wonderful introduction to the Ruby language and to the Ruby community. Welcome newbies!&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    Sponsor
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#39;http://www.railsware.com/&#39;&gt;&lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/Railsware125x125.png&#39; width=&#34;125&#34; height=&#34;125&#34; style=&#34;border: 0px none ;&#34; alt=&#34;Railsware for premium-quality web applications&#34; title=&#34;Railsware for premium-quality web applications&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    This fortnights programming challenge is sponsored by &lt;strong&gt;&lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;&lt;/strong&gt;. Railsware is glad to support the Ruby Programming Challenge and help the Ruby community grow and get stronger.
  &lt;/p&gt;
  
  &lt;p&gt;
    Railsware is a product development company specializing in Ruby on Rails and UI design creating premium-quality web applications. The company works with startups and established businesses looking to build ecommerce, social networking, specialized business applications and many other products.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      The person with the best Ruby solution (if there is a tie between answers, then the one who posted first will be the winner) will be awarded any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The other prize, selected randomly amongst the remaining working Ruby solutions, will be awarded any &lt;b&gt;one&lt;/b&gt; of BDDCasts&amp;#8217; &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    The two persons who win, can&amp;#8217;t win again in the next immediate challenge but can still participate.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Ruby Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    You owe a big favor and have agreed to pick up a friend at the airport every Friday night. The airline on which your friend flies is cheap, but terrible with reporting delays and departure/arrival times. You soon realize that the 10pm flight is never on time and is usually late by more than an hour. If the plane has arrived at 11:15pm, 12:03am, 11:30pm, 11:23pm and 11:48pm, what is the average arrival time?
  &lt;/p&gt;
  
  &lt;p&gt;
    Does the solution still work if your friend changes to a flight arriving 6 hours later? What about 12 hours later?
  &lt;/p&gt;
  
  &lt;h4&gt;
    Program Output
  &lt;/h4&gt;
  
  &lt;p&gt;
    The output should look something like this when run from the console:
  &lt;/p&gt;
  
  &lt;pre&gt;&gt;&gt; average_time_of_day([&#34;11:51pm&#34;, &#34;11:56pm&#34;, &#34;12:01am&#34;, &#34;12:06am&#34;, &#34;12:11am&#34;])
=&gt; &#34;12:01am&#34;

&gt;&gt; average_time_of_day([&#34;6:41am&#34;, &#34;6:51am&#34;, &#34;7:01am&#34;])
=&gt; &#34;6:51am&#34;
&lt;/pre&gt;
  
  &lt;h4&gt;
    Hint
  &lt;/h4&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Your digital ways will not help you, time of day is cyclical.
    &lt;/li&gt;
    &lt;li&gt;
      You may need to use the &lt;b&gt;Math&lt;/b&gt; and &lt;b&gt;Time&lt;/b&gt; classes.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;Requirements&lt;/b&gt;: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems). You &lt;b&gt;do not&lt;/b&gt; need to build a gem for this. Pure Ruby code is all that is needed.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    How to Enter the Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    Read the &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;. By participating in this challenge, you agree to be bound by these Challenge Rules. &lt;b&gt;It&amp;#8217;s free and &lt;a href=&#34;http://rubylearning.com/blog/wp-login.php?action=register&#34;&gt;registration&lt;/a&gt; is optional&lt;/b&gt;. You can enter the challenge just by posting the following as a comment to this blog post:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/#rpc5&#34;&gt;GIST URL of your Solution&lt;/a&gt; (i.e. Ruby code) with explanation and / or test cases:
    &lt;/li&gt;
    &lt;li&gt;
      Code works with Ruby 1.8 / 1.9 / Both:
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      As soon as we receive your GIST URL, we will fork your submission. This means that your solution is frozen and accepted. Please be sure that is the solution you want, as it is now recorded in time and is the version that will be evaluated.
    &lt;/li&gt;
    &lt;li&gt;
      All solutions posted would be hidden to allow participants to come up with their own solutions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;You should post your entries before midnight of 18th Oct. 2009 (Indian Standard Time). No new solutions will be accepted from 19th to 22nd Oct. 2009.&lt;/b&gt;
    &lt;/li&gt;
    &lt;li&gt;
      On Monday, 19th Oct. 2009 all the solutions will be thrown open for everyone to see and comment upon.
    &lt;/li&gt;
    &lt;li&gt;
      The winning entries will be announced on this blog on 22nd Oct. The winners will be sent their prizes by email.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    More details on the RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Please refer to the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; for answers to the following questions:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies (RPCFN)?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit you?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best Solution&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge Topic?&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;Chris Strom&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Sponsor &lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Jeff Schoolcraft of &lt;a href=&#34;http://bddcasts.com/&#34;&gt;BDDCasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The RubyLearning team, namely Dave Lilley (New Zealand), Jeff Savin (Canada), &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://giordano.scalzo.biz/2009/10/10/entering-rpcfn-2/&#34;&gt;Giordano Scalzo&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://jonathanjulian.com/2009/10/i-just-entered-rpcfn-2/&#34;&gt;Jonathan Julian&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.loicpaillotin.com/2009/10/getting-back-in-shape.html&#34;&gt;Loïc Paillotin&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have any doubts / questions about the challenge (the current problem statement), please post them as comments to this post and the author will reply asap.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Participants
  &lt;/h3&gt;
  
  &lt;p&gt;
    There are two categories of participants. Some are vying for the prizes and some are participating for the fun of it.
  &lt;/p&gt;
  
  &lt;h4&gt;
    In the competition
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      Othmane Benkirane, Morocco &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Tisho Georgiev, Bulgaria
    &lt;/li&gt;
    &lt;li&gt;
      Pete Campbell, USA
    &lt;/li&gt;
    &lt;li&gt;
      Jonathan Julian, USA
    &lt;/li&gt;
    &lt;li&gt;
      Antonio, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Robison WR Santos, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Ricardo Duarte, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Paul Barry, USA
    &lt;/li&gt;
    &lt;li&gt;
      Haris Amin, USA
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/10/22/charles-feduke-winner-rpcfn-2/&#34;&gt;Charles Feduke&lt;/a&gt;, USA &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Oliver, UK
    &lt;/li&gt;
    &lt;li&gt;
      Bryan Liles, USA
    &lt;/li&gt;
    &lt;li&gt;
      Gunther Diemant, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Valério Farias, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Vikas Maskeri, India
    &lt;/li&gt;
    &lt;li&gt;
      Jiren Patel, India
    &lt;/li&gt;
    &lt;li&gt;
      Stefan, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Ahmed Al Hafoudh, Slovakia
    &lt;/li&gt;
    &lt;li&gt;
      Tom Voltz, USA
    &lt;/li&gt;
    &lt;li&gt;
      David Jenkins, USA
    &lt;/li&gt;
    &lt;li&gt;
      Michael Lang, USA
    &lt;/li&gt;
    &lt;li&gt;
      Thiago Fernandes Massa, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Tim Rand, USA
    &lt;/li&gt;
    &lt;li&gt;
      Milan Dobrota, Serbia
    &lt;/li&gt;
    &lt;li&gt;
      Mike Hodgson, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Brad O&amp;#8217;Connor, Australia
    &lt;/li&gt;
    &lt;li&gt;
      Giordano Scalzo, Italy
    &lt;/li&gt;
    &lt;li&gt;
      Rainer Thiel, New Zealand
    &lt;/li&gt;
    &lt;li&gt;
      Todd Huss, USA
    &lt;/li&gt;
    &lt;li&gt;
      Pankaj Sisodiya, India
    &lt;/li&gt;
    &lt;li&gt;
      Loïc Paillotin, USA
    &lt;/li&gt;
    &lt;li&gt;
      Chuck Ha, USA
    &lt;/li&gt;
    &lt;li&gt;
      Josh Baxley, USA
    &lt;/li&gt;
    &lt;li&gt;
      Javier Blanco Gutiérrez, Spain
    &lt;/li&gt;
    &lt;li&gt;
      Sogo Ohta, Japan
    &lt;/li&gt;
    &lt;li&gt;
      Daniel Wanek, USA
    &lt;/li&gt;
    &lt;li&gt;
      Himansu Desai, USA
    &lt;/li&gt;
    &lt;li&gt;
      John McDonald, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Miller, UK
    &lt;/li&gt;
    &lt;li&gt;
      Sriram Varahan, India
    &lt;/li&gt;
    &lt;li&gt;
      Conner Peirce, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Marini, USA
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h4&gt;
    Just for Fun
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Michael Kohl, Austria
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper, UK&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Winners
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/winner_icon_1.png&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Winners&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Congratulations to the winners of this Ruby Challenge. They are:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Charles Feduke&lt;/b&gt; from USA (his &lt;a href=&#34;https://gist.github.com/5b371226faf83af50d7e&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; the person with the best Ruby solution. He wins any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Othmane Benkirane&lt;/b&gt; from Morocco (his &lt;a href=&#34;http://gist.github.com/205002&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; selected randomly amongst the remaining working Ruby solutions. He wins any &lt;b&gt;one&lt;/b&gt; of BDDCasts’ &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Previous Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-1-reprint/&#34;&gt;RPCFN: Shift Subtitle (#1)&lt;/a&gt; by Fabio Akita.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Next Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2009/10/30/rpcfn-short-circuit-3/&#34;&gt;RPCFN: Short Circuit (#3)&lt;/a&gt; by Gautam Rege.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignleft&#34; src=&#39;http://rubylearning.com/images/update.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;This Challenge is now closed&lt;/b&gt;. &lt;b&gt;Chris Strom&lt;/b&gt; has a &lt;a href=&#34;https://gist.github.com/4f6807eef49064027a3c&#34;&gt;working solution to this problem&lt;/a&gt;. This is not a &amp;#8220;perfect&amp;#8221; or the sole &amp;#8220;correct&amp;#8221; solution, but just one way of doing it.
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom has written a blog post that talks about the &lt;a href=&#34;http://japhr.blogspot.com/2009/10/newbie-feedback.html&#34;&gt;most common &amp;#8220;issues&amp;#8221; faced by Ruby beginners&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The (#3) challenge by &lt;b&gt;Gautam Rege, India&lt;/b&gt; is scheduled for 1st Nov. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#4) challenge by &lt;b&gt;Michael Kohl, Austria&lt;/b&gt; is scheduled for 1st Dec. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#5) challenge by &lt;b&gt;&lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper&lt;/a&gt;, UK&lt;/b&gt; is scheduled for 1st Jan. 2010.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Ruby Programming Challenge For Newbies (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/25/rpcfn-ruby-programming-challenge-for-newbies-reprint/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/25/rpcfn-ruby-programming-challenge-for-newbies-reprint/</guid>
      <description>&lt;div&gt;
  &lt;h3&gt;
    RPCFN: Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 20th Sept. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    After a &lt;a href=&#34;http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/&#34;&gt;very encouraging response to our poll&lt;/a&gt; from YOU, the readers of the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, RL is happy to announce the first-ever &lt;b&gt;fortnightly&lt;/b&gt; (every 14 days) &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8221; that starts on &lt;b&gt;Friday, 25th Sept. 2009&lt;/b&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What Is The RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    The RPCFN is a fortnightly (every 14 days) programming challenge for &lt;strong&gt;Ruby Newbies&lt;/strong&gt; in the spirit of the &lt;a href=&#34;http://rubyquiz.com/&#34;&gt;Ruby Quiz&lt;/a&gt;. A new RPCFN will be posted on this &lt;a href=&#34;http://rubylearning.com/blog/&#34;&gt;RubyLearning blog&lt;/a&gt; every alternate Friday, starting 25th Sept. 2009. The contest is open to individuals only and you are invited to contribute solution(s) and/or discussion(s) as comments to the respective blog post. 13 days after the RPCFN is posted (i.e. on a Thursday), all the solutions will be thrown open for everyone to see and comment upon. The next day i.e. Friday, the cycle begins again. The Ruby working solution(s) should be clear-cut, follow Ruby conventions and still be easy to understand.
  &lt;/p&gt;
  
  &lt;h3&gt;
    How does RPCFN benefit you?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2009/07/15/chris-strom-how-do-i-learn-and-master-sinatra/&#34;&gt;Chris Strom&lt;/a&gt; (&lt;a title=&#34;twitter&#34; href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt;&amp;nbsp;/&amp;nbsp;&lt;a title=&#34;blog&#34; href=&#34;http://japhr.blogspot.com&#34;&gt;blog&lt;/a&gt;) is one of the problem setters for the RPCFN and has this to say:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      RPCFN is a good idea as reading books and documentation can only take you so far when learning a new language. To really learn, you need to use the language. RPCFN provides a fabulous forum for using Ruby in the form of regular, engaging (but not arcanely difficult) challenges. Better yet, it provides feedback on how to use Ruby well, as each fortnight the best solution to a challenge is chosen. RPCFN is a wonderful introduction to the Ruby language and to the Ruby community. Welcome newbies!
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    How to Enter
  &lt;/h3&gt;
  
  &lt;p&gt;
    It&amp;#8217;s free. You can enter the challenge by posting the following as a comment to the Ruby challenge blog post that will appear every alternate Friday, starting 25th Sept. 2009:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address:
    &lt;/li&gt;
    &lt;li&gt;
      URL of your 125&amp;#215;125 real photo (optional):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do:
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      Your Solution (i.e. Ruby code):
    &lt;/li&gt;
    &lt;li&gt;
      Explanation (if any):
    &lt;/li&gt;
    &lt;li&gt;
      Test cases (if any):
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: All solutions posted would be hidden to allow users to come up with their own solutions. The solutions will be revealed only after a winner is chosen.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Notification
  &lt;/h3&gt;
  
  &lt;p&gt;
    The winning entries will be announced on this blog. The winners will be sent their prizes by email.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;p&gt;
    There will normally be two prizes (though we reserve the right to change this for each challenge). One prize will be awarded for the best solution (if there is a tie between answers, then the one who posted first will be the winner) and the other will be decided by randomly selecting one person from all the remaining working solutions for that fortnight (14 days). If a person wins he/she can’t win again in the next, immediate challenge but can still participate. Prizes can range from small cash rewards to free PDFs &amp;#8211; whatever the sponsors of the challenge have offered.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Sponsors
  &lt;/h3&gt;
  
  &lt;p&gt;
    Any individual or companies interested in sponsoring the fortnightly event are welcome. Please contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to the RubyLearning team, namely &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
  &lt;/p&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Shift Subtitle Reprint</title>
      <link>http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-reprint/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-reprint/</guid>
      <description>&lt;div&gt;
  &lt;h3&gt;
    Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;h4&gt;
    RPCFN: Shift Subtitle (#1)
  &lt;/h4&gt;
  
  &lt;h5&gt;
    By Fabio Akita
  &lt;/h5&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 24th Sept. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    After a &lt;a href=&#34;http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/&#34;&gt;very encouraging response to our poll&lt;/a&gt; from YOU, the readers of the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, RL is happy to announce the first-ever &lt;b&gt;fortnightly&lt;/b&gt; ( bi-weekly / every 14 days) &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8221; in Ruby. Thanks to YOU, the Ruby community, people like Fabio Akita and companies like Locaweb who make all of this possible.
  &lt;/p&gt;
  
  &lt;h3&gt;
    About Fabio Akita
  &lt;/h3&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Fabio Akita&#34; src=&#34;http://www.rubylearning.com/images/akita.jpg&#34; alt=&#34;Fabio Akita&#34; /&gt;&lt;strong&gt;Fabio Akita&lt;/strong&gt; is a Brazilian Rails enthusiast, also known online as &amp;#8220;AkitaOnRails&amp;#8221;. He regularly write posts on his own &lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;blog&lt;/a&gt; and had published the very first book tailored for the Brazilian audience called &amp;#8220;Repensando a Web com Rails&amp;#8221;.
  &lt;/p&gt;
  
  &lt;p&gt;
    He is now a full-time Ruby on Rails developer working as Project Manager at &lt;a href=&#34;http://www.locaweb.com/default.html?utm_campaign=Rails&amp;utm_source=rubylearning&amp;utm_medium=quadrado&#34;&gt;Locaweb&lt;/a&gt;, Brazil. He&amp;#8217;s also the creator of the &amp;#8220;&lt;a href=&#34;http://www.railssummit.com.br/&#34;&gt;Rails Summit Latin America&lt;/a&gt;&amp;#8220;, the largest international Rails event in South America.
  &lt;/p&gt;
  
  &lt;p&gt;
    Fabio has this to say about the challenge:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;em&gt;If you&amp;#8217;re learning a new language such as Ruby, it is important that you practice it. And the best way to start is by scratching your own itch. Anything goes. It&amp;#8217;s not unusual to start by writing simple command line scripts to help out your everyday routine. That&amp;#8217;s why I thought of a very trivial exercise in the first challenge. It should demand that you know the basics for a variety of Ruby subjects such as regular expressions, file manipulation, time calculation and so on. The only way to achieve mastery is by practice. So let&amp;#8217;s get started!&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    Sponsor
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#39;http://www.1steasy.com/ruby-on-rails.htm&#39;&gt;&lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubylearning125.gif&#39; width=&#34;125&#34; height=&#34;125&#34; style=&#34;border: 0px none ;&#34; alt=&#34;UK based Passenger Hosting&#34; title=&#34;UK based Passenger Hosting&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt;&lt;/strong&gt; are delighted to have been given the opportunity to support the work of Satish Talim and his team at RubyLearning.
  &lt;/p&gt;
  
  &lt;p&gt;
    Taking part in the Ruby Programming Challenge? You’re welcome to take advantage of the free &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm&#34;&gt;Ruby on Rails hosting trials&lt;/a&gt; that 1st Easy offer: simply register your details, and a full-featured account is yours to do with as you please for one month. Once the trial is over, you can transfer your work to a paid account, or walk away with no questions asked!
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      The person with the best Ruby solution (if there is a tie between answers, then the one who posted first will be the winner) will be awarded any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The other prize, selected randomly amongst the remaining working Ruby solutions, will be awarded any &lt;b&gt;one&lt;/b&gt; of Pragmatic&amp;#8217;s &lt;a href=&#39;http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming&#39;&gt;The Ruby Object Model and Metaprogramming&lt;/a&gt; screencasts.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    The two persons who win, can&amp;#8217;t win again in the next immediate challenge but can still participate.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Ruby Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Difficulty&lt;/b&gt;: Ruby beginner.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Goals&lt;/b&gt;: Basic control over Ruby elements, specially command line scripting.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Description&lt;/b&gt;: There are several ways to subtitle a movie nowadays, and one of the most well known format is the SubRip format (&lt;a href=&#34;http://en.wikipedia.org/wiki/SubRip&#34;&gt;http://en.wikipedia.org/wiki/SubRip&lt;/a&gt;). It has entries like these:
  &lt;/p&gt;
  
  &lt;pre&gt;645
01:31:51,210 --&gt; 01:31:54,893
the government is implementing a new policy...

646
01:31:54,928 --&gt; 01:31:57,664
In connection with a dramatic increase
in crime in certain neighbourhoods,
&lt;/pre&gt;
  
  &lt;p&gt;
    Each line has an increasing integer identification, then comes the time range (start and end time) in the format &amp;#8220;hours:minutes:seconds,milliseconds&amp;#8221;. The decimal separator used is the comma. Finally there are the subtitles themselves and a line break marks the end of an entry.
  &lt;/p&gt;
  
  &lt;p&gt;
    Sometimes the timing is shifted for a small amount, 2 or 3 seconds. Then comes the trouble when you need to shift everything a few seconds back or ahead.
  &lt;/p&gt;
  
  &lt;p&gt;
    The goal is to create a small command line script in Ruby that will read an SRT file, and output another one with the new calculated times.
  &lt;/p&gt;
  
  &lt;p&gt;
    So, for example, if I want to shift everything 2,500 (2 seconds and 500 milliseconds) ahead, I would start with this:
  &lt;/p&gt;
  
  &lt;pre&gt;01:32:04,283 --&gt; 01:32:07,769
&lt;/pre&gt;
  
  &lt;p&gt;
    and end up with:
  &lt;/p&gt;
  
  &lt;pre&gt;01:32:06,783 --&gt; 01:32:10,269
&lt;/pre&gt;
  
  &lt;p&gt;
    The command line should accept arguments such as:
  &lt;/p&gt;
  
  &lt;pre&gt;shift_subtitle --operation add --time 02,110 input_file output_file
&lt;/pre&gt;
  
  &lt;p&gt;
    This means &amp;#8220;&amp;#45;&amp;#45;operation&amp;#8221; can accept either &amp;#8216;add&amp;#8217; or &amp;#8216;sub&amp;#8217; to add or subtract times. The &amp;#8220;&amp;#45;&amp;#45;time&amp;#8221; will accept the amount of time to shift in the format 11,222 where &amp;#8220;11&amp;#8221; is the amount of seconds and &amp;#8220;222&amp;#8221; the amount of milliseconds.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Requirements&lt;/b&gt;: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems).
  &lt;/p&gt;
  
  &lt;p&gt;
    It has to implement &amp;#8220;optparse&amp;#8221; to parse the command line arguments.
  &lt;/p&gt;
  
  &lt;p&gt;
    As an observation, bear in mind that the first thing that you might attempt will look like this:
  &lt;/p&gt;
  
  &lt;pre&gt;a = Time.at(04,283)
b = a + 2.500
puts b.usec
=&gt; 500283
&lt;/pre&gt;
  
  &lt;p&gt;
    This is wrong, the proper result should&amp;#8217;ve been &amp;#8220;783&amp;#8221; (as in the example in the previous section). So it means that you will have to find another way out.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Extras (Optional)&lt;/b&gt;: If you want:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      It would be interesting to exercise the process of a Gem creation. So you would have to package your script.
    &lt;/li&gt;
    &lt;li&gt;
      Another thing that would be good is to have RSpec unit tests covering your code, to exercise software development best practices.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;(Note that the above two points are optional and not a requirement).&lt;/b&gt;
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    How to Enter the Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;b&gt;It&amp;#8217;s free and registration is not required&lt;/b&gt;. You can enter the challenge just by posting the following as a comment to this blog post:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      Your Solution (i.e. Ruby code): Prefix your code with &lt;pre&gt; tag and suffix it with &lt;/pre&gt; tag.
    &lt;/li&gt;
    &lt;li&gt;
      Code works with Ruby 1.8 / 1.9 / Both:
    &lt;/li&gt;
    &lt;li&gt;
      Explanation (if any):
    &lt;/li&gt;
    &lt;li&gt;
      Test cases (if any):
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      You may provide the URL of your source code, in case it is hosted on GitHub.
    &lt;/li&gt;
    &lt;li&gt;
      All solutions posted would be hidden to allow users to come up with their own solutions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;You should post your entries before midnight of 4th Oct. 2009 (Indian Standard Time). No new solutions will be accepted from 5th to 8th Oct. 2009.&lt;/b&gt;
    &lt;/li&gt;
    &lt;li&gt;
      On Monday, 5th Oct. 2009 all the solutions will be thrown open for everyone to see and comment upon.
    &lt;/li&gt;
    &lt;li&gt;
      The winning entries will be announced on this blog. The winners will be sent their prizes by email.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    More details on the RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Please refer to the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; for answers to the following questions:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies (RPCFN)?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit you?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best Solution&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge Topic?&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;Fabio Akita&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Sponsor &lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt;, U.K.
    &lt;/li&gt;
    &lt;li&gt;
      The RubyLearning team, namely &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.rubyinside.com.br/participe-do-desafio-do-ruby-learning-e-concorra-a-premios-2227&#34;&gt;Ruby Inside, Brazil&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://ruby.about.com/b/2009/10/02/have-you-tried-the-ruby-programming-challenge-for-newbies-yet.htm&#34;&gt;Amanda and Michael&amp;#8217;s Ruby Blog&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://redshinythings.blogspot.com/2009/10/ruby-challenge.html&#34;&gt;Adrian&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.deploymentzone.com/2009/09/29/temp-files-and-ruby-1-8-6-on-windows/&#34;&gt;Charles Feduke&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://blog.kreusch.com.br/post/199158389/my-ruby-programming-challenge-for-newbies-1-entry&#34;&gt;Fabio Kreusch&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.fernandoquadro.com.br/html/2009/09/25/desafio-ruby-learning-participe-e-concorra-a-premios/&#34;&gt;Fernando Quadro&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://charpcfn.wordpress.com/2009/10/06/shift-subtitle-results/&#34;&gt;It&amp;#8217;s so shiny&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://blog.foxxtrot.net/2009/09/ruby-programming-challenge-for-newbies.html&#34;&gt;Jeff Craig&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have any doubts / questions about the challenge (the current problem statement), please post them as comments to this post and the author will reply asap.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Participants
  &lt;/h3&gt;
  
  &lt;p&gt;
    There are two categories of participants. Some are vying for the prize and some are participating for the fun of it. The participants were:
  &lt;/p&gt;
  
  &lt;h4&gt;
    In the competition
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Felipe Giotto, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Eduardo, Brazil
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      Kalle Lindström, Sweden &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Robison WR Santos, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Aldric, USA
    &lt;/li&gt;
    &lt;li&gt;
      Akshay Gupta, India
    &lt;/li&gt;
    &lt;li&gt;
      Fabio Kreusch, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Chris Jones, USA
    &lt;/li&gt;
    &lt;li&gt;
      Chuck Ha, USA
    &lt;/li&gt;
    &lt;li&gt;
      Milan Dobrota, Serbia
    &lt;/li&gt;
    &lt;li&gt;
      Parag Shah, India
    &lt;/li&gt;
    &lt;li&gt;
      Hugo Figueiredo, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      John McDonald, USA
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/10/08/felipe-elias-philipp-winner-rpcfn-1/&#34;&gt;Felipe Elias Philipp&lt;/a&gt;, Brazil &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Charles Feduke, USA
    &lt;/li&gt;
    &lt;li&gt;
      Hari Rajagopal, USA
    &lt;/li&gt;
    &lt;li&gt;
      Brad O&amp;#8217;Connor, Australia
    &lt;/li&gt;
    &lt;li&gt;
      Oliver, UK
    &lt;/li&gt;
    &lt;li&gt;
      Jacob Lichner, USA
    &lt;/li&gt;
    &lt;li&gt;
      Todd Huss, USA
    &lt;/li&gt;
    &lt;li&gt;
      Antonio, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Sriram Varahan, India
    &lt;/li&gt;
    &lt;li&gt;
      Giordano Scalzo, Italy
    &lt;/li&gt;
    &lt;li&gt;
      Phil Kates, USA
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h4&gt;
    Just for Fun
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Michael Kohl, Austria
    &lt;/li&gt;
    &lt;li&gt;
      Rodrigo Rosenfeld Rosas, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Dominik Honnef, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Mike Hodgson, Canada
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Winners
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/winner_icon_1.png&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Winners&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Congratulations to the winners of this Ruby Challenge. They are:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Felipe Elias Philipp&lt;/b&gt; from Brazil (his &lt;a href=&#34;http://github.com/felipeelias/shift_subtitle&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; the person with the best Ruby solution. He wins any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Kalle Lindström&lt;/b&gt; from Sweden (his &lt;a href=&#34;https://gist.github.com/fa3ec5afe7b19d22c44a&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; selected randomly amongst the remaining working Ruby solutions. He wins any &lt;b&gt;one&lt;/b&gt; of Pragmatic&amp;#8217;s &lt;a href=&#39;http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming&#39;&gt;The Ruby Object Model and Metaprogramming&lt;/a&gt; screencasts.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Next Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight-2-reprint/&#34;&gt;RPCFN: Average Arrival Time For A Flight (#2)&lt;/a&gt; by Chris Strom.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignleft&#34; src=&#39;http://rubylearning.com/images/update.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;The Challenge is now closed&lt;/b&gt;. &lt;b&gt;Fabio Akita&lt;/b&gt; has a &lt;a href=&#34;http://github.com/akitaonrails/Shift-Subtitle&#34;&gt;working solution to this problem&lt;/a&gt;. This is not a &amp;#8220;perfect&amp;#8221; or the sole &amp;#8220;correct&amp;#8221; solution, but just one way of doing it. Fabio is thankful to &lt;b&gt;Satoshi Asakawa&lt;/b&gt; for using one of his ideas in this implementation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What are the Twelve Rules of Sinatra? (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 19th July. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Twelve Rules of Sinatra
  &lt;/h3&gt;
  
  &lt;p class=&#34;update center&#34;&gt;
    &lt;strong&gt;The Twelve Rules of Sinatra: &lt;a href=&#34;http://rubylearning.com/data/Sinatra12Rules.pdf&#34;&gt;Download this as a Free Report&lt;/a&gt;.&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Recently, I was reading Scott Adams&amp;#8217; (of Dilbert fame) blog post &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/rule_of_twelve&#34;&gt;Rule of Twelve&lt;/a&gt;&amp;#8221; where he stated:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      The Rule of Twelve states that if you know twelve concepts about a given topic you will look like an expert to people who only know two or three. If you learn more than twelve concepts about a topic, the value of each additional one drops off considerably. Allow me to be the first to confess that twelve is not a magic and inviolable number.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    He also wrote a follow-up post to support his statement: &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/twelve_rules_of_energy_efficient_building/&#34;&gt;Twelve Rules of Energy Efficient Building&lt;/a&gt;&amp;#8220;.
  &lt;/p&gt;
  
  &lt;p&gt;
    This made me wonder, could we apply the same &amp;#8220;Rule of Twelve&amp;#8221; to &lt;strong&gt;Sinatra&lt;/strong&gt;?
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Jeremy Evans&#34; src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy Evans&#34; /&gt;Here is &lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy Evans&amp;#8217;&lt;/a&gt;&lt;/strong&gt; take on this:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Just like Rails, keep your controller/actions simple, and put most of your business logic in your models. This makes testing and code reuse easier.
    &lt;/li&gt;
    &lt;li&gt;
      Also like Rails, avoid excess logic in your views. Add helper methods that the views call to keep the views clean.
    &lt;/li&gt;
    &lt;li&gt;
      Unlike Rails, read the Sinatra source. The main part is a single file that&amp;#8217;s around 1000 lines of quite understandable Ruby code. Just reading it will probably make you a better programmer.
    &lt;/li&gt;
    &lt;li&gt;
      If you have a problem that you think other people probably have (e.g. a Rails-like flash), look first for a Rack middleware that handles it, rather than recreating the wheel.
    &lt;/li&gt;
    &lt;li&gt;
      Untested code will probably break sooner than later, so if you want the code to work in the future, write tests.
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Well, Jeremy has set the ball rolling. &lt;b&gt;What&amp;#8217;s your take on this?&lt;/b&gt; Kindly post your thoughts as comments to this blog post. Looking forward to some interesting read.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Poll: Ruby Problems for Beginners and Prizes (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 13th Sept. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Poll: Ruby Problems for Beginners and Prizes
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;span class=&#34;drop_cap&#34;&gt;M&lt;/span&gt;any RubyLearning participants wrote in asking RubyLearning to start a weekly post containing a problem to be solved using Ruby. A problem will be posted here every week / fortnight and anyone is free to offer their solution (the solution should be clear-cut, follow Ruby conventions and still be easy to understand) as a comment to the blog post. A small panel will evaluate the solutions received and decide the best amongst them all. The person with the best solution will be awarded a token prize which could be a &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; or a &lt;a href=&#34;http://www.pragprog.com/screencasts&#34;&gt;Pragmatic&lt;/a&gt; screencast or something equivalent. Maybe some sponsors could chip in with some prizes!
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/ruby_challenge3.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    RubyLearning is open to this idea and will start the same provided there is a good response to this. There&amp;#8217;s a single question poll below which please answer and &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;what&amp;#8217;s more important is to post your thoughts, suggestions etc. as comments to this blog post&lt;/span&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    We do have the &lt;a href=&#34;http://rubyquiz.com/&#34;&gt;Ruby Quiz&lt;/a&gt;, a weekly programming challenge for Ruby programmers. What&amp;#8217;s also needed is something for programmers starting off with Ruby. Maybe RubyLearning could provide this.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;We look forward to your response(s) and thoughts, suggestions (thoughts on the nature of the Ruby problem to be asked, evaluation criteria etc.) as comments below&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;div id=&#34;polls-3&#34; class=&#34;wp-polls&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;
      &lt;strong&gt;Should we start a weekly Ruby programming challenge for beginners?&lt;/strong&gt;
    &lt;/p&gt;
    
    &lt;div id=&#34;polls-3-ans&#34; class=&#34;wp-polls-ans&#34;&gt;
      &lt;ul class=&#34;wp-polls-ul&#34;&gt;
        &lt;li&gt;
          Yes &lt;small&gt;(96%, 339 Votes)&lt;/small&gt;&lt;div class=&#34;pollbar&#34; style=&#34;width: 96%;&#34; title=&#34;Yes (96% | 339 Votes)&#34;&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        
        &lt;li&gt;
          No &lt;small&gt;(4%, 14 Votes)&lt;/small&gt;&lt;div class=&#34;pollbar&#34; style=&#34;width: 4%;&#34; title=&#34;No (4% | 14 Votes)&#34;&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;p style=&#34;text-align: center;&#34;&gt;
        Total Voters: &lt;strong&gt;353&lt;/strong&gt;
      &lt;/p&gt;
    &lt;/div&gt;
    

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;poll_3_nonce&amp;quot; name=&amp;quot;wp-polls-nonce&amp;quot; value=&amp;quot;0296a03fc3&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;polls-3-loading&#34; class=&#34;wp-polls-loading&#34;&gt;
    &lt;img src=&#34;http://rubylearning.com/blog/wp-content/plugins/wp-polls/images/loading.gif&#34; width=&#34;16&#34; height=&#34;16&#34; alt=&#34;Loading ...&#34; title=&#34;Loading ...&#34; class=&#34;wp-polls-image&#34; /&gt;&amp;nbsp;Loading &amp;hellip;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;note&#34;&gt;
    &lt;strong&gt;&lt;span style=&#34;color:red;&#34;&gt;Update:&lt;/span&gt;&lt;/strong&gt; Thank you for the over-whelming response to the poll. The poll is now closed. As the poll results suggest, RubyLearning is going ahead and starting off the &amp;#8220;Ruby Programming Challenge For Newbies (RPCFN)&amp;#8221; from Friday, 25th Sept. 2009. We are also getting a very positive response from many Ruby Gurus and Sponsors. Work on the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; is underway. In the meantime, we still look forward to your response(s) and thoughts, suggestions (thoughts on the nature of the Ruby problem to be asked, evaluation criteria etc.) as comments below.
  &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20&#43; Rubyists are using Sinatra - Do you? (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This first appeared on 29th June 2009 and is being reprinted
as the original is not accessible.&lt;/p&gt;

&lt;h3 id=&#34;20-rubyists-are-using-sinatra-do-you:b9d73662ccbad47811ad53b639d84c77&#34;&gt;20+ Rubyists are using Sinatra – Do you?&lt;/h3&gt;

&lt;p&gt;With &lt;strong&gt;Sinatra&lt;/strong&gt; you can quickly create your own tiny web-applications
in Ruby and write lots of small services. RubyLearning caught up with
some Rubyists working with Sinatra and asked them as to why, how and
where they use &lt;em&gt;Sinatra&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AaronQuint.jpg&#34; alt=&#34;Aaron
Quint&#34; title=&#34;Aaron Quint&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/aq&#34;&gt;Aaron
Quint&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’ve been using Sinatra all over the
place. With &lt;a href=&#34;http://code.quirkey.com/vegas/&#34;&gt;Vegas&lt;/a&gt; I’ve been using it
as a way to provide simple web interfaces to existing code. I’ve also
been using it to prototype new application ideas. When not using
Sinatra, I’ve been using some of the same basic ideas in JavaScript with
&lt;a href=&#34;http://code.quirkey.com/sammy/&#34;&gt;Sammy.js&lt;/a&gt;. In general, Sinatra is just
fun to use as it provides the most direct and clean route to get an idea
or a piece of code on the web. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/20/interview-aaron-quint-on-sinatra/&#34;&gt;Read Aaron’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AdamKeys.jpg&#34; alt=&#34;Adam
Keys&#34; title=&#34;Adam Keys&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/therealadam&#34;&gt;Adam
Keys&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m using Sinatra for two
things. For personal stuff, I always reach for Sinatra when I want to
prototype an idea. It’s easy to get something in place so I can iterate
on the idea quickly. Sinatra is great for deploying prototypes too!&lt;/p&gt;

&lt;p&gt;At FiveRuns, we use Sinatra as the API endpoint for Dash. We’ve got
hundreds of clients in our public beta sending custom metrics to Dash
once a minute. Sinatra has handled this load with aplomb. Further,
because our API is just a few URL endpoints, Sinatra’s minimal API is a
perfect match for our needs. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/03/interview-adam-keys-on-sinatra/&#34;&gt;Read Adam’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/nelstrom-125.jpg&#34; alt=&#34;Andrew
Neil&#34; title=&#34;Andrew Neil&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;Andrew
Neil&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;a href=&#34;http://all-sorts.org/&#34;&gt;All
Sorts&lt;/a&gt; searches Twitter every minute for the
&lt;a href=&#34;http://search.twitter.com/search?q=%23collectivenouns&#34;&gt;#collectivenouns&lt;/a&gt;
hashtag, then parses matching tweets to identify collective nouns. The
requirements were very simple – no user log in, no CRUD, only a handful
of models and routes – so Sinatra was the perfect choice for this
project. I took Nick Plante’s
&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt; source as a
starting point, which proved to be an excellent introduction to Sinatra
and DataMapper. Part of the appeal, of course, was to dabble with new
technologies. The live site runs on passenger, with Rack::Cache taking
care of the caching.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/bruno.jpg&#34; alt=&#34;Bruno
Miranda&#34; title=&#34;Bruno Miranda&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/brupm&#34;&gt;Bruno
Miranda&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra on a url
shortner app that I wrote at &lt;a href=&#34;http://s.bopia.com/&#34;&gt;s.bopia.com&lt;/a&gt; as well
as a proxy app that processes beanstalkd queue items for
&lt;a href=&#34;http://mx.msn.cyloop.com/&#34;&gt;mx.msn.cyloop.com&lt;/a&gt;. Sinatra is a great tool
to accomplish small tasks as a minimal layer on top of http protocol.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris
Strom&#34; title=&#34;Chris Strom&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;Chris
Strom&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra most
prominently to serve up my family’s cookbook, backed by a CouchDB store.
Excruciating details on how I do this are contained in a series of blog
posts starting with:
&lt;a href=&#34;http://japhr.blogspot.com/2009/03/my-chain.html&#34;&gt;http://japhr.blogspot.com/2009/03/my-chain.htm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I chose Sinatra because it felt close to the metal — especially
important because I did not want anything interfering with CouchDB. I
continue to use Sinatra because it complements my BDD workflow
exceedingly well. Sinatra’s lean DSL encourages me to produce similarly
beautiful code. Sinatra never gets in my way. Sinatra goes out of its
way to make my life simple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey
Donohoe&#34; title=&#34;Corey Donohoe&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/atmos&#34;&gt;Corey
Donohoe&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra is great for building
non-trivial rack middleware. &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;We’re mainly using
Sinatra&lt;/a&gt; for integration applications
between existing pieces of software. Instead of working on a monolithic
app we’re writing a fleet of microapps to handle arising business needs.
We feel that Sinatra gets in the way less frequently than most other
frameworks. With cucumber and good development practices we’re using the
same top notch testing tools the Rails guys are using. In my &lt;a href=&#34;http://atmos.org/index.php/about/&#34;&gt;personal
hacking&lt;/a&gt; I’ve been using it as the
basis for twitter microapps leveraging twitter’s oauth API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/doug_sparling.jpg&#34; alt=&#34;Doug
Sparling&#34; title=&#34;Doug Sparling&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;Doug
Sparling&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; In my former company,
we had started using &lt;em&gt;Sinatra for web services&lt;/em&gt; and in one instance, a
small app used for mobile advertising that doesn’t use the database.&lt;/p&gt;

&lt;p&gt;​1) &lt;strong&gt;Why?&lt;/strong&gt; – We don’t always need the full Rails stack, particularly
with web services and anything that doesn’t require the database. It’s
also useful for use with legacy databases, which we have to deal with. I
can use Datamapper, which is thread safe (though I haven’t seen any
performance issues with Rails, which we usually cache anyway).\
2) &lt;strong&gt;How?&lt;/strong&gt; – We use Mongrel clusters for our Rails web sites, but with
the Sinatra apps we’re using Passenger. For our Sinatra web services, I
use Datamapper ORM. I have one internal web service in Rails 2.3.2, but
I’m looking at moving it to Sinatra as well.\
3) &lt;strong&gt;Where?&lt;/strong&gt; – Mostly internal web services at the moment, but I’m sure
we’ll look at it for external services as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy
Evans&#34; title=&#34;Jeremy Evans&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy
Evans&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra on quite a few
projects, mostly for small applications. At work, we use it to handle
the dynamic portion of our mostly static public website, and for some
internal applications. Personally, I use it in
&lt;a href=&#34;http://github.com/jeremyevans/giftsmas/tree/master&#34;&gt;Giftsmas&lt;/a&gt;, my open
source gift-tracking application, and in a couple of other sites I
maintain.&lt;/p&gt;

&lt;p&gt;I use Sinatra because it is simple and flexible. It doesn’t require
boilerplate code, and lets you focus on the needs of your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/graham-ashton.jpeg&#34; alt=&#34;Graham
Ashton&#34; title=&#34;Graham Ashton&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://grahamashton.net/&#34;&gt;Graham
Ashton&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I first tried Sinatra during an
in house “hack week” at &lt;a href=&#34;http://www.wordtracker.com/&#34;&gt;Wordtracker&lt;/a&gt; (one
of my main Rails clients). We used Sinatra to great effect to throw up a
user interface for a new keyword research tool that we’d come up with
during hack week. Sinatra was very accessible – the docs are well
written and the mailing list is friendly. I quickly gained a lot of
confidence in the framework by reading the code, which is succinct and
easy to follow (I wish more projects would follow the advice of the
Linux kernel coding style and wrap their code at 80 columns – it
encourages legibility).&lt;/p&gt;

&lt;p&gt;After that experience Sinatra was an obvious choice for Nesta, my &lt;a href=&#34;http://effectif.com/nesta&#34;&gt;file
based CMS&lt;/a&gt;. It’s a simple app and Sinatra is
a perfect fit for it. I had the application up and running in a matter
of days, and I really enjoyed writing it. The goal of Nesta was to build
a CMS that people could easily modify to suit their own web sites, and
Sinatra makes it very easy for people to do that. There’s not a lot of
ceremony.&lt;/p&gt;

&lt;p&gt;I still use Rails for larger apps, but I’m now turning to Sinatra first
whenever I want to try something out, or if I’m not sure where a new
application is going. It’s more fun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/hasham_small.jpg&#34; alt=&#34;Hasham
Malik&#34; title=&#34;Hasham Malik&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;Hasham
Malik&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I have recently started
development with the Sinatra micro framework while working at
&lt;a href=&#34;http://www.cambridgedocs.com/&#34;&gt;CambridgeDocs&lt;/a&gt;. Earlier we have used PHP
/ Ruby on Rails for server-side back ends of native iphone applications
that we have been developing. Sinatra lets you create REST based
services with minimalistic approach which is ideal of mobile back ends.
Sinatra is also lean and fast and at the same time it gives you the
liberty to use whichever ORM / templating system you want. Sinatra has
this positive vibe among Rubyists these days with 1.0 nearing its
release its great time to learn this new framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://grayproductions.net/images/james_headshot_square.jpg&#34; alt=&#34;James Edward Gray
II&#34; title=&#34;James Edward Gray II&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;James
Edward Gray II&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; At &lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;, Sinatra is a vital part of the
architecture of our monitoring application,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt;. We provide the API the agents use to
check-in with data via the micro framework. This is nice because it
separates the two functions of the application, allowing us to do things
like deploy an application update without interrupting the API service.
Still Sinatra gives us a touch more abstraction than something like
Rails Metal would and that makes working on the API a little easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/face_small2.jpg&#34; alt=&#34;Jeremy
Raines&#34; title=&#34;Jeremy Raines&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/jraines&#34;&gt;Jeremy
Raines&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m a web developer in Park
City, Utah. I got started using Sinatra because I was interested in REST
and I like the way Sinatra maps controller actions to HTTP verbs. I also
love its lightweight simplicity. It’s great for doing small API based
webapps and mashups. Most of my Sinatra apps use Ruby scripts fired by
cron jobs to pull data from other webservices into a SQLite database,
and serve content with Sinatra. I’ll be using it more in my work with
Purple Raincloud, a new social media consultancy here in Utah. I’m
@jraines on Twitter, and my homepage is at
&lt;a href=&#34;http://jeremyraines.com/&#34;&gt;jeremyraines.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/jjcicchelli.jpg&#34; alt=&#34;Julio Javier
Cicchelli&#34; title=&#34;Julio Javier Cicchelli&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Julio
Javier Cicchelli&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; First of all,
I like the idea to write about Sinatra and, especially, to show its
practical uses to the masses. There are a whole lot of Rails developers
but nobody seems to be taking Sinatra quite seriously (at least, this is
what I’ve been noticing in websites such as
&lt;a href=&#34;http://jobs.rubynow.com/&#34;&gt;jobs.rubynow.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I’ve just founded a company called “&lt;a href=&#34;http://rock-n-code.com/&#34;&gt;Rock &amp;amp;
Code&lt;/a&gt;” in Amsterdam, The Netherlands that
offers solutions developed on Sinatra (instead of Rails or even Merb) to
my partners. Why you would ask? Sinatra have definitely broken the MVC
paradigm (widely implemented by frameworks such as Rails, Merb, Django,
Spring, etc.) and decided to give total control back to the developer by
allowing him to build almost any kind of web-based solution (no matter
the complexity) in a very simple manner on top of the abstracted HTTP
layer it implements from Rack. Furthermore, Sinatra applications can
make use of the existing gem library instead of consuming plug-ins
specifically-designed for a particular framework. How my company is
using Sinatra? I’m currently developing RESTful web services that uses
CouchDB and communicates with clients written in both MacRuby and iPhone
(in the near future) using JSON but I’ve planned to use Sinatra in web
development and also server interfacing. Where can it be applied? I
believe that Sinatra suits perfectly for prototyping, client-server
applications, SOA applications and interfacing servers, for starters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/karmi_mugshot.jpg&#34; alt=&#34;Karel
Minarík&#34; title=&#34;Karel Minarík&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;Karel
Minarík&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra powers &lt;a href=&#34;http://www.restafari.org/&#34;&gt;my
blog&lt;/a&gt;, deployment automation, internal apps
and is generally the tool of choice whenever I need to build a web app
without overhead. Sinatra excels when doing “freestyle coding” — it’s a
sort of a blank canvas: you’re bound only by HTTP and your Ruby
knowledge. Sinatra doesn’t force anything on you, which can lead to
awesome or evil code, in equal measures — and that’s part of its charm
to me. Sinatra exposes you to Rack intensely, though, which brings
rather different mindset for building web applications then the
prevailing “monolithic” style. See eg.
&lt;a href=&#34;http://github.com/rack/rack-contrib/tree/master&#34;&gt;www.github.com/rack/rack-contrib&lt;/a&gt;
for inspiration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://twitter.com/cypher&#34;&gt;Markus Prinz&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra because
it concentrates on one area, and does that very well, leaving the rest
up to me. So whenever I have some idea that requires a web app, I can
try it out very quickly with Sinatra with a minimum of fuss. And since
Sinatra is not a one-size-fits-all solution, but instead essentially a
library, I have a great deal of flexibility in using it. That means I
can try out new approaches to things like data storage, and use
something like Tokyo Cabinet/Tokyo Tyrant or CouchDB instead of a
relational database. But I can also use Sinatra as a component in a
larger application to offer a web interface, without interfering with
the rest of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://highgroove.com/images/about/mtodd.jpg&#34; alt=&#34;Matt
Todd&#34; title=&#34;Matt Todd&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;Matt
Todd&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We at @highgroove (&lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;) use Sinatra in a lot of different
projects for memory-efficient web services. One of our products,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt; (@scoutapp) uses it to consume thousands
of reports constantly. We are able to fine tune our stack with Sinatra
to keep it minimal, responsive, and powerful.&lt;/p&gt;

&lt;p&gt;Highgroove Studios is Charles Brian Quinn (@seebq), Derek Haynes
(@dhaynes23), Andre Lewis (@alewis), James Edward Gray II (@JEG2), and
myself, Matt Todd (@mtodd).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/nap.jpg&#34; alt=&#34;Nick
Plante&#34; title=&#34;Nick Plante&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;Nick
Plante&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We’re using Sinatra for a
variety of small web sites and services. Why? Because Sinatra is small,
RESTful, fast, and intuitive. It’s perfect for lightweight apps and
APIs.&lt;/p&gt;

&lt;p&gt;One of our sites, &lt;a href=&#34;http://rdoc.info/&#34;&gt;rdoc.info&lt;/a&gt;, uses it to generate
and host documentation for a variety of Ruby libraries, integrating with
GitHub web hooks to automatically regenerate docs whenever projects are
updated. We could have used Rails, but the additional overhead, helpers,
and other extras that come pre-packaged with it just weren’t necessary.
In fact, they would have probably gotten in our way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tweetdreams.org/&#34;&gt;Tweetdreams&lt;/a&gt; is another small Sinatra-based
project that we launched earlier this year. It’s a Twitter dream
journal. There really isn’t much to it, which is sort of the beauty of
it. The source is available on GitHub as
“&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt;” and it’s been
used as the basis for a number of other Twitter-oriented projects
including the &lt;a href=&#34;http://all-sorts.org/&#34;&gt;http://all-sorts.org&lt;/a&gt; linguistic
experiment created by Andrew Neil.&lt;/p&gt;

&lt;p&gt;I should note that both of these projects use DataMapper and Haml, too.
Sinatra is ORM and templating language agnostic, which can be another
bonus if you already have a predefined set of tools that you’re familiar
with and want to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/petercooper.jpg&#34; alt=&#34;Peter
Cooper&#34; title=&#34;Peter Cooper&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/peterc&#34;&gt;Peter
Cooper&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; As I don’t work on big
projects, I’m using Sinatra for everything now, where I would have used
Rails before. It’s nearly all local or private stuff for now but I’d
like to be able to release more community projects using it in due
course. I love Sinatra because it’s less opinionated and more Ruby-like
than Rails. It might take me a little longer to achieve certain results
but I can “plug and play” code, libraries, and frameworks wherever I
like with it, rather than have to work around tightly coupled
“conventions.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/PiyushGupta.jpg&#34; alt=&#34;Piyush
Gupta&#34; title=&#34;Piyush Gupta&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;Piyush
Gupta&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; When your application is
small, Sinatra helps us to develop applications quickly and easily.
Sinatra is easy to understand and follow. We have recently used it for a
twitter mashup called MillionTwitter Follower which is not yet live.
Expecting it to be live soon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/sam.jpg&#34; alt=&#34;Sam
Goebert&#34; title=&#34;Sam Goebert&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;Sam
Goebert&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt;
&lt;a href=&#34;http://www.bigcurl.de/&#34;&gt;Bigcurl&lt;/a&gt; uses Sinatra to power its &lt;a href=&#34;http://www.httpush.com/&#34;&gt;HTTPush
API&lt;/a&gt;, which is a hosted gateway to the Apple
Push Notification Service. Our complete api frontend is implemented
using Sinatra. This gave us a tremendous boost during development of the
API specification. We were able to experiment more as the code has very
few lines. Second reason we went with Sinatra was memory consumption,
since we span lot of instances over the course of a day this was crucial
to get the maximum out of a machine but maintaining the beauty in code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/sau.jpg&#34; alt=&#34;Sau Sheong
Chang&#34; title=&#34;Sau Sheong Chang&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;Sau
Sheong Chang&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I picked up Sinatra
first when I was writing my &lt;a href=&#34;http://blog.saush.com/2009/03/write-an-internet-search-engine-with-200-lines-of-ruby-code/&#34;&gt;search
engine&lt;/a&gt;
and I was looking for a simple way to write my search engine interface.
The simplicity of Sinatra blew me away and I was soon knee-deep into
writing more apps on Sinatra. After a few more applications, I was
convinced that Sinatra is the way to write web applications as it is
meant to be. Today I use it to write quick and simple web applications,
often in combination with DataMapper, that serve as front-end interfaces
for larger systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/saurabhpurnaye.jpg&#34; alt=&#34;Saurabh
Purnaye&#34; title=&#34;Saurabh Purnaye&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;Saurabh
Purnaye&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I work for Synechron, Pune.
The applications we create are mostly UI based (html/css/jquery and
flex), and I need web services to respond to the calls from UI – that’s
where I use Sinatra. Sinatra is really fast and easy for providing
RESTful web service solutions. There are many options while working with
Sinatra – for example Database: ORM (datamapper/active record),
Templating: (erb/haml/builder), http caching, filters, helpers and error
handling. One of it’s best features is it comes with Rack middleware.
For the last 6 months I am using Sinatra and I feel very happy to work
with it.&lt;/p&gt;

&lt;h3 id=&#34;do-you-use-sinatra:b9d73662ccbad47811ad53b639d84c77&#34;&gt;Do YOU use Sinatra?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ad.ly/refer/2014322399&#34;&gt;&lt;img src=&#34;http://ad.ly/static/images/referral/square.gif&#34; alt=&#34;Twitter&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a Rubyist using Sinatra, &lt;em&gt;we would like to know as to why,
how and where you are using Sinatra&lt;/em&gt;. Post this as a blog comment.
Thanks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited
offer Sinatra and Rails hosting running on a Phusion Passenger
(mod_rails) and LAMP stack. If you want to get to know them first, or
simply want to try out your Sinatra or Rails skills, &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;let them arrange a
free trial hosting
account&lt;/a&gt; for you – full
technical support from their team is included!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corey Donohoe: How do I learn and master Sinatra?</title>
      <link>http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: We are re-printing this blog post that appeared on 6th July 2009, as the original post is not accessible.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Welcome to the &lt;b&gt;first&lt;/b&gt; installment on the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, of a mini series &amp;#8211; &amp;#8220;&lt;strong&gt;How do I learn and master Sinatra?&lt;/strong&gt;&amp;#8221; &amp;#8211; by top Rubyists using &lt;em&gt;Sinatra&lt;/em&gt;. The interview series will provide insight and commentary from these notable &lt;em&gt;Sinatra&lt;/em&gt; developers, with the goal of facilitating and providing answers to the questions Ruby beginners face on &lt;em&gt;how to learn and master Sinatra&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Corey Donohoe, could you tell us something about yourself &amp;#8211; your background, where you are based?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Corey Donohoe&#34; src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey Donohoe&#34; /&gt;&lt;strong&gt;Corey Donohoe&gt;&gt;&lt;/strong&gt; I&amp;#8217;m &lt;a href=&#34;http://atmos.org/&#34;&gt;Corey Donohoe&lt;/a&gt;. I&amp;#8217;m based out of Boulder, Colorado &amp;#8211; USA. My background is in computer science and system administration though I prefer hacking to either of those labels. I&amp;#8217;m a pretty normal dude, I enjoy cycling, music, coffee, micro brews, and all the other awesomeness that my home state has to offer. I&amp;#8217;ve been working for &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;Engine Yard&lt;/a&gt; since March of &amp;#8217;07 doing everything from app support to internal development. I&amp;#8217;m currently 1/2 of our internal integrations team.
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra&amp;#8217;s greatest strength is its flexibility
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Are there any pre-requisites for a person to start learning Sinatra&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; There aren&amp;#8217;t any hardcore prerequisites per se; Ruby and experience in a Ruby web framework is a plus. HTTP verbs play a huge role in Sinatra, as well as things like query and post params. If you get those concepts you can hit the ground running.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Learn Sinatra incrementally. If you have new business requirements try to think about things like &amp;#8220;how would i implement this in Sinatra?&amp;#8221; Take the time to figure that requirement out in Sinatra then throw the solution out! When the time comes to use Sinatra for something you&amp;#8217;ll have a much more broad understanding of the framework and you&amp;#8217;ll hit fewer blockers.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Which area of Sinatra should a beginner pay particular attention to?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Understanding the difference between &lt;b&gt;Sinatra::Base&lt;/b&gt; and &lt;b&gt;Sinatra::Default&lt;/b&gt; is definitely something a Sinatra beginner should focus on early. &lt;b&gt;Sinatra::Base&lt;/b&gt; is for writing Rack middleware, and &lt;b&gt;Sinatra::Default&lt;/b&gt; is normally for writing Rack applications. Learning the modular style app development is really useful as well as using the register method to include pieces of functionality. Getting a handle on those concepts will expose you to the rest of Sinatra, which is relatively intuitive.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is the official documentation on Sinatra good enough for a beginner? Are there areas which need improvement or need to be re-written&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; The Sinatra documentation is well done and I can generally find answers to my questions just by referencing the docs. There&amp;#8217;s always #sinatra on freenode or the Sinatra book on github if you need additional help too. There&amp;#8217;s plenty of pretty well tested examples on github using Sinatra, hancock and integrity come to mind.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Sequel, DataMapper, ActiveRecord &amp;#8211; which one would you recommend to use with Sinatra and why?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; I use DataMapper exclusively. It was a bumpy ride a year ago but these days it&amp;#8217;s acceptable for production use. We interface with more than just relational databases and the ability to keep a consistent model syntax across various data sources is really attractive to us. Realistically I feel like I spend less time fighting my framework when I&amp;#8217;m using DataMapper so it&amp;#8217;s the clear choice. The one place I wouldn&amp;#8217;t use dm in would be a join heavy relational environment; ActiveRecord is way better at that.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is an understanding of Rack important while learning Sinatra? Why? Which area of Rack should one be really comfortable with?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; You don&amp;#8217;t need a solid understanding of Rack to get a Sinatra up and running, but you&amp;#8217;ll be missing out on a lot of the power. It&amp;#8217;s extremely beneficial to take the time to learn how the &lt;b&gt;Rack::Builder&lt;/b&gt; works as well as the usage of the &lt;b&gt;use/map/run&lt;/b&gt; commands in that context. The modularity of Rack really becomes apparent and you&amp;#8217;ll find yourself using Sinatra more effectively.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one hone one&amp;#8217;s skills in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Read code, write test code, write code. All of the awesome testing frameworks available for Ruby are available to Sinatra. If you don&amp;#8217;t write tests it might be a good way to familiarize yourself with testing best practices without the overheard of a larger framework.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What type of projects should a beginner work on to gain more expertise in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;A beginner would benefit from writing something completely API driven as a first project&lt;/span&gt;. So many people couple databases with dynamic web applications but it&amp;#8217;s kind of liberating to just be an intermediary service. Twitter apps are pretty trivial to implement and can teach you a lot. They also expose you to a pretty large userbase to solicit feedback.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you suggest some web services that a Sinatra beginner could develop himself / herself?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Web services are great targets for introducing Sinatra into your workplace&lt;/span&gt;. Identify a pain point in your organization and put a small app in front of it. It doesn&amp;#8217;t have to replace something overnight but it&amp;#8217;s a great way to sneak functionality in at work. Once you have a few of these built you start to reap the benefits of microapps and web services.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Anything else you would like to add?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Learning Sinatra is the best thing you can do while we all wait for Rails 3 to land&lt;/span&gt;. The middleware you write will be able to be dropped right into your Rails 3 applications so it&amp;#8217;s not like you&amp;#8217;re wasting time. We&amp;#8217;re starting to build really modular systems using Sinatra by building APIs into those systems. I think a lot of people would benefit from breaking their monolith apps down into microapps and Sinatra is a great way to do it.
  &lt;/p&gt;
  
  &lt;p&gt;
    People looking for a template might want to investigate the singem gem. It has basic templates for twitter apps or regular webservices. All of them are bootstrapped for testing with cucumber+rspec.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Corey. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Corey would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited offer Sinatra and Rails hosting running on a Phusion Passenger (mod_rails) and LAMP stack. If you want to try your hand at developing with Sinatra, why not let them arrange a &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;trial hosting account&lt;/a&gt; for you? You&amp;#8217;ll get to deploy your app, with full technical support from their team!
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>