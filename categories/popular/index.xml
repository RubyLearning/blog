<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Popular on RubyLearning Blog</title>
    <link>http://rubylearning.com/categories/popular/</link>
    <description>Recent content in Popular on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/categories/popular/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RPCFN: Average Arrival Time For A Flight - 2 Reprint</title>
      <link>http://rubylearning.com/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 8th Oct. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;h4&gt;
    RPCFN: Average Arrival Time For A Flight (#2)
  &lt;/h4&gt;
  
  &lt;h5&gt;
    By Chris Strom
  &lt;/h5&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Thank you for the very encouraging response to the &lt;a href=&#34;http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn-1-reprint/&#34;&gt;first-ever&lt;/a&gt; &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8220;. The second Ruby challenge is from Chris Strom.
  &lt;/p&gt;
  
  &lt;h3&gt;
    About Chris Strom
  &lt;/h3&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Chris Strom&#34; src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris Strom&#34; /&gt;Chris Strom (&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt; / &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;blog&lt;/a&gt;) in his day job, is the Director of Software Engineering for mdlogix, a small company in Baltimore, Maryland. They develop software that manages clinical research trials and associated data. They primarily code with Ruby on Rails. His background is in web development, mostly in Perl until ~2005 when he made the switch to Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    Chris has this to say about the challenge:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;em&gt;RPCFN is a good idea as reading books and documentation can only take you so far when learning a new language. To really learn, you need to use the language. RPCFN provides a fabulous forum for using Ruby in the form of regular, engaging (but not arcanely difficult) challenges. Better yet, it provides feedback on how to use Ruby well, as each fortnight the best solution to a challenge is chosen. RPCFN is a wonderful introduction to the Ruby language and to the Ruby community. Welcome newbies!&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    Sponsor
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#39;http://www.railsware.com/&#39;&gt;&lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/Railsware125x125.png&#39; width=&#34;125&#34; height=&#34;125&#34; style=&#34;border: 0px none ;&#34; alt=&#34;Railsware for premium-quality web applications&#34; title=&#34;Railsware for premium-quality web applications&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    This fortnights programming challenge is sponsored by &lt;strong&gt;&lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;&lt;/strong&gt;. Railsware is glad to support the Ruby Programming Challenge and help the Ruby community grow and get stronger.
  &lt;/p&gt;
  
  &lt;p&gt;
    Railsware is a product development company specializing in Ruby on Rails and UI design creating premium-quality web applications. The company works with startups and established businesses looking to build ecommerce, social networking, specialized business applications and many other products.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      The person with the best Ruby solution (if there is a tie between answers, then the one who posted first will be the winner) will be awarded any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The other prize, selected randomly amongst the remaining working Ruby solutions, will be awarded any &lt;b&gt;one&lt;/b&gt; of BDDCasts&amp;#8217; &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    The two persons who win, can&amp;#8217;t win again in the next immediate challenge but can still participate.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Ruby Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    You owe a big favor and have agreed to pick up a friend at the airport every Friday night. The airline on which your friend flies is cheap, but terrible with reporting delays and departure/arrival times. You soon realize that the 10pm flight is never on time and is usually late by more than an hour. If the plane has arrived at 11:15pm, 12:03am, 11:30pm, 11:23pm and 11:48pm, what is the average arrival time?
  &lt;/p&gt;
  
  &lt;p&gt;
    Does the solution still work if your friend changes to a flight arriving 6 hours later? What about 12 hours later?
  &lt;/p&gt;
  
  &lt;h4&gt;
    Program Output
  &lt;/h4&gt;
  
  &lt;p&gt;
    The output should look something like this when run from the console:
  &lt;/p&gt;
  
  &lt;pre&gt;&gt;&gt; average_time_of_day([&#34;11:51pm&#34;, &#34;11:56pm&#34;, &#34;12:01am&#34;, &#34;12:06am&#34;, &#34;12:11am&#34;])
=&gt; &#34;12:01am&#34;

&gt;&gt; average_time_of_day([&#34;6:41am&#34;, &#34;6:51am&#34;, &#34;7:01am&#34;])
=&gt; &#34;6:51am&#34;
&lt;/pre&gt;
  
  &lt;h4&gt;
    Hint
  &lt;/h4&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Your digital ways will not help you, time of day is cyclical.
    &lt;/li&gt;
    &lt;li&gt;
      You may need to use the &lt;b&gt;Math&lt;/b&gt; and &lt;b&gt;Time&lt;/b&gt; classes.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;Requirements&lt;/b&gt;: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems). You &lt;b&gt;do not&lt;/b&gt; need to build a gem for this. Pure Ruby code is all that is needed.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    How to Enter the Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    Read the &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;. By participating in this challenge, you agree to be bound by these Challenge Rules. &lt;b&gt;It&amp;#8217;s free and &lt;a href=&#34;http://rubylearning.com/blog/wp-login.php?action=register&#34;&gt;registration&lt;/a&gt; is optional&lt;/b&gt;. You can enter the challenge just by posting the following as a comment to this blog post:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/#rpc5&#34;&gt;GIST URL of your Solution&lt;/a&gt; (i.e. Ruby code) with explanation and / or test cases:
    &lt;/li&gt;
    &lt;li&gt;
      Code works with Ruby 1.8 / 1.9 / Both:
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      As soon as we receive your GIST URL, we will fork your submission. This means that your solution is frozen and accepted. Please be sure that is the solution you want, as it is now recorded in time and is the version that will be evaluated.
    &lt;/li&gt;
    &lt;li&gt;
      All solutions posted would be hidden to allow participants to come up with their own solutions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;You should post your entries before midnight of 18th Oct. 2009 (Indian Standard Time). No new solutions will be accepted from 19th to 22nd Oct. 2009.&lt;/b&gt;
    &lt;/li&gt;
    &lt;li&gt;
      On Monday, 19th Oct. 2009 all the solutions will be thrown open for everyone to see and comment upon.
    &lt;/li&gt;
    &lt;li&gt;
      The winning entries will be announced on this blog on 22nd Oct. The winners will be sent their prizes by email.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    More details on the RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Please refer to the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; for answers to the following questions:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies (RPCFN)?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit you?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best Solution&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge Topic?&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;Chris Strom&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Sponsor &lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Jeff Schoolcraft of &lt;a href=&#34;http://bddcasts.com/&#34;&gt;BDDCasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The RubyLearning team, namely Dave Lilley (New Zealand), Jeff Savin (Canada), &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://giordano.scalzo.biz/2009/10/10/entering-rpcfn-2/&#34;&gt;Giordano Scalzo&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://jonathanjulian.com/2009/10/i-just-entered-rpcfn-2/&#34;&gt;Jonathan Julian&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.loicpaillotin.com/2009/10/getting-back-in-shape.html&#34;&gt;Loïc Paillotin&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have any doubts / questions about the challenge (the current problem statement), please post them as comments to this post and the author will reply asap.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Participants
  &lt;/h3&gt;
  
  &lt;p&gt;
    There are two categories of participants. Some are vying for the prizes and some are participating for the fun of it.
  &lt;/p&gt;
  
  &lt;h4&gt;
    In the competition
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      Othmane Benkirane, Morocco &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Tisho Georgiev, Bulgaria
    &lt;/li&gt;
    &lt;li&gt;
      Pete Campbell, USA
    &lt;/li&gt;
    &lt;li&gt;
      Jonathan Julian, USA
    &lt;/li&gt;
    &lt;li&gt;
      Antonio, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Robison WR Santos, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Ricardo Duarte, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Paul Barry, USA
    &lt;/li&gt;
    &lt;li&gt;
      Haris Amin, USA
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/10/22/charles-feduke-winner-rpcfn-2/&#34;&gt;Charles Feduke&lt;/a&gt;, USA &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Oliver, UK
    &lt;/li&gt;
    &lt;li&gt;
      Bryan Liles, USA
    &lt;/li&gt;
    &lt;li&gt;
      Gunther Diemant, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Valério Farias, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Vikas Maskeri, India
    &lt;/li&gt;
    &lt;li&gt;
      Jiren Patel, India
    &lt;/li&gt;
    &lt;li&gt;
      Stefan, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Ahmed Al Hafoudh, Slovakia
    &lt;/li&gt;
    &lt;li&gt;
      Tom Voltz, USA
    &lt;/li&gt;
    &lt;li&gt;
      David Jenkins, USA
    &lt;/li&gt;
    &lt;li&gt;
      Michael Lang, USA
    &lt;/li&gt;
    &lt;li&gt;
      Thiago Fernandes Massa, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Tim Rand, USA
    &lt;/li&gt;
    &lt;li&gt;
      Milan Dobrota, Serbia
    &lt;/li&gt;
    &lt;li&gt;
      Mike Hodgson, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Brad O&amp;#8217;Connor, Australia
    &lt;/li&gt;
    &lt;li&gt;
      Giordano Scalzo, Italy
    &lt;/li&gt;
    &lt;li&gt;
      Rainer Thiel, New Zealand
    &lt;/li&gt;
    &lt;li&gt;
      Todd Huss, USA
    &lt;/li&gt;
    &lt;li&gt;
      Pankaj Sisodiya, India
    &lt;/li&gt;
    &lt;li&gt;
      Loïc Paillotin, USA
    &lt;/li&gt;
    &lt;li&gt;
      Chuck Ha, USA
    &lt;/li&gt;
    &lt;li&gt;
      Josh Baxley, USA
    &lt;/li&gt;
    &lt;li&gt;
      Javier Blanco Gutiérrez, Spain
    &lt;/li&gt;
    &lt;li&gt;
      Sogo Ohta, Japan
    &lt;/li&gt;
    &lt;li&gt;
      Daniel Wanek, USA
    &lt;/li&gt;
    &lt;li&gt;
      Himansu Desai, USA
    &lt;/li&gt;
    &lt;li&gt;
      John McDonald, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Miller, UK
    &lt;/li&gt;
    &lt;li&gt;
      Sriram Varahan, India
    &lt;/li&gt;
    &lt;li&gt;
      Conner Peirce, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Marini, USA
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h4&gt;
    Just for Fun
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Michael Kohl, Austria
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper, UK&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Winners
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/winner_icon_1.png&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Winners&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Congratulations to the winners of this Ruby Challenge. They are:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Charles Feduke&lt;/b&gt; from USA (his &lt;a href=&#34;https://gist.github.com/5b371226faf83af50d7e&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; the person with the best Ruby solution. He wins any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Othmane Benkirane&lt;/b&gt; from Morocco (his &lt;a href=&#34;http://gist.github.com/205002&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; selected randomly amongst the remaining working Ruby solutions. He wins any &lt;b&gt;one&lt;/b&gt; of BDDCasts’ &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Previous Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-1-reprint/&#34;&gt;RPCFN: Shift Subtitle (#1)&lt;/a&gt; by Fabio Akita.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Next Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2009/10/30/rpcfn-short-circuit-3/&#34;&gt;RPCFN: Short Circuit (#3)&lt;/a&gt; by Gautam Rege.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignleft&#34; src=&#39;http://rubylearning.com/images/update.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;This Challenge is now closed&lt;/b&gt;. &lt;b&gt;Chris Strom&lt;/b&gt; has a &lt;a href=&#34;https://gist.github.com/4f6807eef49064027a3c&#34;&gt;working solution to this problem&lt;/a&gt;. This is not a &amp;#8220;perfect&amp;#8221; or the sole &amp;#8220;correct&amp;#8221; solution, but just one way of doing it.
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom has written a blog post that talks about the &lt;a href=&#34;http://japhr.blogspot.com/2009/10/newbie-feedback.html&#34;&gt;most common &amp;#8220;issues&amp;#8221; faced by Ruby beginners&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The (#3) challenge by &lt;b&gt;Gautam Rege, India&lt;/b&gt; is scheduled for 1st Nov. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#4) challenge by &lt;b&gt;Michael Kohl, Austria&lt;/b&gt; is scheduled for 1st Dec. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#5) challenge by &lt;b&gt;&lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper&lt;/a&gt;, UK&lt;/b&gt; is scheduled for 1st Jan. 2010.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Follow 10&#43; Rubyists using Sinatra on Twitter (Reprint)</title>
      <link>http://rubylearning.com/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This first appeared on 24th June 2009 and is being reprinted as the original is not accessible.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What&amp;#8217;s Twitter?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/icon_d.png&#34; alt=&#34;Twitter&#34; title=&#34;http://twitter.com/IndianGuru&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://shiftingcareers.blogs.nytimes.com/2008/09/07/how-twitter-can-help-at-work/?excamp=GGSBtwitternews&amp;WT.srch=1&amp;WT.mc_ev=click&amp;WT.mc_id=SB-S-E-GG-NA-S-twitter_news&#34;&gt;The New York Times&lt;/a&gt; says:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;a href=&#34;http://www.twitter.com/&#34;&gt;Twitter&lt;/a&gt; is a simple messaging service that you&amp;#8217;ve either &lt;a href=&#34;http://query.nytimes.com/search/sitesearch?query=twitter&amp;srchst=cse&#34;&gt;heard about a lot&lt;/a&gt; or &lt;a href=&#34;http://kara.allthingsd.com/20080428/twitter-where-nobody-know-your-name/&#34;&gt;not at all&lt;/a&gt;. Either way, it&amp;#8217;s a fun and useful tool, well worth trying if you want to reach potential and existing customers, employees or employers.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    List of Rubyists Using Sinatra
  &lt;/h3&gt;
  
  &lt;p&gt;
    This list of over 10 Rubyists using Sinatra, is in alphabetical order, with a link to their Twitter profile. The following list is &lt;em&gt;not&lt;/em&gt; intended to be all-inclusive, but it should give you a great start to following some talented Rubyists using Sinatra.
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Aaron Quint &amp;#8211; &lt;a href=&#34;http://twitter.com/aq&#34;&gt;aq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Adeel Ahmad &amp;#8211; &lt;a href=&#34;http://twitter.com/_adeel&#34;&gt;_adeel&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andre Lewis &amp;#8211; &lt;a href=&#34;http://twitter.com/alewis&#34;&gt;alewis&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andrew Neil &amp;#8211; &lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;nelstrom&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Arjun Ram &amp;#8211; &lt;a href=&#34;http://twitter.com/arjunram&#34;&gt;arjunram&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      August Lilleaas &amp;#8211; &lt;a href=&#34;http://twitter.com/augustl&#34;&gt;augustl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Barry Hess &amp;#8211; &lt;a href=&#34;http://twitter.com/bjhess&#34;&gt;bjhess&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bill Siggelkow &amp;#8211; &lt;a href=&#34;http://twitter.com/bsiggelkow&#34;&gt;bsiggelkow&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Blake Mizerany &amp;#8211; &lt;a href=&#34;http://twitter.com/bmizerany&#34;&gt;bmizerany&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Brian Deterling &amp;#8211; &lt;a href=&#34;http://twitter.com/bdeter&#34;&gt;bdeter&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bruno Miranda &amp;#8211; &lt;a href=&#34;http://twitter.com/brupm&#34;&gt;brupm&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Carlos Gabaldon &amp;#8211; &lt;a href=&#34;http://twitter.com/carlosgabaldon&#34;&gt;carlosgabaldon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Charles Brian Quinn &amp;#8211; &lt;a href=&#34;http://twitter.com/seebq&#34;&gt;seebq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom &amp;#8211; &lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;eee_c&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Corey Donohoe &amp;#8211; &lt;a href=&#34;http://twitter.com/atmos&#34;&gt;atmos&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Damon Clinkscales &amp;#8211; &lt;a href=&#34;http://twitter.com/damon&#34;&gt;damon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Croak &amp;#8211; &lt;a href=&#34;http://twitter.com/dancroak&#34;&gt;dancroak&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Mayer &amp;#8211; &lt;a href=&#34;http://twitter.com/danmayer&#34;&gt;danmayer&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      David Balatero &amp;#8211; &lt;a href=&#34;http://twitter.com/dbalatero&#34;&gt;dbalatero&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Derek Haynes &amp;#8211; &lt;a href=&#34;http://twitter.com/dhaynes23&#34;&gt;dhaynes23&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Doug Sparling &amp;#8211; &lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;scriptrunner&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Foy Savas &amp;#8211; &lt;a href=&#34;http://twitter.com/foysavas&#34;&gt;foysavas&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Graham Ashton &amp;#8211; &lt;a href=&#34;http://twitter.com/grahamashton&#34;&gt;grahamashton&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Hasham Malik &amp;#8211; &lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;hasham2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      James Edward Gray II &amp;#8211; &lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;JEG2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jean-Daniel Tanguay &amp;#8211; &lt;a href=&#34;http://twitter.com/jeedee&#34;&gt;jeedee&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jeremy Raines &amp;#8211; &lt;a href=&#34;http://twitter.com/jraines&#34;&gt;jraines&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jordan Bracco &amp;#8211; &lt;a href=&#34;http://twitter.com/webs&#34;&gt;webs&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jesse Cooke &amp;#8211; &lt;a href=&#34;http://twitter.com/jc00ke&#34;&gt;jc00ke&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Joe Ferris &amp;#8211; &lt;a href=&#34;http://twitter.com/joeferris&#34;&gt;joeferris&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Julio Javier Cicchelli &amp;#8211; &lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;monsieur_rock&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Justin Britten &amp;#8211; &lt;a href=&#34;http://twitter.com/jbritten&#34;&gt;jbritten&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Karel Minarik &amp;#8211; &lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;karmiq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Logan Koester &amp;#8211; &lt;a href=&#34;http://twitter.com/logankoester&#34;&gt;logankoester&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Luke Francl &amp;#8211; &lt;a href=&#34;http://twitter.com/lof&#34;&gt;lof&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Marcin Kulik &amp;#8211; &lt;a href=&#34;http://twitter.com/sickill&#34;&gt;sickill&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Matt Todd &amp;#8211; &lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;mtodd&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Mike Demers &amp;#8211; &lt;a href=&#34;http://twitter.com/mikedemers&#34;&gt;mikedemers&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Plante &amp;#8211; &lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;zapnap&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Quaranto &amp;#8211; &lt;a href=&#34;http://twitter.com/qrush&#34;&gt;qrush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Peter Cooper &amp;#8211; &lt;a href=&#34;http://twitter.com/peterc&#34;&gt;peterc&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Piyush Gupta &amp;#8211; &lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;mba_piyush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Richard Taylor &amp;#8211; &lt;a href=&#34;http://twitter.com/moomerman&#34;&gt;moomerman&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Robert Lowe &amp;#8211; &lt;a href=&#34;http://twitter.com/__viral&#34;&gt;__viral&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Ryan Tomayko &amp;#8211; &lt;a href=&#34;http://twitter.com/rtomayko&#34;&gt;rtomayko&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sam Goebert &amp;#8211; &lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;bigcurl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sau Sheong Chang &amp;#8211; &lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;sausheong&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Saurabh Purnaye &amp;#8211; &lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;saurabhp&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Simon Rozet &amp;#8211; &lt;a href=&#34;http://twitter.com/srt&#34;&gt;srt&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sunny Ripert &amp;#8211; &lt;a href=&#34;http://twitter.com/sunfox&#34;&gt;sunfox&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Trevor Bramble &amp;#8211; &lt;a href=&#34;http://twitter.com/&#34;&gt;TrevorBramble&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Vishnu Gopal &amp;#8211; &lt;a href=&#34;http://twitter.com/vishnugopal&#34;&gt;vishnugopal&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p class=&#34;note&#34;&gt;
    The following list is &lt;strong&gt;Not &amp;#8220;Rubyists&amp;#8221; per-se, but should still be of interest&lt;/strong&gt;:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      FiveRuns &amp;#8211; &lt;a href=&#34;http://twitter.com/fiveruns&#34;&gt;fiveruns&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      taazza &amp;#8211; &lt;a href=&#34;http://twitter.com/taazza&#34;&gt;taazza&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      thoughtbot &amp;#8211; &lt;a href=&#34;http://twitter.com/thoughtbot&#34;&gt;thoughtbot&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:red;&#34;&gt;Note:&lt;/span&gt;&lt;/strong&gt; Keep the feedback coming in. We will update the list based on your recommendations.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;Have we missed out any &lt;em&gt;Rubyists who are using Sinatra&lt;/em&gt;?&lt;br /&gt;You can help&lt;/strong&gt;. Please feel free to add a link to a Rubyist&amp;#8217;s Twitter profile. We would love to hear why you think the particular Rubyist is important to Twitter with. Also, do add a link to your Twitter profile in the comments.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Do you know how to write an internal DSL in Ruby?</title>
      <link>http://rubylearning.com/2011/10/02/do-you-know-how-to-write-an-internal-dsl-in-ruby/</link>
      <pubDate>Sun, 02 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2011/10/02/do-you-know-how-to-write-an-internal-dsl-in-ruby/</guid>
      <description>&lt;div&gt;
  &lt;p class=&#34;alert&#34;&gt;
    Almost all Ruby programming newbies would love to get their hands wet writing a Ruby DSL. This article explains how you can write a simple Ruby DSL.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Introduction
  &lt;/h3&gt;
  
  &lt;p&gt;
    A &lt;b&gt;Domain-Specific Language (DSL)&lt;/b&gt; is a (usually small) programming or description language designed for a fairly narrow purpose. DSLs are targeted at end users or domain specialists who are not expert programmers. &lt;a href=&#34;http://www.infoq.com/presentations/domain-specific-languages&#34;&gt;Martin Fowler&lt;/a&gt; classifies DSLs into two styles &amp;#8211; external and internal. An external DSL is a language that is different from the main programming language for an application, but that is interpreted by or translated into a program in the main language. An internal DSL transforms the main programming language itself into the DSL (our simple DSL is tied to the Ruby programming language).
  &lt;/p&gt;
  
  &lt;h4&gt;
    Ruby code blocks
  &lt;/h4&gt;
  
  &lt;p&gt;
    Ruby&amp;#8217;s &lt;em&gt;support for blocks&lt;/em&gt; (i.e., closures) is useful in defining internal DSLs.
  &lt;/p&gt;
  
  &lt;p&gt;
    Ruby code blocks (called closures in other languages) are chunks of code between braces or between do- end that you can associate with method invocations, almost as if they were parameters. A Ruby block is a way of grouping statements, and may appear only in the source next to a method call; the block is written starting on the same line as the method call&amp;#8217;s last parameter (or the closing parenthesis of the parameter list). The code in the block is not executed at the time it is encountered. Instead, Ruby remembers the context in which the block appears (the local variables, the current object, and so on) and then enters the method. Matz says that any method can be called with a block as an implicit argument. Inside the method, you can call the block using the &lt;code&gt;yield&lt;/code&gt; keyword with a value. Blocks are not objects, but they can be converted into objects of class &lt;code&gt;Proc&lt;/code&gt;. One way a block can be converted to a &lt;code&gt;Proc&lt;/code&gt; object is by passing a block to a method whose last parameter is prefixed with an ampersand. That parameter will receive the block as a &lt;code&gt;Proc&lt;/code&gt; object:
  &lt;/p&gt;
  
  &lt;pre&gt;def my_method(p1, &amp;#038;block)
  ...
end
&lt;/pre&gt;
  
  &lt;h4&gt;
    instance_eval
  &lt;/h4&gt;
  
  &lt;p&gt;
    The class &lt;code&gt;Object&lt;/code&gt; has an &lt;code&gt;instance_eval&lt;/code&gt; public method which can be called from a specific object. It provides access to the instance variables of that object. It can be called either with a block or with a string:
  &lt;/p&gt;
  
  &lt;pre&gt;class Rubyist
  def initialize
    @geek = &#34;Matz&#34;
  end
end
obj = Rubyist.new
# instance_eval can access obj&#39;s private methods
# and instance variables
obj.instance_eval do
  puts self  # =&gt; #&amp;lt;Rubyist:0x2ef83d0&amp;gt;
  puts @geek # =&gt; Matz
end
&lt;/pre&gt;
  
  &lt;p&gt;
    The block that you pass to &lt;code&gt;instance_eval&lt;/code&gt; helps you dip inside an object to do something in there. You can wreak havoc on encapsulation! No data is private data anymore.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;instance_eval&lt;/code&gt; can also be used to add class methods as shown below:
  &lt;/p&gt;
  
  &lt;pre&gt;class Rubyist
end
Rubyist.instance_eval do
  def who
    &#34;Geek&#34;
  end
end
puts Rubyist.who # =&gt; Geek
&lt;/pre&gt;
  
  &lt;h3&gt;
    Deciding on a simple DSL
  &lt;/h3&gt;
  
  &lt;p&gt;
    You are an expert Ruby programmer and your friends Victor, Michael and Satoshi (all 3 are novice chess players) have requested you to write a Ruby program for them, that could help them with a listing of the best black opening chess moves.
  &lt;/p&gt;
  
  &lt;p&gt;
    You tell your chess friends that if they need help they should individually send you a text file containing the white&amp;#8217;s first move, as follows:
  &lt;/p&gt;
  
  &lt;pre&gt;
h4
a3
e4
&lt;/pre&gt;
  
  &lt;p&gt;
    h4, a3, e4 would be Ruby methods in your DSL program. Once we get the DSL to follow valid Ruby syntax, Ruby does all the work to parse the file and hold the data in a way that we can operate on it.
  &lt;/p&gt;
  
  &lt;p&gt;
    Victor is playing the black pieces and his opponent plays the opening white piece (say h4). Victor would like to know what&amp;#8217;s the best strategy to counter white&amp;#8217;s opening move of h4. He also would like to know, what if his opponent would have played a3.
  &lt;/p&gt;
  
  &lt;p&gt;
    Victor decides to send a &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.txt&#34;&gt;text file&lt;/a&gt; to you.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The DSL program &amp;#8211; chess_opener.rb
  &lt;/h3&gt;
  
  &lt;p&gt;
    Being a Ruby expert, you dish out your first version of the DSL program &amp;#8211; &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener.rb&#34;&gt;chess_opener.rb&lt;/a&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;class ChessOpener
  def initialize
    @data = {}
    load_data
  end
  
  def self.load(filename)
    dsl = new
    dsl.instance_eval(File.read(filename))
  end
  
  def h4
    puts &#34;==========&#34;
    puts @data.assoc(&#34;h4&#34;)
    puts &#34;==========&#34;    
  end

  def a3
    puts &#34;==========&#34;
    puts @data.assoc(&#34;a3&#34;)
    puts &#34;==========&#34;    
  end

  def method_missing(method_name, *args, &amp;#038;block)
    msg = &#34;You tried to call the method #{method_name}. There is no such method.&#34;
    raise msg
  end

  private
  def load_data
    @data = {&#34;a3&#34; =&gt; [&#34;Anderssen&#39;s Opening Polish Gambit: 1. a3 a5 2. b4&#34;,
                      &#34;Anderssen&#39;s Opening Creepy Crawly Formation: 1. a3 e5 2. h3 d5&#34;,
                      &#34;Anderssen&#39;s Opening Andersspike: 1. a3 g6 2. g4&#34;],
             &#34;h4&#34; =&gt; [&#34;Koola-Koola continues 1.h4 a5&#34;,
                      &#34;Wulumulu continues 1.h4 e5 2. d4&#34;,
                      &#34;Crab Variation continues 1.h4 any 2. a4&#34;,
                      &#34;Borg Gambit continues 1.h4 g5.&#34;,
                      &#34;Symmetric Variation continues 1.h4 h5&#34;]}
  end
  
end
&lt;/pre&gt;
  
  &lt;h4&gt;
    Some explanation of code
  &lt;/h4&gt;
  
  &lt;p&gt;
    The &lt;code&gt;initialize&lt;/code&gt; method of your class &lt;code&gt;ChessOpener&lt;/code&gt; creates a &lt;code&gt;Hash&lt;/code&gt; object &lt;code&gt;@data&lt;/code&gt; and populates it by calling the &lt;code&gt;private&lt;/code&gt; method &lt;code&gt;load_data&lt;/code&gt;. You have referred to the online &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_chess_openings&#34;&gt;list of chess openings&lt;/a&gt; to create the hash &lt;code&gt;@data&lt;/code&gt;. The current program has the openings only for a3 and h4 moves, but you plan to add the other moves soon.
  &lt;/p&gt;
  
  &lt;p&gt;
    You want a simple and straightforward way to parse the &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.txt&#34;&gt;DSL file&lt;/a&gt;. Something like:
  &lt;/p&gt;
  
  &lt;pre&gt;my_dsl = ChessOpener.load(filename)
&lt;/pre&gt;
  
  &lt;p&gt;
    Also, you would like to accept the DSL file from the command line, something like:
  &lt;/p&gt;
  
  &lt;pre&gt;my_dsl = ChessOpener.load(ARGV[0])
&lt;/pre&gt;
  
  &lt;p&gt;
    You write a &lt;em&gt;class method&lt;/em&gt; &lt;code&gt;load&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;def self.load(filename)
  dsl = new
  dsl.instance_eval(File.read(filename))
end
&lt;/pre&gt;
  
  &lt;p&gt;
    The class method &lt;code&gt;load&lt;/code&gt; creates a &lt;code&gt;ChessOpener&lt;/code&gt; object and calls &lt;code&gt;instance_eval&lt;/code&gt; on the DSL file (chess_opener_test.txt above). If you feed &lt;code&gt;instance_eval&lt;/code&gt; a string, &lt;code&gt;instance_eval&lt;/code&gt; will evaluate the string as Ruby code. In fact, this Ruby code is nothing but calls to the methods h4 and a3 which are respectively called. The methods h4 and a3 make use of Ruby Hash&amp;#8217;s &lt;code&gt;assoc&lt;/code&gt; method to extract the information about the particular (say h4) move.
  &lt;/p&gt;
  
  &lt;p&gt;
    The program also provides a &lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_method_missing.html&#34;&gt;method_missing&lt;/a&gt; method, in case the program fails to find a method say h5 (assuming Victor has typed that by mistake in the file chess_opener_test.txt.)
  &lt;/p&gt;
  
  &lt;h3&gt;
    Running the DSL program
  &lt;/h3&gt;
  
  &lt;p&gt;
    You next write the program &amp;#8211; &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.rb&#34;&gt;chess_opener_test.rb&lt;/a&gt;, ensuring that the files chess_opener.rb, chess_opener_test.rb and chess_opener_test.txt are in the same folder on your computer.
  &lt;/p&gt;
  
  &lt;p&gt;
    You now run your Ruby code as follows:
  &lt;/p&gt;
  
  &lt;pre&gt;ruby chess_opener_test.rb chess_opener_test.txt
&lt;/pre&gt;
  
  &lt;p&gt;
    Here&amp;#8217;s the sample output:
  &lt;/p&gt;
  
  &lt;pre&gt;==========
h4
Koola-Koola continues 1.h4 a5
Wulumulu continues 1.h4 e5 2. d4
Crab Variation continues 1.h4 any 2. a4
Borg Gambit continues 1.h4 g5.
Symmetric Variation continues 1.h4 h5
==========
==========
a3
Anderssen&#39;s Opening Polish Gambit: 1. a3 a5 2. b4
Anderssen&#39;s Opening Creepy Crawly Formation: 1. a3 e5 2. h3 d5
Anderssen&#39;s Opening Andersspike: 1. a3 g6 2. g4
==========
&lt;/pre&gt;
  
  &lt;p&gt;
    In fact, in the next version of your DSL program, you plan to write the output to a file and send the same to Victor. Why don&amp;#8217;t you &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves&#34;&gt;fork this project&lt;/a&gt; and add-on some more functionality?
  &lt;/p&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it!
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Feel free to ask questions and give feedback in the comments section of this post.&lt;/em&gt; Fellow Rubyists, if you would like to write a guest blog post for RubyLearning email me at &lt;b&gt;satish [at] rubylearning.org&lt;/b&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How do I keep multiple Ruby projects separate?</title>
      <link>http://rubylearning.com/2010/12/20/how-do-i-keep-multiple-ruby-projects-separate/</link>
      <pubDate>Mon, 20 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/12/20/how-do-i-keep-multiple-ruby-projects-separate/</guid>
      <description>

&lt;h2 id=&#34;how-do-i-keep-multiple-ruby-projects-separate:e46ce811565e3df9611640804f7d8d1e&#34;&gt;How do I keep multiple Ruby projects separate?&lt;/h2&gt;

&lt;p&gt;This guest post is by &lt;strong&gt;&lt;a href=&#34;https://github.com/steveklabnik&#34;&gt;Steve
Klabnik&lt;/a&gt;&lt;/strong&gt;, who is a software
craftsman, writer, and former startup CTO. Steve tries to keep his Ruby
consulting hours down so that he can focus on maintaining &lt;a href=&#34;http://hackety-hack.com/&#34;&gt;Hackety
Hack&lt;/a&gt; and being a core member of Team Shoes,
as well as writing regularly for multiple blogs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/steve_cropped.jpg&#34; alt=&#34;Steve Klabnik&#34; /&gt;
 If
you’re anything like me, you’re already starting a new project
immediately after wrapping up the last one. There just aren’t enough
hours in the day to code up all the crazy ideas I have floating around
in my head. Often, these ideas are the result of checking out some fun
new gem, GitHub project, or even a different Ruby. Real quickly, a
problem develops: what happens when these projects interfere with one
another? What if I want to use Ruby 1.8.7 for an older project, Ruby
1.8.5 for a legacy application, Ruby 1.9.2 for the latest and greatest,
and JRuby to use an interesting Ruby library? Luckily, there are a few
things that you can do to isolate your different projects from one
another, and some settings for that will make them quite painless to
use. There are three main things that can go wrong when you try to use
different sets of tools on a per-project basis: conflicts between Ruby
versions, conflicts between gems, and forgetting which tools you use on
which project.&lt;/p&gt;

&lt;h2 id=&#34;ruby-version-conflicts:e46ce811565e3df9611640804f7d8d1e&#34;&gt;Ruby Version Conflicts&lt;/h2&gt;

&lt;p&gt;This is the biggest and most painful kind of problem. If you want to use
Ruby 1.8 for one project and Ruby 1.9 for another, you have a problem.
If you’re using Linux, for example, your package manager may see that
both ruby18 and ruby19 fulfill a ‘ruby’ dependency, and so it won’t let
you have them both installed side by side. The solution isn’t pretty:
install different Rubies from source. This gets ugly really quickly,
because it’s easy to forget where you’ve compiled different Rubies, and
having software outside of your package manager isn’t a great answer. If
you’re on OS X or Windows, you skip right past the package manager
problem and straight to the source ‘solution.’ This is no good!&lt;/p&gt;

&lt;p&gt;Luckily, there’s an awesome project by Wayne E. Seguin named
&lt;a href=&#34;http://rvm.beginrescueend.com/&#34;&gt;rvm&lt;/a&gt;. rvm is sort of like a package
manager for Ruby. If you’d like to install both Ruby 1.8.7 and 1.9.2,
just type this in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm install 1.8.7
$ rvm install 1.9.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’ll go fetch the Ruby source code, compile it, and get you all set up.
To use a specific Ruby, you can type ‘use&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm use 1.8.7
$ ruby -v
ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-darwin10.4.0]
$ rvm use 1.9.2
$ ruby -v
ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat! You can even get other Ruby versions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm install jruby
$ rvm install rbx
$ rvm install macruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see a full list of these with ‘rvm list known’. For a full list
of everything that rvm can do, as well as installation instructions,
visit &lt;a href=&#34;http://rvm.beginrescueend.com/&#34;&gt;the rvm website.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gem-conflicts:e46ce811565e3df9611640804f7d8d1e&#34;&gt;Gem Conflicts&lt;/h2&gt;

&lt;p&gt;Once you’ve gotten your Rubies straight, you can still have conflicts
between different gems that your project needs. One project uses Rails
2.3.8, another uses Rails 3… It gets worse when you have certain gems
installed only as a dependency, and you don’t know exactly which one is
correct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem list | grep net-ssh
net-ssh (2.0.23, 2.0.4, 1.1.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rvm has a neat feature called ‘gemsets.’ They let you create separate
sets of gems per Ruby you have installed. This allows you to isolate
each application, giving it its own set of gems. Check it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem list

*** LOCAL GEMS ***

aasm (2.1.5)
abstract (1.0.0)
acl9 (0.12.0)
*snip*

$ rvm gemset create new-gemset
$ rvm use 1.9.2@new-gemset
$ gem list

*** LOCAL GEMS ***

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool stuff! As you can see, use an ‘@’ symbol to tell rvm which gemset
you’d like to use. Now we’ve isolated each project’s gems from each
other. There is, however, a much more complicated kind of conflicts that
can occur between gems. This happens when two gems have interlocking
dependencies.&lt;/p&gt;

&lt;p&gt;Here’s an example of this from the past: ActionPack 2.3.5 requires Rack
=1.0.0, which is the newest version. Unicorn requires Rack &amp;gt;1.0.0. Rack
releases a new version, 1.1.0. Now, when starting up a Rails
application, the unicorn gem is loaded first, so it loads the newest
version of the gem that works, which is rack-1.1.0. Then rails loads,
and it loads actionpack, which tries to load rack. It needs =1.0.1, but
sees that 1.1.0 has already been loaded, and throws this ugly, ugly
error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gem::LoadError: can&#39;t activate rack (~&amp;gt; 1.0.0, runtime)
for [&amp;quot;actionpack-2.3.5&amp;quot;], already activated rack-1.1.0
for [&amp;quot;unicorn&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s a set of versions here that works, but the way that the gems are
loaded means that it doesn’t. The problem is that at the time that
unicorn loads, it can’t possibly know that you’re planning on loading a
different version of rack somewhere down the line. What we really need
is a tool that knows about all of our dependencies, and can calculate
the graph of all of our requirements, and figure out which versions of
everything we need, and then only place those versions on the
\$LOAD_PATH. Luckily, such a project exists:
&lt;a href=&#34;http://gembundler.com/&#34;&gt;bundler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use bundler, you first need to make a file named ‘Gemfile’ in the
root of your project directory. This file looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;quot;http://rubygems.org&amp;quot;

gem &amp;quot;rails&amp;quot;, &amp;quot;~&amp;gt;3.0.0&amp;quot;

group :development do
  gem &#39;sqlite3-ruby&#39;, :require =&amp;gt; &#39;sqlite3&#39;
end

group :production do
  gem &amp;quot;pg&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line tells Bundler where to look for gems. The second line
says that we want to use the ‘rails’ gem, and we want any version that’s
at least 3.0.0 but less than 3.1.0. Finally, the other lines show
‘groups’ of gems: in development, we want to use sqlite3-ruby, and we
need to require it via the name ‘sqlite3′, but we want to use Postgres
in production. To install these gems, just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bundler gets all the information that it needs on all the gems, figures
out what versions of everything work together, and then installs the
right versions. It then creates a Gemfile.lock file that holds all of
this information. It’s just a simple YAML file, you can open it up and
see the specifics. You’ll want to add the Gemfile and Gemfile.lock into
your version control, so that anyone else that’s developing with you can
also get the same gem versions.&lt;/p&gt;

&lt;p&gt;To use the gems in your bundle, just use these two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;rubygems&amp;quot;
require &amp;quot;bundler/setup&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there, whenever you require a gem, it’ll be the version from the
bundle. If you want Bundler to automatically require all of your gems
for you, just ‘&lt;code&gt;Bundler.require&lt;/code&gt;‘ and it’ll require the default group of
gems.&lt;/p&gt;

&lt;p&gt;Rails 3 automatically comes with a Gemfile and bundler support right out
of the box. If you want to use Bundler with Rails 2.3, check out &lt;a href=&#34;http://gembundler.com/rails23.html&#34;&gt;the
Bundler site&lt;/a&gt; for setup
instructions.&lt;/p&gt;

&lt;p&gt;The combination of gemsets and Bundler will make sure that you don’t
have any nasty gem conflicts. Gemsets keep your projects isolated from
each other, and Bundler keeps your gems’ versions from interfering with
each other. The two work really well together.&lt;/p&gt;

&lt;h2 id=&#34;i-can-t-remember-which-tool-i-used:e46ce811565e3df9611640804f7d8d1e&#34;&gt;I can’t remember which tool I used!&lt;/h2&gt;

&lt;p&gt;All of these rubies and gemsets can get confusing. Luckily, rvm has an
awesome feature to take care of this, too: .rvmrc files. If you put a
file named ‘.rvmrc’ in your project’s root directory, when you enter the
project, it’ll switch your Ruby version (and gemset) automatically. It’s
really easy to use, too. Just put the command you’d use to switch in the
file. For example, in the Hackety Hack website project, I have the
following
&lt;a href=&#34;https://github.com/hacketyhack/hackety-hack.com/blob/master/.rvmrc&#34;&gt;.rvmrc&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm 1.8.7@hackety-hack.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Astute readers will notice that I left off the ‘use,’ rvm defaults to
‘use’ if you don’t give it a different command. Check it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -v
ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]
$ cd hackety-hack.com
$ ruby -v
ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-darwin10.4.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super cool. Now you’ll never forget which Ruby you were using, and you
don’t even need to switch manually. This is one of the first things that
I do when I start a new project in Ruby: Pick a Ruby version, make a
gemset with the same name as the project, and set up an .rvmrc. It’s
saved me hours of time and headaches.&lt;/p&gt;

&lt;h2 id=&#34;multiple-projects-super-simple:e46ce811565e3df9611640804f7d8d1e&#34;&gt;Multiple projects: super simple&lt;/h2&gt;

&lt;p&gt;rvm is a fantastic tool to help solve your multiple-ruby woes. It really
does make using multiple kinds of Ruby really, really easy. And Bundler
makes sure that your gems play nice togther. It’s a great time to be a
Rubyist.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable. Feel free to ask questions and
give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Heroku</title>
      <link>http://rubylearning.com/2010/12/15/getting-started-with-heroku/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/12/15/getting-started-with-heroku/</guid>
      <description>

&lt;h2 id=&#34;getting-started-with-heroku:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Getting started with Heroku&lt;/h2&gt;

&lt;p&gt;This guest post is by &lt;strong&gt;&lt;a href=&#34;http://benscofield.com/about/&#34;&gt;Ben Scofield&lt;/a&gt;&lt;/strong&gt;,
who is Heroku’s developer advocate, responsible for listening to the
tens of thousands of developers deploying their Ruby applications to the
cloud. He’s spoken at many conferences around the world, and in 2010
became the co-chair for RailsConf.&lt;/p&gt;

&lt;h2 id=&#34;introduction:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/ben-scofield.jpg&#34; alt=&#34;Ben
Scofield&#34; title=&#34;Ben Scofield&#34; /&gt;

Heroku has been in the news a lot lately, and it’s been a popular choice
for Ruby application developers for a few years.If you haven’t worked
with it before, here’s your chance — it’s designed to be as painless as
possible to get going, and to give a powerful, stable, and scalable
platform for your code.&lt;/p&gt;

&lt;h2 id=&#34;setting-up:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;If this is your first time working with Heroku, you’ll need to start by
setting up an account. Visit
&lt;a href=&#34;https://api.heroku.com/signup&#34;&gt;https://api.heroku.com/signup&lt;/a&gt; and enter
your email address. You’ll soon get an email to confirm your account;
click on the confirmation link and choose a password, and you’re
registered!&lt;/p&gt;

&lt;p&gt;Next, you’ll want to create an app (or find an existing one you want to
push). Heroku supports any Rack-based Ruby web framework — so you can
use Rails, Sinatra, Camping, Ramaze, or pretty much anything you want.
Let’s say you’re going to build a new Rails application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails new myapp
$ cd myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you’ve chosen (or created) your app, you’ll need to make sure it’s
tracked in git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
$ git add .
$ git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you’ve got your app ready to go, you’ll want to install the heroku
gem. As you’ll see, it’s a powerful tool for managing your apps from the
command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, from your application route, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is your first time using the heroku CLI, it’ll prompt you for
your username and password — on subsequent uses, it’ll pull your
username and API key for accessing Heroku from
&lt;strong&gt;~/.heroku/credentials&lt;/strong&gt;, but that doesn’t exist until you’ve logged
in through the CLI. It will also upload your public SSH key, and finally
it’ll create your new application on Heroku and add a git remote.&lt;/p&gt;

&lt;p&gt;If you want to specify the name of your app (and thus the subdomain on
Heroku), you can pass an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku create myapp # created myapp.heroku.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, to push your code to heroku, push it as you would to any git
remote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push heroku master
$ heroku rake db:migrate # you&#39;ll need to do this for any schema change
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll see feedback on the process, but by the end your code should be
up and running on Heroku’s platform!&lt;/p&gt;

&lt;p&gt;Of course, there’s a lot more to working with Heroku than just that, so
here’s a little more information.&lt;/p&gt;

&lt;h2 id=&#34;cli:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;CLI&lt;/h2&gt;

&lt;p&gt;The heroku gem gives you a lot more than just ‘&lt;strong&gt;heroku create&lt;/strong&gt;‘,
though. It provides a full CLI for working with your application. Here’s
an incomplete list of what you can do with it:&lt;/p&gt;

&lt;h3 id=&#34;rake:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;rake&lt;/h3&gt;

&lt;p&gt;You can run any rake task you like by prefacing it with ‘&lt;strong&gt;heroku
rake&lt;/strong&gt;‘:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku rake db:migrate
$ heroku rake routes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that heroku doesn’t run your migrations by default — when you
change your schema, you’ll need to run ‘&lt;strong&gt;heroku rake db:migrate&lt;/strong&gt;‘ to
update your production database.)&lt;/p&gt;

&lt;h3 id=&#34;resources:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;You can change your resource allocation from the command-line, too.
‘&lt;strong&gt;heroku dynos 5&lt;/strong&gt;‘ sets your application to 5 dynos; you can do the
same with workers. As you’ll see below, this extends to add-ons, as
well.&lt;/p&gt;

&lt;h3 id=&#34;config:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;config&lt;/h3&gt;

&lt;p&gt;Many capistrano-deployed projects have sensitive configuration
information (database.yml, etc.) in a shared folder on the server. When
a new version of the code is deployed, those files get symlinked into
the app. On Heroku, that’s not possible. Instead, the best practice is
to use config variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku config # lists all configuration variables
$ heroku config:add NAME=VALUE # set a new variable
$ heroku config:remove NAME # remove an existing variable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s also a ‘&lt;strong&gt;heroku config:clear&lt;/strong&gt;‘ command, but it’s dangerous —
it clears out all your environment variables, which includes those set
by Heroku itself. If you do that, then there’s a very good chance you’ll
lose information that you might not know (e.g., your DATABASE_URL).&lt;/p&gt;

&lt;h3 id=&#34;add-ons:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;add-ons&lt;/h3&gt;

&lt;p&gt;Heroku allows third-party developers to create add-ons for your
application, providing for both infrastructure features (exception
tracking through &lt;a href=&#34;http://addons.heroku.com/exceptional&#34;&gt;Exceptional&lt;/a&gt; and
&lt;a href=&#34;http://addons.heroku.com/hoptoad&#34;&gt;Hoptoad&lt;/a&gt; and business features (email
delivery through &lt;a href=&#34;http://addons.heroku.com/sendgrid&#34;&gt;SendGrid&lt;/a&gt;,
subscription billing through
&lt;a href=&#34;http://addons.heroku.com/recurly&#34;&gt;Recurly&lt;/a&gt;, etc.) As the owner of an
application, you can manage your add-ons from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku addons # lists addons
$ heroku addons:add newrelic:bronze # app monitoring for free? count me in!
$ heroku addons:remove piggyback_ssl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;plugins:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;plugins&lt;/h3&gt;

&lt;p&gt;Add-ons extend your application’s functionality; plugins extend the
heroku gem itself. You can see available plugins at
&lt;a href=&#34;http://herocutter.heroku.com/&#34;&gt;Herocutter&lt;/a&gt;, but some of our favorites
are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://herocutter.heroku.com/plugins/1&#34;&gt;colorize\_console&lt;/a&gt; for
wirble colors in the heroku console&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://herocutter.heroku.com/plugins/13&#34;&gt;tab\_complete\_console&lt;/a&gt;
for tab completion&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://herocutter.heroku.com/plugins/19&#34;&gt;heroku-accounts&lt;/a&gt; for
managing multiple Heroku accounts on the same machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;and-more:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;And more&lt;/h3&gt;

&lt;p&gt;The heroku CLI provides even more functionality; take a look through the
&lt;a href=&#34;http://docs.heroku.com/heroku-command&#34;&gt;documentation&lt;/a&gt; or its own help
(‘&lt;strong&gt;heroku&lt;/strong&gt;‘) to see more.&lt;/p&gt;

&lt;h2 id=&#34;common-problems:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Common problems&lt;/h2&gt;

&lt;p&gt;Heroku imposes some constraints on your application; some of these stem
from architectural decisions and are pretty much unavoidable, while
others come from less fundamental decisions and can be worked around.&lt;/p&gt;

&lt;h3 id=&#34;filesystem-access:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Filesystem access&lt;/h3&gt;

&lt;p&gt;Heroku’s architecture means that you can never be certain that your
application will be running in the same space for two separate requests
— two different dynos might serve later requests, and a single dyno
might be moved from one EC2 instance to another for a variety of
reasons. Because of that, Heroku doesn’t allow you access to the
filesystem; it just doesn’t make sense.&lt;/p&gt;

&lt;p&gt;To solve this, you should use an external service to host content that
you might want to serve up. Filesystem page caching, for instance, can
be replaced by properly using Heroku’s &lt;a href=&#34;http://docs.heroku.com/http-caching#example-caching-barcode-images-generated-with-imagemagick&#34;&gt;HTTP caching
layer&lt;/a&gt;.
Uploaded assets should be &lt;a href=&#34;http://docs.heroku.com/constraints#large-static-assets&#34;&gt;saved to
S3&lt;/a&gt; or a similar
service.&lt;/p&gt;

&lt;h3 id=&#34;process-timeouts:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Process timeouts&lt;/h3&gt;

&lt;p&gt;Heroku has some opinions about acceptable HTTP behavior, and timeouts
are a result of that. If you have a request that runs for more than 30
seconds, the platform will automatically kill it. For many apps, this
might include hitting remote services (like the Twitter API) or doing
file processing (with Paperclip or a similar tool).&lt;/p&gt;

&lt;p&gt;The solution is to move those long-running processes into a background
worker. You can read more about this in the
&lt;a href=&#34;http://docs.heroku.com/background-jobs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;idling:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Idling&lt;/h3&gt;

&lt;p&gt;Heroku is fantastic for experimentation, which leads to a predictable
conclusion: a lot of abandoned applications on the platform. In order to
keep them from chewing up an inordinate amount of resources, the
platform treats single-dyno applications a little differently (with the
assumption that an experiment is likely to be running on the free plan):
if the app hasn’t been hit in a certain amount of time, it gets idled
(or spun down). Then, on the next attempt to access it, the single dyno
is unidled.&lt;/p&gt;

&lt;p&gt;The effect of this is very similar to what you might do on your local
development box. When you’re working on an app, you fire up a local app
server (with rails server or something like that); when you stop working
on it, you shut down the server. Then, when you next want to hit the
app, you have to spend a few seconds starting the server again.&lt;/p&gt;

&lt;h3 id=&#34;postgres-migration:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Postgres migration&lt;/h3&gt;

&lt;p&gt;Every application on Heroku gets its own database — by default, it’s a
5MB shared Postgres db, though you can pay to get larger (or dedicated)
instances. This can cause problems, since the majority of Rubyists seem
to use MySQL in development, and Postgres and MySQL aren’t always same
in how they treat SQL and display messages. You can see some of the most
common issues (and their solutions) in the &lt;a href=&#34;http://docs.heroku.com/database#common-issues-migrating-to-postgresql&#34;&gt;Heroku
documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;Every app runs into problems in production — and sometimes an exception
tracker (like Exceptional or Hoptoad) don’t give you all the information
you need to fix it. On a VPS or dedicated server, you might be
accustomed to SSHing in and popping into an interactive console, digging
through logs, or something similar. With Heroku, that isn’t an option —
but we do have some alternatives, provided in the heroku gem.&lt;/p&gt;

&lt;h3 id=&#34;heroku-console:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;heroku console&lt;/h3&gt;

&lt;p&gt;You might not be able to run rails server or irb on the server yourself,
but ‘&lt;strong&gt;heroku console&lt;/strong&gt;‘ gives you an interactive shell for your
application. Once in the shell, you’re interacting directly with your
production instance, so be as careful as you’d normally be when futzing
with production data.&lt;/p&gt;

&lt;p&gt;There are a few things to be aware of with this console. First, it runs
over HTTP — every command you enter is pushed up to Heroku as an HTTP
request, so it’s subject to the same restrictions as your web app. For
instance, any process you start that runs longer than 30 seconds will be
killed. Also, requests from your console session tie up a dyno, so if
you’re running on a single dyno then your web app isn’t available to
serve regular requests while you’re updating your database.&lt;/p&gt;

&lt;p&gt;The other important thing to note is that each line you send is a
separate HTTP request. This means that you can’t write multi-line code
in the heroku console. Say you’re trying to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.all.each do |user|
  puts user.email
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you hit enter after the first line, the console sends
‘&lt;code&gt;&amp;gt;User.all.each do |user|&lt;/code&gt; to the server, which isn’t a complete
expression. Before you can start typing the next line, then, the system
sends back an error. You can still run this code, but you have to
rewrite it to be on a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.all.each {|user| puts user.email}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;heroku-ps:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;heroku ps&lt;/h3&gt;

&lt;p&gt;Sysadmins live and die by process lists, so Heroku provides a tool to
see what processes you have available and what state they’re in. If you
run &lt;strong&gt;heroku ps&lt;/strong&gt; for an active application, you’ll see something like
the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UPID     Slug          Command                     State       Since
    -------  ------------  --------------------------  ----------  ---------
    xxxxxxx  xxxxxxxxxxxx  dj                          up          16h ago
    xxxxxxx  xxxxxxxxxxxx  cron                        idle        43m ago
    xxxxxxx  xxxxxxxxxxxx  dyno                        up          16h ago
    xxxxxxx  xxxxxxxxxxxx  dyno                        up          16h ago
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is especially useful when combined with the Unix
&lt;a href=&#34;http://en.wikipedia.org/wiki/Watch_(Unix&#34;&gt;watch&lt;/a&gt;) command (if you’re on
OS X, you may have to &lt;a href=&#34;http://osxdaily.com/2010/08/22/install-watch-command-on-os-x/&#34;&gt;install it
manually&lt;/a&gt;),
which reruns the command periodically so you can see how things are
changing in real-time.&lt;/p&gt;

&lt;h3 id=&#34;heroku-logs:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;heroku logs&lt;/h3&gt;

&lt;p&gt;And finally, the logs. Anyone who’s built a web app knows just how
important logs are, so Heroku provides a set of tools to help review
(and in some cases analyze) them.&lt;/p&gt;

&lt;p&gt;To use Heroku’s logging, you have to install both a plugin and an
add-on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku plugins:install http://github.com/heroku/heroku-logging.git
$ heroku addons:add logging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that’s done, anything your app pushes to STDOUT or STDERR is
captured in your logs — if you’re using Rails, you should make sure to
redirect your logger to STDOUT by adding this line to your config
(application.rb or environment.rb, depending on what version of Rails
you’re running):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.action_controller.logger = Logger.new(STDOUT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ‘&lt;strong&gt;heroku logs&lt;/strong&gt;‘ command by itself will show you the last 20 lines
of your log, looking something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    2010-12-10T15:13:46-07:00 app[web.1]: Completed in 74ms (View: 31, DB: 40) | 200 OK [http://myapp.heroku.com/]
    2010-12-10T15:13:46-07:00 heroku[router]: GET myapp.heroku.com/posts queue=0 wait=0ms service=1ms bytes=975
    2010-12-10T15:13:47-07:00 app[worker.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can filter the logs by source (-s) and process (-p), you can tail
them in real-time with -t, and you can ask for a specific number of
lines with -n. Perhaps most powerfully, you can also add syslog drains
for your logs, pushing syslog packets to another server for long-term
storage or analysis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heroku logs:drains add syslog://your.syslog.host
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;where-to-go-for-help:e1de9e228454d1bb97c6dc0a02f63488&#34;&gt;Where to go for help&lt;/h2&gt;

&lt;p&gt;This is just the tip of the iceberg, really — there’s a lot you can do
with Heroku, and spending time digging into the platform is very
worthwhile. Take a look at our &lt;a href=&#34;http://docs.heroku.com&#34;&gt;documentation&lt;/a&gt;,
and talk to other developers in our &lt;a href=&#34;http://groups.google.com/group/heroku&#34;&gt;Google
group&lt;/a&gt; and on
&lt;a href=&#34;irc://irc.freenode.net/heroku&#34;&gt;IRC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to ask questions and give feedback in the comments section of
this post. Thanks and Good Luck!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Know Metaprogramming In Ruby?</title>
      <link>http://rubylearning.com/2010/11/23/dont-know-metaprogramming-in-ruby/</link>
      <pubDate>Tue, 23 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/11/23/dont-know-metaprogramming-in-ruby/</guid>
      <description>

&lt;p&gt;This guest post is by &lt;strong&gt;Gavin Morrice&lt;/strong&gt;, Managing Director of &lt;a href=&#34;http://katanacode.com&#34;&gt;Katana
Code Ltd.&lt;/a&gt;, a software boutique based in
Edinburgh, Scotland. He likes sharing Rails tips&lt;img
class=&#34;flowLeft&#34; src=&#34;http://rubylearning.com/images/GavinMorrice.jpg&#34;
alt=&#34;Gavin Morrice&#34; height=&#34;320&#34; width=&#34;320&#34;&gt; on &lt;a href=&#34;http://gavinmorrice.com/&#34;&gt;his
site&lt;/a&gt;. When he’s not writing code he’s usually
weightlifting, reading or writing&lt;/p&gt;

&lt;h2 id=&#34;introduction:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of the most impressive aspects of Ruby is its metaprogramming
capabilities. As a dynamic language, Ruby gives you the freedom to
define methods and even classes during runtime. Metaprogramming with
Ruby, one can do in a few minutes what other languages may take hours to
do. By cleverly planning your code and applying the techniques mentioned
here, you’ll be able to write code that is DRYer, lighter, more
intuitive and more scalable.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you are already familiar with the following
concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby Classes and class inheritance&lt;/li&gt;
&lt;li&gt;Instance methods and instance variables&lt;/li&gt;
&lt;li&gt;Raising exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and standard Ruby notations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to show that &lt;code&gt;method_name&lt;/code&gt; is a method in &lt;code&gt;MyClass&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyClass#method_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;to show the return value of a method

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-metaprogramming:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;What is Metaprogramming?&lt;/h2&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metaprogramming is the writing of computer programs that write or
manipulate other programs (or themselves) as their data, or that do
part of the work at compile time that would otherwise be done at
runtime. In many cases, this allows programmers to get more done in
the same amount of time as they would take to write all the code
manually, or it gives programs greater flexibility to efficiently
handle new situations without recompilation. Or, more simply put:
Metaprogramming is writing &lt;strong&gt;code that writes code&lt;/strong&gt; during runtime to
make your life easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;object_context:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Adding methods in the context of an object&lt;/h2&gt;

&lt;p&gt;In Ruby, &lt;em&gt;everything&lt;/em&gt; is an object. The base class in Ruby is called
&lt;code&gt;Object&lt;/code&gt; (or &lt;code&gt;BasicObject&lt;/code&gt; in Ruby 1.9) and all other classes inherit
properties from it. Every object in Ruby has its own methods, and
instance variables which can be added, edited or removed during runtime.
Here is a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 1: create a new instance of class Object
my_object = Object.new

# define a method on my_object to set the instance variable @my_instance_variable
def my_object.set_my_variable=(var)
  @my_instance_variable = var
end

# define a method on my_object to return value of instance variable @my_instance_variable
def my_object.get_my_variable
  @my_instance_variable
end

my_object.set_my_variable = &amp;quot;Hello&amp;quot;
my_object.get_my_variable # =&amp;gt; Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we have created a new instance of the &lt;code&gt;Object&lt;/code&gt; class
and defined two methods on that instance for writing and reading
(setting and getting). The two new methods that we’ve defined are only
available to our object &lt;code&gt;my_object&lt;/code&gt; and will not be present on any
other instance of the &lt;code&gt;Object&lt;/code&gt; class. We can prove this by extending our
example like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 2: create a new instance of class Object
my_object = Object.new

# create a second instance of class Object
my_other_object = Object.new

# define a method on my_object to set the instance variable @my_instance_variable
def my_object.set_my_variable=(var)
  @my_instance_variable = var
end

# define a method on my_object to return value of instance variable @my_instance_variable
def my_object.get_my_variable
  @my_instance_variable
end

my_object.set_my_variable = &amp;quot;Hello&amp;quot;
my_object.get_my_variable # =&amp;gt; Hello

my_other_object.get_my_variable = &amp;quot;Hello&amp;quot; # =&amp;gt; NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we try to call &lt;code&gt;get_my_variable()&lt;/code&gt; on our second object
&lt;code&gt;my_other_object&lt;/code&gt; the interpreter raises a &lt;code&gt;NoMethodError&lt;/code&gt; to tell us
that &lt;code&gt;my_other_object&lt;/code&gt; doesn’t recognise the method
&lt;code&gt;get_my_variable()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see where this feature of Ruby might be useful, let’s look at a more
common example: writing class methods.&lt;/p&gt;

&lt;h2 id=&#34;writing-class-methods:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Writing Class Methods&lt;/h2&gt;

&lt;p&gt;You’ll probably already be aware of this common syntax for writing
methods to your Ruby classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 3
class MyClass
  def self.capitalize_name
    name.upcase
  end
end
print MyClass.capitalize_name # =&amp;gt; MYCLASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within our class definition we’re defining a method on one particular
object just like we did in Example 1. Only, this time the object is
&lt;em&gt;self&lt;/em&gt; (in this case MyClass). And as we saw in Example 2, the
capitalize_name() method is only available to this particular object
MyClass and no other class (yet). This is just one example of how to
write a class method. To refer back to Example 3 again, here are three
different approaches to defining the same class methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 4
# approach 1
class MyClass
  # defining a class method within the class definition
  def MyClass.capitalize_name
    name.upcase
  end
end

# approach 2
class MyClass;end
# defining a class method out with the class definition
def MyClass.capitalize_name
  name.upcase
end

# approach 3
# define a new class named MyClass
MyClass = Class.new
# add the capitalize_name to MyClass
def MyClass.capitalize_name
  name.upcase
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how similar approach 3 here is to Example 1? You will hopefully have
realised that when you write a class method in Ruby, it’s just the same
as creating an instance of any class and adding methods only to that
instance, only this time its an instance of the class “Class”.&lt;/p&gt;

&lt;h2 id=&#34;writing_code_that_writes_code:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Writing Code That Writes Code&lt;/h2&gt;

&lt;p&gt;An important philosophy in programming is DRY (Don’t Repeat Yourself).
Writing code that is the same (or similar) several times is not only an
inefficient waste of time, it can become a nightmare when you need to
make changes in future. In many cases, it’s possible to remove this
duplication of effort by writing code that writes the code for you.
Here’s an example…
 Consider an application for a car manufacturer to store and access data
on each of it’s models. Within the application we have a class called
CarModel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 5
class CarModel
  def engine_info=(info)
    @engine_info = info
  end

  def engine_info
    @engine_info
  end

  def engine_price=(price)
    @engine_price = price
  end

  def engine_price
    @engine_price
  end

  def wheel_info=(info)
    @wheel_info = info
  end

  def wheel_info
    @wheel_info
  end

  def wheel_price=(price)
    @wheel_price = price
  end

  def wheel_price
    @wheel_price
  end

  def airbag_info=(info)
    @airbag_info = info
  end

  def airbag_info
    @airbag_info
  end

  def airbag_price=(price)
    @airbag_price = price
  end

  def airbag_price
    @airbag_price
  end

  def alarm_info=(info)
    @alarm_info = info
  end

  def alarm_info
    @alarm_info
  end

  def alarm_price=(price)
    @alarm_price = price
  end

  def alarm_price
    @alarm_price
  end

  def stereo_info=(info)
    @stereo_info = info
  end

  def stereo_info
    @stereo_info
  end

  def stereo_price=(price)
    @stereo_price = price
  end

  def stereo_price
    @stereo_price
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each car model comes with various features such as “stereo”, “alarm”
etc. We have a method to get and set the values of each feature of the
car. Each feature has information and price so for every new feature we
add to the CarModel class, we need to define two new methods:
&lt;code&gt;feature_info&lt;/code&gt; and &lt;code&gt;feature_price&lt;/code&gt;.
 Since each of these methods are similar, we can do the following to
simplify this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 6
class CarModel
  FEATURES = [&amp;quot;engine&amp;quot;, &amp;quot;wheel&amp;quot;, &amp;quot;airbag&amp;quot;, &amp;quot;alarm&amp;quot;, &amp;quot;stereo&amp;quot;]

  FEATURES.each do |feature|
    define_method(&amp;quot;#{feature}_info=&amp;quot;) do |info|
      instance_variable_set(&amp;quot;@#{feature}_info&amp;quot;, info)
    end

    define_method(&amp;quot;#{feature}_info&amp;quot;) do
      instance_variable_get(&amp;quot;@#{feature}_info&amp;quot;)
    end

    define_method &amp;quot;feature_price=&amp;quot; do |price|
      instance_variable_set(&amp;quot;@#{feature}_price&amp;quot;, price)
    end

    define_method(&amp;quot;#{feature}_price&amp;quot;) do
      instance_variable_get(&amp;quot;@#{feature}_price&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we start by defining an array called &lt;code&gt;FEATURES&lt;/code&gt; which
includes all the features we wish to add methods for. Then, for each
feature, we use Ruby’s
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Module.html#M001654&#34;&gt;Module#define_method&lt;/a&gt;
to define four methods for each feature. Just like in Example 5, the
four methods are getter and setter methods for the feature’s price and
info. The only difference is, they have been written dynamically when
the class is defined and not by us. We use
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Object.html#M000368&#34;&gt;Object#instance_variable_set()&lt;/a&gt;
to set the value of instance variables for each feature and
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Object.html#M000378&#34;&gt;Object#instance_variable_get&lt;/a&gt;
to return the values for each.&lt;/p&gt;

&lt;p&gt;The need to define getter and setter methods like this is quite common
in Ruby so it’s not surprising that Ruby already has methods that do
just that. &lt;code&gt;Module#attr_accessor&lt;/code&gt; can be used to do the same thing as in
Example 6 with just a single line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 7
class CarModel
  attr_accessor :engine_info, :engine_price, :wheel_info, :wheel_price, :airbag_info, :airbag_price, :alarm_info, :alarm_price, :stereo_info, :stereo_price
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! But this still isn’t ideal. For each feature, we still need to
define two attributes (&lt;code&gt;feature_info&lt;/code&gt; and &lt;code&gt;feature_price&lt;/code&gt;). Ideally we
should be able to call a method that can do the same as in Example 7 but
by only listing each feature once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 8
class CarModel
  # define a class macro for setting features
  def self.features(*args)
    args.each do |feature|
      attr_accessor &amp;quot;#{feature}_price&amp;quot;, &amp;quot;#{feature}_info&amp;quot;
    end
  end

  # set _info and _price methods for each of these features
  features :engine, :wheel, :airbag, :alarm, :stereo
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we take each of the arguments for &lt;code&gt;CarModel#features&lt;/code&gt;
and pass them to &lt;code&gt;attr_accessor&lt;/code&gt; with &lt;code&gt;_price&lt;/code&gt; and &lt;code&gt;_info&lt;/code&gt; extensions.
Although this approach is slightly more involved than the one in Example
7, it ensures that each feature is treated the same and means that
adding more attributes in future will be simpler.&lt;/p&gt;

&lt;h2 id=&#34;a-brief-explanation-of-the-ruby-object-model:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;A Brief Explanation of the Ruby Object Model&lt;/h2&gt;

&lt;p&gt;Before going any further, it’s important that we understand the basics
of Ruby’s Object Model and how Ruby deals with method calls.  Whenever you call
a method on an object, the interpreter first looks through the object’s
instance methods to see if it can find that method.  If the interpreter can
find the method, it will execute it as expected but if not, it will pass the
request up the chain to the object’s class.  If it can’t find the method there
it will continue to look in that class’s parent class, then the parent’s parent
etc. up to the &lt;code&gt;Object&lt;/code&gt; class itself. But it doesn’t stop there… If the
interpreter can’t find the method anywhere up the object’s chain
of inheritance, it will go back to the object and call another method
called
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;.
Just like with our first method, the interpreter looks for
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
in the object’s methods, then the object’s class’s instance methods etc.
until reaches the &lt;code&gt;Object&lt;/code&gt; class where
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
&lt;strong&gt;is&lt;/strong&gt; defined and will raise a &lt;code&gt;NoMethodError&lt;/code&gt; error. This is when
metaprogramming really starts getting fun!&lt;/p&gt;

&lt;p&gt;By defining
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
yourself within a class, it’s possible to change this default behaviour
for some pretty useful effects.
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
is passed two arguments; the name of the missing method (as a symbol)
and array of its arguments. Let’s look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 9
class MyGhostClass
  def method_missing(name, *args)
    puts &amp;quot;#{name} was called with arguments: #{args.join(&#39;,&#39;)}&amp;quot;
  end
end

m = MyGhostClass.new
m.awesome_method(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;) # =&amp;gt; awesome_method was called with arguments: one,two
m.another_method(&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;) # =&amp;gt; another_method was called with arguments: three,four
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s no method named awesome_method() or another_method() within
our class yet when we try calling it, we don’t see the usual
&lt;code&gt;NoMethodError&lt;/code&gt;. Instead, we see the name of the methods and their
arguments, just like we defined in method_missing().&lt;/p&gt;

&lt;p&gt;We can expand this idea a little more by adding conditions to this
method. Let’s say, for example, that all methods containing the word
“awesome” should be printed out just like in Example 9. All other
methods should raise the default &lt;code&gt;NoMethodError&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 10
class MyGhostClass
  def method_missing(name, *args)
    if name.to_s =~ /awesome/
      puts &amp;quot;#{name} was called with arguments: #{args.join(&#39;,&#39;)}&amp;quot;
    else
      super
    end
  end
end

m = MyGhostClass.new
m.awesome_method(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;) # =&amp;gt;  awesome_method was called with arguments: one,two
m.another_method(&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;) # =&amp;gt;  NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, calling &lt;code&gt;awesome_method&lt;/code&gt; behaves just like in Example 9, but
&lt;code&gt;another_method&lt;/code&gt; doesn’t contain the word “awesome” so we pass this up
the chain of inheritance so the default behaviour is not broken.&lt;/p&gt;

&lt;h2 id=&#34;ghost-methods:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Ghost Methods&lt;/h2&gt;

&lt;p&gt;Strictly speaking, &lt;code&gt;MyGhostClass#awesome_method&lt;/code&gt; is not really a method.
If we create an instance of MyGhostClass and scan it’s methods for any
with “awesome” in the name we won’t find any.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 11
@m = MyGhostClass.new
@m.methods.grep(/awesome/) # =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, we call this a ghost method. Ghost methods come with pros and
cons. The major pro is the ability to write code that responds to
methods when you have no way of knowing the names of those methods in
advance. The major con is that changing Ruby’s default behaviour like
this may cause unexpected bugs if you’re not careful with your method
names.
 With that in mind, let’s go back to our CarModel example and see if we
can extend the functionality a little further.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 12
class CarModel
  def method_missing(name, *args)
    name = name.to_s
    super unless name =~ /(_info|_price)=?$/
    if name =~ (/=$/)
      instance_variable_set(&amp;quot;@#{name.chop}&amp;quot;, args.first)
    else
      instance_variable_get(&amp;quot;@#{name}&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example may look a little complex but is really quite simple.
First, we take the name argument and convert it from a symbol to a
string. Next, we say “send this method up the inheritance chain unless
the name ends with &lt;code&gt;_price&lt;/code&gt;, &lt;code&gt;_price=&lt;/code&gt;, &lt;code&gt;_info&lt;/code&gt; or &lt;code&gt;_info=&lt;/code&gt;&amp;rdquo;. If the
name ends in an equals sign then we know this is a setter method so we
set an instance variable with the same name as our method (minus the
&lt;code&gt;=&lt;/code&gt;). If there’s no equals sign then we know this is a getter method and
so we return the instance variable with the same name.&lt;/p&gt;

&lt;p&gt;Now, we don’t have to specify the features each car model has in
advance. We can simply get and set values on any &lt;code&gt;_price&lt;/code&gt; or &lt;code&gt;_info&lt;/code&gt;
attribute during runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 13
@car_model = CarModel.new

@car_model.stereo_info    = &amp;quot;CD/MP3 Player&amp;quot;
@car_model.stereo_price   = &amp;quot;£79.99&amp;quot;

@car_model.stereo_info  # =&amp;gt; &amp;quot;CD/MP3 Player&amp;quot;
@car_model.stereo_price # =&amp;gt; &amp;quot;£79.99&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This tutorial has only scratched the surface of Ruby’s metaprogramming
capabilities but hopefully it’s enough to spark your curiosity and will
urge you to learn more about metaprogramming. The &lt;a href=&#34;http://ruby-doc.org/core/&#34;&gt;Ruby
API&lt;/a&gt; covers all the methods I’ve talked about
here plus more. For further reading, check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001660&#34;&gt;Module#included&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001650&#34;&gt;Module#class_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Object.html#M000334&#34;&gt;Object#instance_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Struct.html&#34;&gt;Struct&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable. Feel free to ask questions and
give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do also read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/17/does-ruby-have-too-many-equality-tests/&#34;&gt;Does Ruby Have Too Many Equality
Tests?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/16/why-use-single-sign-in-solutions-in-rails/&#34;&gt;Why Use Single Sign-in Solutions in
Rails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/08/how-does-your-code-smell/&#34;&gt;How does your code
smell?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/08/do-you-know-resque/&#34;&gt;Do YOU know
Resque?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/03/do-you-understand-rubys-objects-messages-and-blocks/&#34;&gt;Do You Understand Ruby’s Objects, Messages and
Blocks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/02/how-does-one-use-design-patterns-in-ruby/&#34;&gt;How Does One Use Design Patterns In
Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/26/do-you-know-whats-new-in-ruby-1-9/&#34;&gt;Do you know what’s new in Ruby
1.9?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/25/the-value-of-a-personal-bug-log/&#34;&gt;The value of a personal bug
log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/18/do-you-enjoy-your-code-quality/&#34;&gt;Do You Enjoy Your Code
Quality?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn &lt;strong&gt;Ruby Metaprogramming&lt;/strong&gt; in-depth, join our online
course that starts 4th Dec. 2010. For details &lt;a href=&#34;http://rubylearning.com/blog/2010/11/06/ruby-metaprogramming-course-6th-batch-learn-to-think-in-ruby/&#34;&gt;click
here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do YOU know Resque?</title>
      <link>http://rubylearning.com/2010/11/08/do-you-know-resque/</link>
      <pubDate>Mon, 08 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/11/08/do-you-know-resque/</guid>
      <description>&lt;p&gt;This guest post is by &lt;strong&gt;&lt;a href=&#34;http://redsquirrel.com/dave&#34;&gt;Dave Hoover&lt;/a&gt;&lt;/strong&gt;,
who authored the book &lt;a href=&#34;http://oreilly.com/catalog/9780596518387&#34;&gt;Apprenticeship Patterns: Guidance for the
Aspiring Software Craftsman&lt;/a&gt;
for O’Reilly, instigated the &lt;a href=&#34;http://scna.softwarecraftsmanship.org/&#34;&gt;Software Craftsmanship North America
conference&lt;/a&gt;, and is the Chief
Craftsman at &lt;a href=&#34;http://obtiva.com&#34;&gt;Obtiva&lt;/a&gt;. Dave began teaching himself to
program in 2000, back when he was a family therapist. Dave lives near
Chicago with his wife and three children. In his spare time, Dave
competes in endurance sports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/davehoover.jpg&#34; alt=&#34;Dave Hoover&#34; /&gt;
 Web
developers can sometimes forget the importance of doing as little work
as possible during the HTTP request-response life-cycle. When we’re
developing new features, the simplest thing to do is just handle all the
work that has been requested before responding, making the user wait,
patiently watching their browser spin. This is nearly always a bad idea,
and for reasons beyond user experience, most notably, it ties up a web
process, making your site more likely to experience outages as traffic
spikes. While it often makes sense to develop features with slow
responses for your initial implementation, it’s usually unwise to deploy
that version of the feature to your production environment. Thankfully,
Ruby developers can choose from a number of “background job” libraries.
I’m going to introduce you to
&lt;a href=&#34;http://github.com/defunkt/resque&#34;&gt;Resque&lt;/a&gt;, developed at
&lt;a href=&#34;http://github.com/&#34;&gt;Github&lt;/a&gt;, built on top of
&lt;a href=&#34;http://code.google.com/p/redis/&#34;&gt;Redis&lt;/a&gt;, an advanced key-value store
which Resque uses for queuing.&lt;/p&gt;

&lt;p&gt;One nice thing about Resque is that it’s not dependant on Rails or any
web framework. This is great, because today, I’m not interested in
writing a web application. I want to write a fast-running Ruby program
that figures out what work needs to be done, tells someone else to do
it, and then exits. (Similar to a web request, but simpler.) I’ll start
with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;idea = ARGV
puts &amp;quot;Analyzing your idea: #{idea.join(&amp;quot; &amp;quot;)}&amp;quot;
idea.each do |word|
  puts &amp;quot;Asking for a job to analyze: #{word}&amp;quot;
  # This is where we would enqueue something
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I named this program &lt;code&gt;idea_analyzer.rb&lt;/code&gt; and it was in my current
working directory, I could run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
Asking for a job to analyze: will
Asking for a job to analyze: learn
Asking for a job to analyze: ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this program takes an “idea” from the command line and
claims to ask for a “job” to analyze each word in the idea. Obviously,
the next step is to actually ask for that job, instead of just talking
about it. First, I’ll write the code that tells Resque to enqueue a job,
and then we’ll get Resque in place. That might seem backward to some of
you, since I’m writing code I know will fail, but “fast-failure” is a
technique I use all the time, whether I’m practicing &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;test-driven
development&lt;/a&gt;, or
learning a new technology with a toy problem like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;idea = ARGV
puts &amp;quot;Analyzing your idea: #{idea.join(&amp;quot; &amp;quot;)}&amp;quot;
idea.each do |word|
  puts &amp;quot;Asking for a job to analyze: #{word}&amp;quot;
  Resque.enqueue(WordAnalyzer, word)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and simple. We’re calling a method on the Resque class. We’re
passing in the word, but we’re also passing in the class
&lt;code&gt;WordAnalayzer&lt;/code&gt;. This is the only code that interacts directly with
Resque. The &lt;code&gt;enqueue&lt;/code&gt; method takes the name of the class responsible for
doing the background work and the data required to accomplish the work,
in this case the &lt;code&gt;word&lt;/code&gt; variable. It will attempt to place a job in the
appropriate queue. If we run the current version of this program, it
fails like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
idea_analyzer.rb:5: uninitialized constant Resque (NameError)
    from /tmp/stuff.rb:3:in `each&#39;
    from /tmp/stuff.rb:3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uninitialized constant Resque&lt;/code&gt; error is telling me that Ruby
doesn’t know about Resque yet. I can fix that by installing the Resque
gem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install resque
Successfully installed resque-1.10.0
1 gem installed
Installing ri documentation for resque-1.10.0...
Installing RDoc documentation for resque-1.10.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll likely see other gems being installed as well, these are the gems
that Resque depends on. Now I’ll just tell our program about Resque:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;resque&amp;quot;

idea = ARGV
puts &amp;quot;Analyzing your idea: #{idea.join(&amp;quot; &amp;quot;)}&amp;quot;
idea.each do |word|
  puts &amp;quot;Asking for a job to analyze: #{word}&amp;quot;
  Resque.enqueue(WordAnalyzer, word)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this, we’ll get a different error. Excellent! We’re making
progress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
idea_analyzer.rb:7: uninitialized constant WordAnalyzer (NameError)
    from idea_analyzer.rb:5:in `each&#39;
    from idea_analyzer.rb:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see an error like &lt;code&gt;no such file to load -- resque&lt;/code&gt;, then you need
to add &lt;code&gt;require &amp;quot;rubygems&amp;quot;&lt;/code&gt; at the top of your program. You should
eventually see the error about a missing &lt;code&gt;WordAnalyzer&lt;/code&gt;. I’ll take care
of that next by creating a &lt;code&gt;word_analyzer.rb&lt;/code&gt; file, defining the class…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class WordAnalyzer

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and then require it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;resque&amp;quot;
require &amp;quot;word_analyzer&amp;quot;

idea = ARGV
puts &amp;quot;Analyzing your idea: #{idea.join(&amp;quot; &amp;quot;)}&amp;quot;
idea.each do |word|
  puts &amp;quot;Asking for a job to analyze: #{word}&amp;quot;
  Resque.enqueue(WordAnalyzer, word)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this fails with a different error, we’re almost there!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
/my/gems/resque-1.10.0/lib/resque/job.rb:44:in `create&#39;: Jobs must be placed onto a queue. (Resque::NoQueueError)
    from /my/gems/resque-1.10.0/lib/resque.rb:206:in `enqueue&#39;
    from idea_analyzer.rb:8
    from idea_analyzer.rb:6:in `each&#39;
    from idea_analyzer.rb:6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our problem is that we haven’t specified a queue for the
&lt;code&gt;WordAnalyzer&lt;/code&gt; class. As its name suggests, Resque is all about queues.
Each Resque class, such as &lt;code&gt;WordAnalyzer&lt;/code&gt;, can specify its default
queue, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class WordAnalyzer
  @queue = &amp;quot;word_analysis&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-running this results in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
/my/gems/redis-2.0.10/lib/redis/client.rb:226:in `connect_to&#39;: Connection refused - Unable to connect to Redis on localhost:6379 (Errno::ECONNREFUSED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resque is trying to enqueue a &lt;code&gt;WordAnalyzer&lt;/code&gt; job for “I” on the
&lt;code&gt;word_analysis&lt;/code&gt; queue, and is using the default host (localhost) and
port (6379). I’ll start Redis and our program should be much happier. I
recommend installing Redis via
&lt;a href=&#34;https://github.com/antirez/redis/archives/master&#34;&gt;https://github.com/antirez/redis/archives/master&lt;/a&gt;
with &lt;code&gt;antirez-redis-v2.0.3-stable-0-gb766149.zip&lt;/code&gt;. Then starting it in a
new console with &lt;code&gt;redis-server&lt;/code&gt;. With that running, you can rerun your
program and it should look like the output of the first version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby idea_analyzer.rb I will learn ruby
Analyzing your idea: I will learn ruby
Asking for a job to analyze: I
Asking for a job to analyze: will
Asking for a job to analyze: learn
Asking for a job to analyze: ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this time, after its quick run, it has left some work behind,
sitting in Redis. You can see it if you type &lt;code&gt;resque-web&lt;/code&gt; in your
console. This will launch a browser and bring up a little
&lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; app that ships with Resque,
allowing you to watch the activity between Resque’s queues and workers.
Now that we can see 4 jobs waiting patiently in the &lt;code&gt;word_analysis&lt;/code&gt;
queue, let’s get a worker started. The customary way to start Resque
workers is via Rake, so I’ll create a &lt;code&gt;Rakefile&lt;/code&gt; beside my other 2 files
and just put this in the &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;word_analyzer&amp;quot;
require &amp;quot;resque/tasks&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, from the command line, I can start the worker with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake resque:work QUEUE=*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start a worker listening on all of Resque’s queues, and will
never exit. If you want to stop it, just hit CTRL-C. Once it has run for
a few seconds, refresh the browser you had pointing at resque-web,
click-through to the failure queue, and you’ll see all the jobs failed
with &lt;code&gt;undefined method &#39;perform&#39; for WordAnalyzer:Class&lt;/code&gt;. That’s a nice
way of telling us it’s time to write the &lt;code&gt;perform&lt;/code&gt; method for our Resque
class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class WordAnalyzer
  @queue = &amp;quot;word_analysis&amp;quot;

  def self.perform(word)
    puts &amp;quot;About to do heavy duty analysis on #{word}&amp;quot;
    sleep 3 # fake analysis here
    # this would be something impressive
    puts &amp;quot;Finished with analysis on #{word}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your worker is still running, stop it with a CTRL-C. Then restart it
via Rake so it loads up our new &lt;code&gt;perform&lt;/code&gt; method. As you’ve probably
guessed, Resque simply calls a method named &lt;code&gt;perform&lt;/code&gt; on the class you
enqueue. Be aware that any arguments you pass into &lt;code&gt;Resque.enqueue&lt;/code&gt; are
going to be serialized as &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;, which means Ruby
Symbols will turn into Strings, and complex objects like instances of
ActiveRecord will not work. When I need to work with ActiveRecords in
Resque, I just pass their ids across and re-query them from the
database.&lt;/p&gt;

&lt;p&gt;Now that the worker is restarted and &lt;code&gt;WordAnalyzer&lt;/code&gt; knows what to
perform, our background processing system is ready. Start a new console
and execute &lt;code&gt;ruby idea_analyzer.rb I will learn ruby&lt;/code&gt;. Your Resque
worker should perform some “successful” analysis over the course of
about 12 seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake resque:work QUEUE=*
(in /Users/redsquirrel/Desktop)
About to do heavy duty analysis on I
Finished with analysis on I
About to do heavy duty analysis on will
Finished with analysis on will
About to do heavy duty analysis on learn
Finished with analysis on learn
About to do heavy duty analysis on ruby
Finished with analysis on ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all there is to it. You can keep running your &lt;code&gt;idea_analyzer.rb&lt;/code&gt;
and the worker will keep analyzing words. Here is a visual workflow of
this little system that may help clarify the different roles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/resque_workflow.jpg&#34; alt=&#34;resque_workflow&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We have a fast running program that queues work for later. We have a
simple class that performs a time-consuming job, managed by a
long-running Resque worker. We also have a web interface to monitor our
queues and workers. These are the building blocks used by large-scale
web sites like &lt;a href=&#34;http://github.com/&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;http://madmimi.com/&#34;&gt;Mad
Mimi&lt;/a&gt;, and &lt;a href=&#34;http://groupon.com/&#34;&gt;Groupon&lt;/a&gt;, who
leverage Resque for their mission critical background processing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable. Feel free to ask questions and
give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do also read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/03/do-you-understand-rubys-objects-messages-and-blocks/&#34;&gt;Do You Understand Ruby’s Objects, Messages and Blocks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/02/how-does-one-use-design-patterns-in-ruby/&#34;&gt;How Does One Use Design Patterns In Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/26/do-you-know-whats-new-in-ruby-1-9/&#34;&gt;Do you know what’s new in Ruby 1.9?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/25/the-value-of-a-personal-bug-log/&#34;&gt;The value of a personal bug log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/18/do-you-enjoy-your-code-quality/&#34;&gt;Do You Enjoy Your Code Quality?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Do You Enjoy Your Code Quality?</title>
      <link>http://rubylearning.com/2010/10/18/do-you-enjoy-your-code-quality/</link>
      <pubDate>Mon, 18 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/10/18/do-you-enjoy-your-code-quality/</guid>
      <description>

&lt;p&gt;This guest post is by &lt;strong&gt;James Schorr&lt;/strong&gt;, who has been developing software
since 1999. He is the owner of an IT consulting company, &lt;a href=&#34;https://enspirenconsulting.com&#34;&gt;Enspiren IT
Consulting, LLC&lt;/a&gt;.  He lives with his
lovely wife, Tara, and their children in Kansas City, Missouri. James
spends a lot of time writing code in many languages, doing IT security
audits, and has a passion for Ruby on Rails in particular. He also loves
spending time with his family, playing chess, going to the shooting
range, hiking, fishing, and investing. His professional profile is
on &lt;a href=&#34;http://www.linkedin.com/in/jamesschorr&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/James_Schorr.png&#34; alt=&#34;James M. Schorr&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;do-you-enjoy-your-code-quaility:ccc71b4b036a00839a660d9060addc1d&#34;&gt;Do You Enjoy Your Code Quaility?&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s something innately satisfying about programming; or, at least,
there should be. It&amp;rsquo;s a creative act in and of itself that has
incredible power and potential to affect change. Craftsmanship, in and
of itself, typically attracts those who like to think outside the box
and those who like to create. In this way, it really is more of an art
than anything else and can produce a great deal of satisfaction and
delight.&lt;/p&gt;

&lt;p&gt;Compare the carpenter that hand-crafts a beautiful cabinet to a factory
worker who pushes buttons to cause a machine to form identical cabinets
over and over again. While both can experience a measure of satisfaction
in their work, only the carpenter enjoys long-term satisfaction. The
goal of this article is to enable you to improve code quality and, thus,
transform the mundane into the beautiful. No matter where you&amp;rsquo;re at on
the spectrum, beginner to advanced, there is always room for
improvement. As the code quality improves, your ability to delight in it
and enjoy what you&amp;rsquo;re doing does as well.&lt;/p&gt;

&lt;p&gt;I have a number of applications in Production and have learned a lot
over the years about the code quality, systems, and programming in
general. I&amp;rsquo;ve also been regularly called on to carefully check a
tremendous amount of others&amp;rsquo; source code in my consulting business and
earlier jobs. Here are some practical, real-world ways to improve your
code quality and development habits in general. I have learned the hard
way on a few of these. Some may only apply to the non-employee
developer, but almost all are pretty universal:&lt;/p&gt;

&lt;h2 id=&#34;pre-development:ccc71b4b036a00839a660d9060addc1d&#34;&gt;Pre-Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gather the requirements and &amp;ldquo;stories&amp;rdquo; from the client. I like the
idea of stories better because it&amp;rsquo;s more in line with how the
non-developer thinks. In other words, &amp;ldquo;I want A to happen as a B
when I do C&amp;rdquo;. Make sure that those you&amp;rsquo;re meeting with are told to
come prepared with as much information as possible, especially from
the end users of the planned application.&lt;/li&gt;
&lt;li&gt;Question every need and distill them down by asking &amp;ldquo;Why?&amp;rdquo; In
general, the requirements of users are based on what they know the
possibilities are and what they&amp;rsquo;ve used before. You, however, may
quickly see that a need is better met a different way, or even cause
issues if fulfilled.&lt;/li&gt;
&lt;li&gt;Clarify what is necessary and &amp;ldquo;nice-to-have&amp;rdquo;, as this has a direct
impact on the timeline and budget.&lt;/li&gt;
&lt;li&gt;Refuse to reproduce lousy software. In other words, turn down work,
if necessary, that will need you to reproduce some other system that
wasn&amp;rsquo;t designed well unless you&amp;rsquo;re given the freedom to do it right.
It&amp;rsquo;s just not worth it, both for you or the users. How do you
recognize lousy software? Look at the UI, speed, security, and
stability; would you want to use it?&lt;/li&gt;
&lt;li&gt;Reject unrealistic timelines nicely, &amp;ldquo;Yes, I could do this in 3
months, but you won&amp;rsquo;t get the quality that you deserve. To do this
right, we need 5 months.&amp;rdquo; Stick to your deadlines if possible. Ask
yourself, &amp;ldquo;Do I want to work 17-20 hours a day to hit an unrealistic
deadline?&amp;rdquo; Been there, done that, lesson learned.&lt;/li&gt;
&lt;li&gt;Accept the least amount of features for functionality for the first
version. It&amp;rsquo;s far more important to have a stable foundation than a
ton of features. Slate other features for future releases after the
foundation is laid properly. You can expect future needs (and
should), but only include the minimums for the first version or
iteration.&lt;/li&gt;
&lt;li&gt;Realize that just because we &amp;ldquo;can&amp;rdquo; doesn&amp;rsquo;t mean that we &amp;ldquo;should&amp;rdquo;.
Anything&amp;rsquo;s possible, but not everything&amp;rsquo;s advisable. This is a tough
one, especially in the pre-development excitement, brainstorming
phase. For instance, yes we could pull in a Google map for every
row, but should we? How long will the requests take as the data set
size increases?&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t know the answer to &amp;ldquo;Why&amp;rdquo; for a feature and &amp;ldquo;What&amp;rdquo; it
will impact, don&amp;rsquo;t even start answering &amp;ldquo;How&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Ensure that you&amp;rsquo;re using a great version control system (I&amp;rsquo;m partial
to GIT) and a hosted code repository if necessary. Backups are
essential as well.&lt;/li&gt;
&lt;li&gt;Block off large amounts of undivided time to work on the project.
For instance, it&amp;rsquo;s not a good day to write code if you have to leave
every few minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development:ccc71b4b036a00839a660d9060addc1d&#34;&gt;Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Spend as much time as possible understanding the real-world and data
needs of the client before writing &lt;em&gt;any&lt;/em&gt; code. This is absolutely
&lt;em&gt;critical&lt;/em&gt; to make sure that your application is designed from the
ground as a stable, relevant application. Don&amp;rsquo;t move forward until
you think that you have a pretty good grasp of the needs; get help
if you need to.&lt;/li&gt;
&lt;li&gt;Out-engineer user-error as much as possible. In other words, never
trust that the user will do what you expect, especially when
entering data. For instance, about 4 years ago, I was reviewing a
proposed payroll-entry system software for a Fortune-500 company.
The software trusted the user to enter the number of their
dependents properly for tax deduction purposes. When I questioned
the developer, &amp;ldquo;What if someone enters a negative number?&amp;rdquo;, his face
grew pale. We found that an employee would end up with a raise,
instead of a deduction! Ouch.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t reinvent the wheel. For instance, it makes no sense to develop
your own login system for Ruby on Rails when there are great ones
already out there that have run through a gauntlet in the
real-world.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t implement &lt;em&gt;anything&lt;/em&gt; unless you understand, as much as time
allows, what you&amp;rsquo;re &amp;ldquo;plugging in&amp;rdquo;. Read the issues reported, read
through the source code, and familiarize yourself with how it works.
Don&amp;rsquo;t choose something merely because 3 people recommended it in
some forum. I&amp;rsquo;ve seen this often: a developer quickly slaps in a 3rd
party open source app or gem and a few months later, there&amp;rsquo;s an
issue that they do not know how to resolve. Usually it&amp;rsquo;s because
they thought they&amp;rsquo;d found a quick fix, without thinking about any
future issues. Perhaps the worst example that I&amp;rsquo;ve seen is
hot-linking to Javascript code on a website somewhere, in blind
trust that the link will stay live.&lt;/li&gt;
&lt;li&gt;Be open to including other languages and technologies where
appropriate. For instance, just because your app is written in Ruby,
if a Perl or Python is better suited for a certain backend feature,
it may be good to use it. Even if you don&amp;rsquo;t integrate it, reading
through it can help you see a better way to solve an issue at hand.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t do in code what your database can already do, as this will cut
down the speed quite a bit. For instance, why use &lt;code&gt;Date&lt;/code&gt; in Ruby in
a SQL query on a MySQL-backed application when MySQL&amp;rsquo;s
&lt;code&gt;CURRENT_DATE()&lt;/code&gt; will work fine (and faster)? In other words, know
the capabilities of the technologies that you&amp;rsquo;re using.&lt;/li&gt;
&lt;li&gt;Avoid including &amp;ldquo;experimental&amp;rdquo; or &amp;ldquo;cutting-edge&amp;rdquo; features in your
project if possible. While fun, the risk of issues just isn&amp;rsquo;t worth
it unless your project is just a learning exercise.&lt;/li&gt;
&lt;li&gt;Communicate what you need to keep the client in the loop. That being
said, too much communication about every little snag and solution
will only frustrate them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;post-development:ccc71b4b036a00839a660d9060addc1d&#34;&gt;Post-Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Review your code for speed, stability, security, and usability.&lt;/li&gt;
&lt;li&gt;Have someone else review it or discuss it with them.&lt;/li&gt;
&lt;li&gt;Have non-technical people do real-world testing on your product.
You&amp;rsquo;d be surprised at how many things you think are intuitive and
easy that really aren&amp;rsquo;t to an average user.&lt;/li&gt;
&lt;li&gt;Never, ever, ever stop learning, even if it&amp;rsquo;s unrelated to your
current development language of choice.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t be afraid to ask for help. Even the best developers can gain a
lot of insight and knowledge from reading others&amp;rsquo; code and
interacting with others.&lt;/li&gt;
&lt;li&gt;Revisit old code and see what you would&amp;rsquo;ve done differently. Often,
you&amp;rsquo;ll find yourself encouraged as you see how better your code is
now than then.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;enjoying-your-development:ccc71b4b036a00839a660d9060addc1d&#34;&gt;Enjoying Your Development:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How do you work best? In quiet, with music, with lots of lighting,
dim lighting, etc&amp;hellip;? A happy developer is much more likely to produce
quality. Spend some time setting up your work environment the way
that you&amp;rsquo;re most comfortable with. It&amp;rsquo;s amazing how mood-based
programming can be. Improve your mood and you&amp;rsquo;ll improve your code.&lt;/li&gt;
&lt;li&gt;What tool(s) do you like to use? As much as possible, insist on
those tools, &amp;ldquo;Yes, I can write this app in TextEdit or Notepad, but
I can do it better with this \$79 tool X.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Give yourself time to think and rest. There are some days where I
just can&amp;rsquo;t write code well; other days where it&amp;rsquo;s just flowing. This
is due to how your brain functions. You need sleep and a change of
pace and scenery now and then. Schedule breaks if you must and
realize that some days are going to be tough. On tough days, learn
something new.&lt;/li&gt;
&lt;li&gt;Walk away for a while. It&amp;rsquo;s easy to get &amp;ldquo;tunnel vision&amp;rdquo; and think
that you&amp;rsquo;re close to solving a problem and to think that more effort
will solve it. While true at times, I find that it&amp;rsquo;s best to walk
away from the issue at hand for a while and do something completely
different. For example, I tried once for 7 hours to power-through a
complicated area of code and just couldn&amp;rsquo;t get it right. I finally
stopped working on code that day, came back the next day to it, and
solved it in 16 minutes. You would be surprised at the ideas or
solutions that will spring into your mind as you are thinking about
or doing other things.&lt;/li&gt;
&lt;li&gt;Set realistic deadlines. For instance, before telling your client or
boss that this will be done next Friday, add a week. You never know
what issues you might hit and will find yourself, more often than
not, very grateful for the extra time to get it done right. If you
end early, you&amp;rsquo;re a hero!&lt;/li&gt;
&lt;li&gt;Remember, you&amp;rsquo;re a person, not a robot. In other words, you deserve
time to eat, sleep, get away, etc&amp;hellip; When necessary, remind others
nicely.&lt;/li&gt;
&lt;li&gt;Know your limits and enforce them. In other words, &amp;ldquo;No, I can&amp;rsquo;t and
won&amp;rsquo;t recreate Gmail.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the work quality improves, it will stand out and you will be called
upon more and more to help others, do other projects, etc&amp;hellip; As your level
of expertise grows, help others by tactfully pointing out improvements,
respecting them, and encouraging them. In doing so, you will find
yourself enjoying the quality of your work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable. Feel free to ask questions and
give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do YOU know Ruby&#39;s &#34;Chainsaw&#34; method?</title>
      <link>http://rubylearning.com/2010/10/07/do-you-know-rubys-chainsaw-method/</link>
      <pubDate>Thu, 07 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/10/07/do-you-know-rubys-chainsaw-method/</guid>
      <description>

&lt;p&gt;This guest post is contributed by &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/07/01/interview-author-paolo-perrotta/&#34;&gt;Paolo
Perrotta&lt;/a&gt;&lt;/strong&gt;,
a freelance geek, currently coaching agile teams for a large phone
company. He also wrotes the &lt;a href=&#34;http://www.pragprog.com/titles/ppmetr/metaprogramming-ruby&#34;&gt;Metaprogramming Ruby
book&lt;/a&gt; for
the Prags. He lives in Northern Italy with his girlfriend and a cat. He
loves Ruby.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;method_missing()&lt;/code&gt; method is a wonderful tool for every Ruby
programmer. I love it. There, I said it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/method_missing.jpg&#34; alt=&#34;method\_missing&#34; /&gt;
\
method_missing()&lt;/p&gt;

&lt;h2 id=&#34;do-you-know-ruby-s-chainsaw-method:d276d432026676e32611cf594066bd91&#34;&gt;Do YOU know Ruby&amp;rsquo;s &amp;lsquo;Chainsaw&amp;rsquo; method?&lt;/h2&gt;

&lt;p&gt;Some Rubyists &lt;a href=&#34;http://jakescruggs.blogspot.com/2010/08/ruby-kaigi-2010-day-2.html&#34;&gt;are
surprised&lt;/a&gt;
when I declare my love for &lt;code&gt;method_missing()&lt;/code&gt;. They do have a point. As
far as tools go, &lt;code&gt;method_missing()&lt;/code&gt; is a chainsaw: it&amp;rsquo;s powerful, but
it&amp;rsquo;s also potentially dangerous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/PaoloPerrotta.jpg&#34; alt=&#34;Paolo
Perrotta&#34; title=&#34;Paolo Perrotta&#34; /&gt;

In case you don&amp;rsquo;t know about &lt;code&gt;method_missing()&lt;/code&gt;, here is how it works.
Imagine that you&amp;rsquo;re calling a method on a Ruby object. For example, you
call &lt;code&gt;duck.sing(&amp;quot;Quacking in the Rain&amp;quot;)&lt;/code&gt;. Usually, at this point one of
two things happens: if &lt;code&gt;duck&lt;/code&gt; has a &lt;code&gt;sing()&lt;/code&gt; method that takes one
argument, then Ruby executes the method; if &lt;code&gt;duck&lt;/code&gt; doesn&amp;rsquo;t have that
method, then Ruby raises an error. But wait: there is a third
possibility. If &lt;code&gt;duck&lt;/code&gt;doesn&amp;rsquo;t have a method named &lt;code&gt;sing()&lt;/code&gt;, but it does
have a method named &lt;code&gt;method_missing()&lt;/code&gt;, then Ruby executes
&lt;code&gt;method_missing()&lt;/code&gt; instead. Ruby also tells to &lt;code&gt;method_missing()&lt;/code&gt; which
method you originally called, with arguments and all. Here is an
example:&lt;/p&gt;

&lt;p&gt;You can say that &lt;code&gt;duck.sing()&lt;/code&gt; and &lt;code&gt;duck.dance()&lt;/code&gt; are &lt;a href=&#34;http://gist.github.com/534776&#34;&gt;Ghost
Methods&lt;/a&gt;: they aren&amp;rsquo;t defined anywhere,
but you can call them anyway.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what &lt;code&gt;method_missing()&lt;/code&gt;does. The difficult part is deciding when
and how to use it. Let&amp;rsquo;s see an example of Ghost Methods in action.&lt;/p&gt;

&lt;p&gt;Imagine that you have an &lt;code&gt;InformationDesk&lt;/code&gt; object with many complex
methods that provide some kind of tourist information or service:&lt;/p&gt;

&lt;p&gt;To give a break to people working at the &lt;code&gt;InformationDesk&lt;/code&gt;, you can wrap
the &lt;code&gt;InformationDesk&lt;/code&gt; in a &lt;code&gt;DoNotDisturb&lt;/code&gt; object:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DoNotDisturb&lt;/code&gt; forwards method calls to the wrapped &lt;code&gt;InformationDesk&lt;/code&gt;,
unless it&amp;rsquo;s lunchtime. During lunch breaks, &lt;code&gt;DoNotDisturb&lt;/code&gt; responds to
calls by raising an exception &amp;ndash; unless you&amp;rsquo;re calling &lt;code&gt;emergency()&lt;/code&gt;,
that works at any hour. (If you think that two hours are too much for a
lunch, then you&amp;rsquo;ve probably never lived in Italy!)&lt;/p&gt;

&lt;p&gt;The problem with the above code is that &lt;code&gt;DoNotDisturb&lt;/code&gt; contains a lot of
look-alike methods. This is a form of duplication, and duplication
sucks. If a programmer adds methods to &lt;code&gt;InformationDesk&lt;/code&gt;, she also needs
to remember to add matching methods to &lt;code&gt;DoNotDisturb&lt;/code&gt;, most likely by
copy-pasting the existing look-alike methods and then modifying them.
One misstep in this procedure, and you have a brand new bug.&lt;/p&gt;

&lt;p&gt;When I work with Java or C#, I accept this kind of code duplication as
a fact of life. In Ruby, I can be more aggressive and replace all the
calls with a single &lt;code&gt;method_missing()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DoNotDisturb&lt;/code&gt; is now a &lt;a href=&#34;http://gist.github.com/535077&#34;&gt;Dynamic Proxy&lt;/a&gt;:
it forwards each method call to its inner &lt;code&gt;InformationDesk&lt;/code&gt;, and it also
wraps additional logic around each call. If you add methods to
&lt;code&gt;InformationDesk&lt;/code&gt;, you needn&amp;rsquo;t worry about &lt;code&gt;DoNotDisturb&lt;/code&gt;: it will work
for the new methods without any change.&lt;/p&gt;

&lt;p&gt;This kind of trickery is useful, but it does have a dark side. If you
abuse &lt;code&gt;method_missing()&lt;/code&gt;, you can end up with code that&amp;rsquo;s difficult to
read and maintain. I&amp;rsquo;m still intimidated by some of &lt;a href=&#34;http://github.com/rails/rails/blob/277c799d58be4b3e0e885d7b3fd6d954facc111b/activerecord/lib/active_record/base.rb&#34;&gt;the wildest
examples of
&lt;code&gt;method_missing()&lt;/code&gt;&lt;/a&gt;
that abound the Ruby ecosystem. Even if you take care to keep your
&lt;code&gt;method_missing()&lt;/code&gt;small and maintainable, Ghost Methods are still
inherently less explicit than regular methods. You can easily discover
the regular methods in a class by looking at the auto-generated
documentation, but you have to look at the source code (or the author&amp;rsquo;s
documentation) to spot Ghost Methods.&lt;/p&gt;

&lt;p&gt;Also, if you&amp;rsquo;re not careful around &lt;code&gt;method_missing()&lt;/code&gt;, sneaky bugs can
creep into your code. For example, an overly tolerant &lt;code&gt;method_missing()&lt;/code&gt;
might accept a mistyped method call without flinching. Chainsaws are
meant to be handled with care!&lt;/p&gt;

&lt;p&gt;So, what kind of tree should you use the&lt;code&gt;method_missing()&lt;/code&gt; chainsaw on?
Here are my simple rules of thumb:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I &lt;strong&gt;use &lt;code&gt;method_missing()&lt;/code&gt;to remove duplication&lt;/strong&gt;. A well placed
&lt;code&gt;method_missing()&lt;/code&gt; allows me to remove duplicated code at a level
that wouldn&amp;rsquo;t otherwise be possible.&lt;/li&gt;
&lt;li&gt;On the other hand, I usually &lt;strong&gt;think twice about using
&lt;code&gt;method_missing()&lt;/code&gt; for cosmetic reasons&lt;/strong&gt;, like getting cool method
names such as &lt;code&gt;find_by_name_and_address()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I always try to &lt;strong&gt;evaluate whether &lt;code&gt;method_missing()&lt;/code&gt; is worth the
extra reading effort&lt;/strong&gt;. I dislike duplicated code because it&amp;rsquo;s hard
to read and modify. If I replace that code with a &lt;code&gt;method_missing()&lt;/code&gt;
that&amp;rsquo;s even harder to read and modify, then I&amp;rsquo;ve defeated
&lt;code&gt;method_missing()&lt;/code&gt;&amp;rsquo;s purpose.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;rsquo;s a balancing act: with some experience you can strike the sweet spot
between shortness and clarity in your Ruby code. To do that, you&amp;rsquo;ll
likely use the &lt;code&gt;method_missing()&lt;/code&gt; chainsaw to cut out unnecessary
branches from your forest of methods.&lt;/p&gt;

&lt;p&gt;There are many more neat tricks, caveats and interesting details around
&lt;code&gt;method_missing()&lt;/code&gt;. In &lt;a href=&#34;http://www.amazon.com/Metaprogramming-Ruby-Program-Like-Pros/dp/1934356476/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1284392039&amp;amp;sr=8-1&#34;&gt;Metaprogramming
Ruby&lt;/a&gt;,
I devoted most of the Methods chapter to it (you can check the first few
pages from that chapter
&lt;a href=&#34;http://media.pragprog.com/titles/ppmetr/methods.pdf&#34;&gt;here&lt;/a&gt;). You can
also find a lot of information on &lt;code&gt;method_missing()&lt;/code&gt; on the Web,
including some &lt;a href=&#34;http://yehudakatz.com/2010/01/02/the-craziest-fing-bug-ive-ever-seen/&#34;&gt;pretty crazy bug
reports&lt;/a&gt;.
With this information, and some experience, you&amp;rsquo;ll be able to make up
your own mind about the pros and cons of &lt;code&gt;method_missing()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Me, I already made up my mind. Yes, I use &lt;code&gt;method_missing()&lt;/code&gt; sparingly.
Yes, I keep it as short as I can. Yeah, I triple-check it for bugs&amp;hellip; But
when the duplication begins to sting, I put on my evil grin and grab my
faithful chainsaw.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have &lt;strong&gt;you&lt;/strong&gt; used &lt;code&gt;method_missing()&lt;/code&gt; before? Why don&amp;rsquo;t you share your
experiences with us? Let us know in the comments section of this post.
Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post supported by &lt;a href=&#34;http://tupalo.com/&#34;&gt;Tupalo.com&lt;/a&gt;&lt;/em&gt;:&lt;/strong&gt; Tupalo.com is
a privately-held internet startup located in Vienna, Austria. Their
social yellow-pages app is developed using Ruby on Rails and also uses
many of the other exciting tools like Cucumber, RSpec, Capistrano and
Puppet, Ruby developers came to appreciate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/06/gem-sawyer-modern-day-ruby-warrior/&#34;&gt;Gem Sawyer, Modern Day Ruby
Warrior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/05/outside-in-development/&#34;&gt;An Introduction to Outside-in
Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/04/ruby-forensics/&#34;&gt;Ruby
Forensics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/01/an-introduction-to-eventmachine-and-how-to-avoid-callback-spaghetti/&#34;&gt;An introduction to eventmachine, and how to avoid callback
spaghetti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/30/the-testing-mindset/&#34;&gt;The Testing
Mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/29/an-introduction-to-desktop-apps-with-ruby/&#34;&gt;An Introduction to Desktop Apps with
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/28/the-ruby-movement/&#34;&gt;The Ruby
movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/27/almost-everything-is-an-object-and-everything-is-almost-an-object/&#34;&gt;Almost everything is an object (and everything is almost an
object!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/24/so-youre-new-to-ruby/&#34;&gt;So&amp;hellip; you&amp;rsquo;re new to
Ruby!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/23/incorporating-web-apis-to-spark-computer-programming-exercises/&#34;&gt;Incorporating Web APIs to spark computer programming
exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/22/14-ways-to-have-fun-coding-ruby/&#34;&gt;14 Ways To Have Fun Coding
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/21/writing-modular-web-applications-with-rack/&#34;&gt;Writing modular web applications with
Rack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/20/how-to-learn-ruby-or-any-programming-language/&#34;&gt;How to Learn Ruby (or any programming
language)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to Outside-in Development</title>
      <link>http://rubylearning.com/2010/10/05/an-introduction-to-outside-in-development/</link>
      <pubDate>Tue, 05 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/10/05/an-introduction-to-outside-in-development/</guid>
      <description>

&lt;p&gt;This guest post is contributed by &lt;strong&gt;Harold Giménez&lt;/strong&gt;, who is a web
developer with the crew at &lt;a href=&#34;http://thoughtbot.com/&#34;&gt;thoughtbot&lt;/a&gt;, where
he spends his days working with Rails and writing open source software.
He&amp;rsquo;s also involved with thoughtbot&amp;rsquo;s
&lt;a href=&#34;http://workshops.thoughtbot.com/&#34;&gt;workshops&lt;/a&gt;, which is a great way to
dig deeper into subjects like test-driven Rails development. Follow
Harold on twitter at &lt;a href=&#34;http://twitter.com/hgimenez&#34;&gt;@hgimenez&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/harold-125x125.jpg&#34; alt=&#34;Harold Giménez&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;an-introduction-to-outside-in-development:2904bb9809ed1041d185d8198fa84029&#34;&gt;An Introduction to Outside-in Development&lt;/h2&gt;

&lt;p&gt;Outside-in Development is a software development methodology that
focuses on providing value to the product&amp;rsquo;s users and stakeholders.
Cucumber is a BDD tool that supports Outside-in development by running
plain text features or user stories as acceptance tests. Well written
user stories state clearly their business value, and help developers
bring themselves out of the software developer role and into the user
role, where we can get a more realistic overview of the application&amp;rsquo;s
interface and general flow. This leads to more cohesive and simpler
software, because you write the simplest amount of code that satisifies
a user story, and you often review the application as a user. Outside-in
along with the test-driven process helps you write just the minimum
amount of code that provides value to stakeholders, and not a line more.&lt;/p&gt;

&lt;p&gt;While still great and recommended, reading much theory and praise about
outside-in is not as effective as actually trying it and seeing it in
action. We will write the beginnings of &lt;strong&gt;twiddr&lt;/strong&gt;, a small twitter
clone in Rails 3 using the outside-in process. Our testing arsenal will
consist of the following excellent Ruby libraries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cucumber: A plain text story runner.&lt;/li&gt;
&lt;li&gt;RSpec: A BDD framework for Ruby.&lt;/li&gt;
&lt;li&gt;Factory Girl: A fixture replacement framework.&lt;/li&gt;
&lt;li&gt;Shoulda: A set of RSpec matchers, among other things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will explain in more detail how these frameworks work together as we
start developing the application. To get started quickly, we will use
&lt;a href=&#34;http://github.com/thoughtbot/suspenders&#34;&gt;suspenders&lt;/a&gt; to create an
application with all of our tools installed and configured. Since this
is a Rails 3 application, we will use the beta version of suspenders.
Install it by running &lt;code&gt;gem install suspenders --pre&lt;/code&gt;. Now that
suspenders is installed, we can bootstrap twiddr with
&lt;code&gt;suspenders create twiddr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, we have a twiddr application including authentication
with &lt;a href=&#34;http://github.com/thoughtbot/clearance&#34;&gt;clearance&lt;/a&gt;, a simple Rails
authentication solution with email and password. Clearance also includes
cucumber features that you can view in the &lt;code&gt;features&lt;/code&gt; directory. Let&amp;rsquo;s
run them right now by running &lt;code&gt;rake db:migrate&lt;/code&gt; to create the users
table, &lt;code&gt;script/rails generate clearance_views&lt;/code&gt; to generate clearance
views with &lt;a href=&#34;http://github.com/justinfrench/formtastic&#34;&gt;formtastic&lt;/a&gt;, and
&lt;code&gt;rake&lt;/code&gt; to run all specs and features. You should see a very satisfying
series of green dots appear on your terminal, along with &amp;ldquo;0 Failures&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create our first feature. The anatomy of a feature is the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In order to [business value]
As a [role]
I want to [some action]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how a feature includes who, what and most importantly: &lt;em&gt;why&lt;/em&gt;. Our
first feature could look something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Users have a twiddr login name
  In order to mention other twiddr users by login name
  As a twiddr user
  I can pick a login name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There will be many scenarios accompanying this feature. Scenarios will
follow the four stages of testing: setup, exercise, verify and teardown.
Let&amp;rsquo;s write a few scenarios that come to mind. A simple scenario looks
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given [context]
When I do [action]
Then I should see [outcome]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Given&lt;/code&gt; step is where you set up the context of your scenario. Every
scenario starts with a blank slate, so it is important to create a state
in your application for example by creating data in the database, or by
navigating to a specific page. The &lt;code&gt;When&lt;/code&gt; step is where you exercise the
application in order to accomplish what needs testing. In the case of a
web app like twiddr, this is usually where you fill in forms, press
buttons, click links, or otherwise interact with the system in some way.
Finally, the &lt;code&gt;Then&lt;/code&gt; step is where you verify the result, and it&amp;rsquo;s where
we check that the correct pages are rendered, that we see a success or
error message, or anything that could help us verify that the prior
action was successful. As we move along with creating our own features,
this will become much clearer.&lt;/p&gt;

&lt;p&gt;The final stage of testing, &lt;code&gt;teardown&lt;/code&gt;, is taken care of by cucumber
automatically. It refers to clearing out the state of the system so that
there are no nasty leftovers from one test to the next. In most cases,
this means deleting all data from the database.&lt;/p&gt;

&lt;p&gt;Back to developing our app, we already have authentication set up in the
application via clearance, but there is value in also having a twiddr
login, so let&amp;rsquo;s go ahead and add that functionality to user model. To
get started, we can work off of the clearance sign up scenarios that you
can find in &lt;code&gt;features/sign_up.feature&lt;/code&gt;. Let&amp;rsquo;s modify the scenario titled
&amp;ldquo;User signs up with valid data&amp;rdquo; and add a step where the user fills in
their twiddr name. The step definition ends up looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: User signs up with valid data
  When I go to the sign up page
  And I fill in &amp;quot;Email&amp;quot; with &amp;quot;email@person.com&amp;quot;
  And I fill in &amp;quot;Twiddr name&amp;quot; with &amp;quot;user&amp;quot;
  And I fill in &amp;quot;Password&amp;quot; with &amp;quot;password&amp;quot;
  And I fill in &amp;quot;Confirm password&amp;quot; with &amp;quot;password&amp;quot;
  And I press &amp;quot;Sign up&amp;quot;
  Then I should see &amp;quot;instructions for confirming&amp;quot;
  And a confirmation message should be sent to &amp;quot;email@person.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is executable code. Cucumber uses regular expressions to match
the plain text features and executes the resulting step definitions.
Finally, note that each of these stages of a cucumber feature can have
many steps: by adding more steps starting with &lt;code&gt;And&lt;/code&gt;, we can create more
complex contexts (Given/And), actions (When/And) or outcomes (Then/And).&lt;/p&gt;

&lt;p&gt;At this point it is worth viewing the step definitions provided by
Capybara if you haven&amp;rsquo;t already. They can be found in
&lt;code&gt;features/step_definitions/web_steps.rb&lt;/code&gt;, and have definitions for most
web interactions like &lt;code&gt;I go to...&lt;/code&gt;, &lt;code&gt;I fill in...&lt;/code&gt;, or &lt;code&gt;I should see...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the new scenario, and watch it fail:&lt;/p&gt;

&lt;p&gt;\$ bundle exec cucumber features/sign_up.feature&lt;/p&gt;

&lt;p&gt;The output will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;........F-----.................

(::) failed steps (::)

cannot fill in, no text field, text area or password field with id, name, or label &#39;Twiddr name&#39; found (Capybara::ElementNotFound)
./features/step_definitions/web_steps.rb:41
./features/step_definitions/web_steps.rb:14:in `with_scope&#39;
./features/step_definitions/web_steps.rb:40:in `/^(?:|I )fill in &amp;quot;([^&amp;quot;]*)&amp;quot; with &amp;quot;([^&amp;quot;]*)&amp;quot;(?: within &amp;quot;([^&amp;quot;]*)&amp;quot;)?$/&#39;
features/sign_up.feature:17:in `And I fill in &amp;quot;Twiddr name&amp;quot; with &amp;quot;user&amp;quot;&#39;

Failing Scenarios:
cucumber features/sign_up.feature:14 # Scenario: User signs up with valid data

5 scenarios (1 failed, 4 passed)
31 steps (1 failed, 5 skipped, 25 passed)
0m0.852s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error message tells us that the text field labeled &amp;ldquo;Twiddr name&amp;rdquo; was
not found on the form, which is exactly what we were expecting. Cucumber
is also telling us what to do next: Add a Twiddr name input field to the
user signup form. To do that, open up &lt;code&gt;app/views/users/_inputs.html.erb&lt;/code&gt;
and add a line to include the :twiddr_name input. It should look like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= form.inputs do %&amp;gt;
  &amp;lt;%= form.input :email %&amp;gt;
  &amp;lt;%= form.input :twiddr_name %&amp;gt;
  &amp;lt;%= form.input :password %&amp;gt;
  &amp;lt;%= form.input :password_confirmation, :label =&amp;gt; &amp;quot;Confirm password&amp;quot; %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Part of the outside-in process is to only write the simplest amount of
code that could make the test pass, and not a line more. At this point
you may be tempted to go on with implementing the twiddr_name
functionality, but it&amp;rsquo;s important to contain your fingers from typing
any further, and instead rerun the feature to see what the next step
should be.&lt;/p&gt;

&lt;p&gt;Rerunning the feature now shows that not only does our scenario not
pass, but we&amp;rsquo;ve also broken a different scenario. Don&amp;rsquo;t panic! All
scenarios that display this form are now broken because the &lt;code&gt;User&lt;/code&gt; model
doesn&amp;rsquo;t have a &lt;code&gt;twiddr_name&lt;/code&gt; attribute. To add it, we create a database
migration. On your terminal, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./script/rails generate migration add_twiddr_name_to_users twiddr_name:string
$ rake db:migrate &amp;amp;&amp;amp; rake db:test:prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will add a column called &lt;code&gt;twiddr_name&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt; to the
&lt;code&gt;users&lt;/code&gt; table. Run the scenario once again, and you&amp;rsquo;ll note that we&amp;rsquo;ve
reached a clean build: all tests pass. We should add some more behavior
around our new &lt;code&gt;twiddr_name&lt;/code&gt;. For example, we probably want to require
that new users enter a twiddr_name when signing up to the site. We can
add a scenario that tests for that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: User tries to sign up without a twiddr name
  When I go to the sign up page
  And I fill in &amp;quot;Email&amp;quot; with &amp;quot;email@person.com&amp;quot;
  And I fill in &amp;quot;Password&amp;quot; with &amp;quot;password&amp;quot;
  And I fill in &amp;quot;Confirm password&amp;quot; with &amp;quot;password&amp;quot;
  And I press &amp;quot;Sign up&amp;quot;
  Then the &amp;quot;Twiddr name&amp;quot; field should have the &amp;quot;can&#39;t be blank&amp;quot; error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the scenario, and you will note that the last step is not defined.
Cucumber will even print out a starting point for the step definition.
Copy the provided template and paste it in a new file called
&lt;code&gt;features/step_definitions/form_error_steps.rb&lt;/code&gt;. The definition of this
step will use CSS selectors to verify that the field contains the
expected error message, based on the markup generated by formtastic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Then /^the &amp;quot;([^&amp;quot;]*)&amp;quot; field should have the &amp;quot;([^&amp;quot;]*)&amp;quot; error$/ do |field_label, error_message|
  within(&#39;form li&#39;) do
    page.should have_css(&amp;quot;label:contains(&#39;#{field_label}&#39;) ~ p.inline-errors&amp;quot;, :text =&amp;gt; error_message)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dropping that into the &lt;code&gt;form_error_steps.rb&lt;/code&gt; will allow us to move
forward with our scenario: It fails because we don&amp;rsquo;t have any
validations on &lt;code&gt;twiddr_name&lt;/code&gt;. We want to always make sure that
&lt;code&gt;twiddr_name&lt;/code&gt; is present. Let&amp;rsquo;s drop to the model spec level to specify
this new behavior. Create a file called &lt;code&gt;spec/models/user_spec.rb&lt;/code&gt; and
let&amp;rsquo;s specify this requirement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;spec_helper&#39;

describe User, &#39;valid&#39; do
  it { should validate_presence_of :twiddr_name }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;validate_presence_of&lt;/code&gt; method is a
&lt;a href=&#34;http://github.com/thoughtbot/shoulda&#34;&gt;shoulda&lt;/a&gt; matcher. There are a ton
of useful matchers. For other active record matcher examples, please
refer to &lt;a href=&#34;http://rdoc.info/github/thoughtbot/shoulda/master/Shoulda/ActiveRecord/Matchers&#34;&gt;the
documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, watch it fail by running
&lt;code&gt;bundle exec rspec spec/models/user_spec.rb&lt;/code&gt;. To make it pass, we open
up &lt;code&gt;app/models/user.rb&lt;/code&gt; and add the one required validation line:
&lt;code&gt;validates_presence_of :twiddr_name&lt;/code&gt;. Running the spec again will reveal
that we&amp;rsquo;re once again green. Now we can return back up to the cucumber
level by rerunning our feature:
&lt;code&gt;bundle exec cucumber features/sign_up.feature&lt;/code&gt;. This time we notice
that the feature we are developing is passing, but we broke a few other
features because of invalid users being created, which brings us to
another aspect of testing: &lt;code&gt;factories&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During testing it is very often required to generate setup data to
create context for the test. One great way to manage that is by using a
factory library, where we define a few factory templates, and then we
ask the factory to create instances of those objects to either get a
hold of them in a variable or store them in the database. It then
becomes trivial to get a hold of valid instances of models in your
application, which is very useful for setting up a test&amp;rsquo;s context. In
this application, we are using
&lt;a href=&#34;http://github.com/thoughtbot/factory_girl&#34;&gt;factory_girl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s breaking in the above feature is that the user factory is not
including &lt;code&gt;:twiddr_name&lt;/code&gt; when it generates objects. Therefore it is
creating invalid objects, and ActiveRecord is rightfully raising an
error. The fix in this case is to add the new required attribute to the
user factory, found in &lt;code&gt;spec/factories/clearance.rb&lt;/code&gt;. In that file, the
user factory definition could look like so (we simply use the email to
create a twiddr_name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Factory.define :user do |user|
  user.email                 { Factory.next :email }
  user.password              { &amp;quot;password&amp;quot; }
  user.password_confirmation { &amp;quot;password&amp;quot; }
  user.twiddr_name           { |u| u.email.split(&amp;quot;@&amp;quot;).first }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we once again have a green build. We can move on to
another feature (save the following in
&lt;code&gt;features/user_views_profiles.feature&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: user profiles
  In order to see if I&#39;m interested in following other users
  As a twiddr user
  I can see other user&#39;s profiles

  Scenario: View a user&#39;s profile
    Given the following email confirmed user exists:
      | twiddr_name | email                |
      | hgimenez    | hgimenez@example.com |
    Given I have signed in with &amp;quot;me@example.com/test&amp;quot;
    When I go to the profile page for &amp;quot;hgimenez&amp;quot;
    Then I should see &amp;quot;hgimenez&amp;quot; within &amp;quot;div.twiddr_name&amp;quot;
    And I should see &amp;quot;hgimenez@example.com&amp;quot; within &amp;quot;div.email&amp;quot;
    And I should see &amp;quot;Follow&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the first setup step in the above scenario: &amp;ldquo;Given the following
email confirmed user exists:&amp;rdquo; followed by a table. Furthermore, if you
run this scenario you will notice that that step passes even though we
haven&amp;rsquo;t written a step definition for it. What&amp;rsquo;s going on here is that
Factory Girl conveniently creates step definitions for all of our
factories, making it very easy to create the data required to provide
some context for your tests. In the above example, &amp;ldquo;email confirmed
user&amp;rdquo; is the name of a factory defined in &lt;code&gt;spec/factories/clearance.rb&lt;/code&gt;,
and the cucumber
&lt;a href=&#34;http://github.com/aslakhellesoy/cucumber/wiki/multiline-step-arguments&#34;&gt;table&lt;/a&gt;
that follows maps attributes to values for the records you&amp;rsquo;re creating.
It&amp;rsquo;s simpler and therefore recommended to provide values only for the
attributes that you&amp;rsquo;re interested in for this scenario. So in this case,
we really don&amp;rsquo;t care what the user&amp;rsquo;s password is, but we care about the
twiddr name and email because we&amp;rsquo;re verifying them a few lines down.&lt;/p&gt;

&lt;p&gt;When you run this scenario, you will notice that cucumber did not know
how to map &lt;code&gt;the profile page for &amp;quot;hgimenez&amp;quot;&lt;/code&gt; to an actual URL in your
application. To tell cucumber how to do that, we add an entry in
&lt;code&gt;features/support/path.rb&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;when /the profile page for &amp;quot;([^\&amp;quot;]+)&amp;quot;/
  user = User.find_by_twiddr_name!($1)
  user_path(user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using a regular expression to capture the twiddr name provided in
the step definition, and using the captured string to find that user in
the database. On tests it is a good idea to use the &amp;ldquo;dangerous&amp;rdquo; versions
of active record finders (ending with &lt;code&gt;!&lt;/code&gt;), so that if the record is not
found, Active Record will raise a clear error message, making debugging
much easier.&lt;/p&gt;

&lt;p&gt;Adding that entry in &lt;code&gt;features/support/paths.rb&lt;/code&gt; gets us further in that
step definition. That step still fails though, but this time for a
different reason:
&lt;code&gt;The action &#39;show&#39; could not be found for Clearance::UsersController (AbstractController::ActionNotFound)&lt;/code&gt;.
In this case, our users controller does not specify a show action. Since
this is a clearance controller, we can extend it by simply creating a
new controller and inheriting from &lt;code&gt;Clearance::UsersController&lt;/code&gt;. This
will allow us to both create new actions or extend the default ones
provided by clearance. Following cucumber&amp;rsquo;s failure message, our next
step is to create show action on the users controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class UsersController &amp;lt; Clearance::UsersController
  def show
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But even with this in place, cucumber continues to complaint about the
show action being unavailable. It seems like there could be a routing
problem, so let&amp;rsquo;s again move down to the controller spec level and
specify our new route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;spec_helper&#39;

describe UsersController, &#39;routes&#39; do
  it { should route(:get, &#39;users/1&#39;).to(:action =&amp;gt; &#39;show&#39;, :id =&amp;gt; 1) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The spec above is a shoulda &lt;a href=&#34;http://rdoc.info/github/thoughtbot/shoulda/master/Shoulda/ActionController/Matchers&#34;&gt;controller
matcher&lt;/a&gt;.
We have created a new class for the UsersController, and need the user
routes to map to this new class (without the Clearance namespace).
Additionally, clearance has a few nested resources under users that we
will still need. If we look at the clearance routes file, we can pull
out the relevant pieces and include it in our own app&amp;rsquo;s
&lt;code&gt;config/routes.rb&lt;/code&gt;, where we can get rid of the clearance namespace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources :users, :controller =&amp;gt; &#39;users&#39;, :only =&amp;gt; [:show, :create] do
  resource :password,
    :controller =&amp;gt; &#39;clearance/passwords&#39;,
    :only       =&amp;gt; [:create, :edit, :update]

  resource :confirmation,
    :controller =&amp;gt; &#39;clearance/confirmations&#39;,
    :only       =&amp;gt; [:new, :create]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the controller spec again will show that we&amp;rsquo;ve wired up the
routes correctly, and running the entire cucumber suite will show that
we have not broken any of the nested routes that clearance originally
provided. This is just another advantage of having the kind of strong
test coverage that is achieved by BDD, and definitely brings confidence
in the quality of the application you&amp;rsquo;re building: We&amp;rsquo;ve made a somewhat
major refactor, and but we&amp;rsquo;re confident that things are wired up
correctly &lt;em&gt;because our test suite passes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Moving along, we can rerun the feature file, at which point cucumber
complaints that there&amp;rsquo;s no users/show view. Let&amp;rsquo;s create it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;%= @user.twiddr_name -%&amp;gt;&amp;lt;/h2&amp;gt;

&amp;lt;div id=&amp;quot;profile&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;twiddr_name&amp;quot;&amp;gt;&amp;lt;%= @user.twiddr_name -%&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;email&amp;quot;&amp;gt;&amp;lt;%= @user.email -%&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;follow&amp;quot;&amp;gt;Follow&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the feature now reveals that the &lt;code&gt;@user&lt;/code&gt; instance variable is
not set. We can assign this instance variable in the users controller
and try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def show
  @user = User.find(params[:id])
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run rake, and find that all specs and scenarios are passing. We can move
on to following users. In &lt;code&gt;features/user_follows_another_user.feature&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Follow twiddr users
  So that I can see what they have to say
  As a twiddr user
  I can follow other twiddr users

  Scenario: Follow another twiddr user
    Given the following email confirmed user exists:
      | twiddr_name | email           |
      | bob         | bob@example.com |
    And I have signed in with &amp;quot;hgimenez@example.com/test&amp;quot;
    When I go to the profile page for &amp;quot;bob&amp;quot;
    And I press &amp;quot;Follow bob&amp;quot;
    Then I should be on the home page
    And I should see &amp;quot;You are now following bob!&amp;quot;
    And I should see &amp;quot;bob&amp;quot; within &amp;quot;div.following&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first failure message is &amp;ldquo;no button with value or id or text &amp;lsquo;Follow
bob&amp;rsquo; found (Capybara::ElementNotFound)&amp;ldquo;, because the user profile pages
do not have an actual follow button. At this point, we should have some
idea of how we&amp;rsquo;ll implement user following. A clean RESTful way to go
about it is to create a user_follows resource, and to POST to it when a
user wants to follow someone else. Let&amp;rsquo;s add a button that posts to that
resource, in &lt;code&gt;app/views/users/show.html.erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;lt;div id=&amp;quot;profile&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;twiddr_name&amp;quot;&amp;gt;&amp;lt;%= @user.twiddr_name -%&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;email&amp;quot;&amp;gt;&amp;lt;%= @user.email -%&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;follow&amp;quot;&amp;gt;&amp;lt;%= button_to(&amp;quot;Follow #{@user.twiddr_name}&amp;quot;, user_follows_path(@user)) -%&amp;gt; &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rerunning the feature now shows
&lt;code&gt;&amp;quot;undefined method `user&amp;lt;em&amp;gt;follows&amp;lt;/em&amp;gt;path&#39; for #&amp;lt;#&amp;lt;Class:0x103d108e0&amp;gt;:0x103d0a4e0&amp;gt; (ActionView::Template::Error)&amp;quot;&lt;/code&gt;
because there is no &lt;code&gt;user_follows&lt;/code&gt; resource or route yet. This is a good
point to step down into RSpec land while we build this resource. We
create &lt;code&gt;spec/controller/follows_controller_spec.rb&lt;/code&gt; and specify a route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;spec_helper&#39;

describe FollowsController, &#39;routes&#39; do
  it { should route(:post, &#39;/users/1/follows&#39;).to(:action =&amp;gt; &#39;create&#39;, :user_id =&amp;gt; 1) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can now enter BDD cycle. Run the spec with
&lt;code&gt;bundle exec rspec spec/controllers/follows_controller_spec.rb&lt;/code&gt; and we
get the error &lt;code&gt;&amp;quot;uninitialized constant FollowsController (NameError)&amp;quot;&lt;/code&gt;
because we have not created the follows controller. Create it in
&lt;code&gt;app/controllers/follows_controller.rb&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class FollowsController &amp;lt; ApplicationController
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rerunning the spec, we now see &lt;code&gt;No route matches &amp;quot;/users/1/follows&amp;quot;&lt;/code&gt;.
Great, let&amp;rsquo;s add that route nested within the users resource, which now
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources :users, :controller =&amp;gt; &#39;users&#39;, :only =&amp;gt; [:show, :create] do
  resource :password,
    :controller =&amp;gt; &#39;clearance/passwords&#39;,
    :only       =&amp;gt; [:create, :edit, :update]

  resource :confirmation,
    :controller =&amp;gt; &#39;clearance/confirmations&#39;,
    :only       =&amp;gt; [:new, :create]

  resource :follows, :only =&amp;gt; [:create] # add this
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the spec again to get feedback from RSpec: The test passes so the
route is working as we expected. Back on the cucumber level we rerun the
feature which now finds the button and route, but errors on
&lt;code&gt;&amp;quot;The action &#39;create&#39; could not be found for FollowsController (AbstractController::ActionNotFound)&amp;quot;&lt;/code&gt;.
Time to bring the follows controller to life with the create action.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s specify the controller behavior in RSpec. We want only signed in
users to be able to hit this action, so let&amp;rsquo;s spec that out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe FollowsController, &#39;POST to create without authenticating&#39; do
  before do
    post :create, :user_id =&amp;gt; 1
  end
  it { should redirect_to(sign_in_path) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test makes sure that we redirect to the sign in path if no user is
authenticated. To make it pass, we simply add
&lt;code&gt;before_filter :authenticate&lt;/code&gt; to our controller. Now on to the more
details about the create action: We want to verify that the signed in
user ends up following the provided user when the action runs.&lt;/p&gt;

&lt;p&gt;In spec&amp;rsquo;s setup we create two users, we simulate authenticating by
assigning controller&amp;rsquo;s the current_user, and we exercise the controller
by invoking a POST to create. We then verify two things: that the user
is indeed following the provided user, and that we redirect to the root
path. Note that we still don&amp;rsquo;t have any logic or even models to hold the
user following relationships, but we can start to think about how that
interface will look like. One of these tests already shows some of that:
&lt;code&gt;current_user.follows?&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe FollowsController, &#39;authenticated POST to create&#39; do
  let(:follower)       { Factory(:email_confirmed_user) }
  let(:user_to_follow) { Factory(:email_confirmed_user) }
  before do
    controller.current_user = follower #sign in
    post :create, :user_id =&amp;gt; user_to_follow.id
  end

  it { should redirect_to(root_path) }
  it &#39;makes the signed in user follow the provided user&#39; do
    controller.current_user.follows?(user_to_follow).should be_true
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We run this test, watch it fail, and come up with a first pass at an
implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create
  user = User.find(params[:user_id])
  current_user.follow(user)
  redirect_to :root_path
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets us a little further, because the redirect spec now passes.
It&amp;rsquo;s time to specify our models, and how the &lt;code&gt;follow&lt;/code&gt; method on the user
class will behave. We will also need a &lt;code&gt;follows?&lt;/code&gt; method that determines
whether a user follows another one. Let&amp;rsquo;s spec this out
&lt;code&gt;spec/models/user_spec.rb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe User, &#39;#follows?&#39; do
  subject { Factory(:email_confirmed_user) }
  let(:followed_user) { Factory(:email_confirmed_user) }
  let(:another_user) { Factory(:email_confirmed_user) }

  before do
    subject.follow(followed_user)
  end

  it &#39;returns true when it follows the user&#39; do
    subject.follows?(followed_user).should be_true
  end

  it &#39;returns false when it does not follow the user&#39; do
    subject.follows?(another_user).should be_false
  end
end

describe User, &#39;following another user&#39; do
  subject { Factory(:email_confirmed_user) }
  let(:user_to_follow) { Factory(:email_confirmed_user) }

  before do
    subject.follow(user_to_follow)
  end

  it &#39;makes the user follow the provided user&#39; do
    subject.follows?(user_to_follow).should be_true
  end

  it &#39;does not make the provided user follow the user&#39; do
    user_to_follow.follows?(subject).should be_false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can model user followings with a simple has_many association on the
user model. Let&amp;rsquo;s specify that on the valid user context using another
shoulda matcher:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe User, &#39;valid&#39; do
  it { should validate_presence_of   :twiddr_name }
  it { should have_many :followings } # add this
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our error message is now: &amp;ldquo;Expected User to have a has_many association
called followings (no association called followings)&amp;ldquo;. Let&amp;rsquo;s add the
followings table with a database migration. Run
&lt;code&gt;./script/rails generate migration create_followings&lt;/code&gt; and add the
following definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CreateFollowings &amp;lt; ActiveRecord::Migration
  def self.up
    create_table :followings do |t|
      t.references :user
      t.integer    :followed_user_id
      t.timestamps
    end
    add_index :followings, :user_id
  end

  def self.down
    drop_table :followings
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;rake db:migrate &amp;amp;&amp;amp; rake db:test:prepare&lt;/code&gt; to create the table. We
can now create a Following spec and model, where we probably want to
validate presence of user_id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;spec_helper&#39;

describe Following, &#39;valid&#39; do
  it { should validate_presence_of(:user_id) }
  it { should validate_presence_of(:followed_user_id) }
  it { should belong_to(:user) }
  it { should belong_to(:followed_user) }
end

class Following &amp;lt; ActiveRecord::Base
  validates_presence_of :user_id
  validates_presence_of :followed_user_id
  belongs_to :user
  belongs_to :followed_user, :class_name =&amp;gt; &#39;User&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We finally add the association on our user model to make the test pass:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User
  has_many :followings
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now ready to write up the implementation of the &lt;code&gt;#follows?&lt;/code&gt; and
the &lt;code&gt;#follow&lt;/code&gt; methods on the User class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def follow(another_user)
  self.followings.create(:followed_user_id =&amp;gt; another_user.id)
end

def follows?(another_user)
  self.followings.exists?([&#39;followed_user_id = ?&#39;, another_user])
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can move up to the following controller spec, and guess what: It
passes. When we wrote the controller spec and the controller code we
thought about what the API for following should look like, then we
specified it at the model level and wrote an implementation which
adhered to the &lt;em&gt;contract&lt;/em&gt; we had established earlier.&lt;/p&gt;

&lt;p&gt;We can move up one more level to the cucumber feature. Running it, we
see the following error:
&lt;code&gt;&amp;quot;expected #has_content?(&amp;quot;You are now following bob!&amp;quot;) to return true, got false (RSpec::Expectations::ExpectationNotMetError)&amp;quot;&lt;/code&gt;.
We can make that pass by adding a flash message on our controller
action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  flash[:notice] = &amp;quot;You are now following #{user.twiddr_name}!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have one more failing step, which is verifying that the home page
displays the users we are following. So far we haven&amp;rsquo;t really created a
home or welcome page, and have been staying with the default root path
provided by clearance (&lt;code&gt;Clearance::Sessions#new&lt;/code&gt;). Let&amp;rsquo;s specify that
controller&amp;rsquo;s routes in &lt;code&gt;spec/controllers/welcome_controller.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe WelcomeController, &#39;routes&#39; do
  it { should route(:get, &#39;/&#39;).to(:action =&amp;gt; &#39;index&#39;) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make that pass, we create the &lt;code&gt;WelcomeController&lt;/code&gt; class in
&lt;code&gt;app/controllers/welcome_controller.rb&lt;/code&gt;, and add the following routes to
&lt;code&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;root :to =&amp;gt; &#39;welcome#index&#39;
resource :welcome, :only =&amp;gt; [:index]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s specify some behavior for our welcome controller. When the
user is not logged in, we want to redirect to the sign in page,
otherwise we just render the welcome page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe WelcomeController, &#39;GET to index without authenticating&#39; do
  before do
    get :index
  end
  it { should redirect_to(sign_in_path) }
end

describe WelcomeController, &#39;GET to index when logged in&#39; do
  let(:user) { Factory(:email_confirmed_user) }
  before do
    controller.current_user = user
    get :index
  end
  it { should render_template(:index) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Making this pass is quite simple. We&amp;rsquo;ve already seen how to require
authentication with clearance: &lt;code&gt;before_filter :authenticate&lt;/code&gt;. We also
add an empty index action, and create the
&lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt; file, currently empty, where we can
start creating twiddr&amp;rsquo;s welcome page.&lt;/p&gt;

&lt;p&gt;Now we rerun our cucumber feature which once again reminds us that we
need to list out the user&amp;rsquo;s followings in the welcome page. Easy peasy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;lt;h3&amp;gt;You follow&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;% current_user.followings.each do |following| %&amp;gt;
  &amp;lt;li class=&amp;quot;following&amp;quot;&amp;gt;&amp;lt;%= following.followed_user.twiddr_name -%&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we also realize that an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag is more appropriate
than a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for a list of followings, so we also change the scenario
to look for an &lt;code&gt;li&lt;/code&gt; and not a &lt;code&gt;div&lt;/code&gt;. Therefore that verification steps
looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;And I should see &amp;quot;bob&amp;quot; within &amp;quot;li.following&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the feature. It&amp;rsquo;s all green. Run all specs and cucumber scenarios.
We see one failure:
&lt;code&gt;&amp;quot;expected #has_content?(&amp;quot;Follow&amp;quot;) to return true, got false (RSpec::Expectations::ExpectationNotMetError)&amp;quot;&lt;/code&gt;.
Not a big deal: we changed the Follow text to an actual button, so we
need to change our feature accordingly. The step can now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;And I should see the &amp;quot;Follow&amp;quot; button
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The step definition is quite simple, because Capybara has an easy way to
find and verify buttons on a page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Then /^I should see the &amp;quot;([^&amp;quot;]*)&amp;quot; button$/ do |button_label|
  page.should have_button(button_label)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now rerun the feature, as well as the entire suite with just
&lt;code&gt;rake&lt;/code&gt;, and behold a clean build once again.&lt;/p&gt;

&lt;h2 id=&#34;what-we-ve-learned:2904bb9809ed1041d185d8198fa84029&#34;&gt;What we&amp;rsquo;ve learned&lt;/h2&gt;

&lt;p&gt;We have started building our own social network using the Outside-in
development methodology with Cucumber, Rspec and other great tools. If
you&amp;rsquo;ve followed along and actually built this app, you&amp;rsquo;ve experienced
first hand what the process feels like, and hopefully you&amp;rsquo;ve started to
see the benefit of writing tests first and value of Outside-in
development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;ve already encountered places where a small refactor was
required, and our tests gave us the confidence to know that
everything is still working as intended. More significant refactors
or code optimizations down the road will also be much easier because
we have significant test coverage in the app.&lt;/li&gt;
&lt;li&gt;We build more coherent and simpler UIs and workflows, because it
approaches code from the stakeholder&amp;rsquo;s and business value
perspectives.&lt;/li&gt;
&lt;li&gt;While the ability to refactor with confidence is a huge win, we&amp;rsquo;ve
also seen how the process also helps designing the system. We&amp;rsquo;ve
used cucumber for acceptance tests, and used RSpec&amp;rsquo;s tighter
feedback loop for more fine grained internal design of the APIs. BDD
allows us to focus on the task at hand, as the primary goal is to
make the test pass.&lt;/li&gt;
&lt;li&gt;We constantly get feedback from the system while developing new
features, so we always know if what we&amp;rsquo;ve written is correct, and
where to go next.&lt;/li&gt;
&lt;li&gt;We write small pieces of code that make a test pass. Bad code is
hard to test, so if we write the test first, we are less likely to
write complex code. Therefore our app will be easier to maintain on
the long run.&lt;/li&gt;
&lt;li&gt;If we follow and embrace BDD, we are keeping the test coverage in
our app high, which will help catch regression bugs when new
functionality is added and the application gets more complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I hope that this introduction to Outside-in development inspires you to
continue to learn more about the method and the numerous tools that
support it. I encourage you to continue to build out this app &amp;ndash; or any
other project &amp;ndash; so that you can continue to get better until you are
able to experience the development flow that can be achieved with BDD.
&lt;strong&gt;Feel free to ask questions and give feedback in the comments section
of this post&lt;/strong&gt;. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/04/ruby-forensics/&#34;&gt;Ruby
Forensics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/01/an-introduction-to-eventmachine-and-how-to-avoid-callback-spaghetti/&#34;&gt;An introduction to eventmachine, and how to avoid callback
spaghetti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/30/the-testing-mindset/&#34;&gt;The Testing
Mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/29/an-introduction-to-desktop-apps-with-ruby/&#34;&gt;An Introduction to Desktop Apps with
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/28/the-ruby-movement/&#34;&gt;The Ruby
movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/27/almost-everything-is-an-object-and-everything-is-almost-an-object/&#34;&gt;Almost everything is an object (and everything is almost an
object!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/24/so-youre-new-to-ruby/&#34;&gt;So&amp;hellip; you&amp;rsquo;re new to
Ruby!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/23/incorporating-web-apis-to-spark-computer-programming-exercises/&#34;&gt;Incorporating Web APIs to spark computer programming
exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/22/14-ways-to-have-fun-coding-ruby/&#34;&gt;14 Ways To Have Fun Coding
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/21/writing-modular-web-applications-with-rack/&#34;&gt;Writing modular web applications with
Rack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/20/how-to-learn-ruby-or-any-programming-language/&#34;&gt;How to Learn Ruby (or any programming
language)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to eventmachine, and how to avoid callback spaghetti</title>
      <link>http://rubylearning.com/2010/10/01/an-introduction-to-eventmachine-and-how-to-avoid-callback-spaghetti/</link>
      <pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/10/01/an-introduction-to-eventmachine-and-how-to-avoid-callback-spaghetti/</guid>
      <description>

&lt;p&gt;This guest post is contributed by &lt;strong&gt;&lt;a href=&#34;http://mloughran.com/&#34;&gt;Martyn
Loughran&lt;/a&gt;&lt;/strong&gt;, who works at &lt;a href=&#34;http://new-bamboo.co.uk/&#34;&gt;New
Bamboo&lt;/a&gt; in London where he builds some very
cool apps like &lt;a href=&#34;http://pusherapp.com/&#34;&gt;Pusher&lt;/a&gt;. Pusher is a web service
which finally makes web push easy using the brand new WebSocket
protocol. When he&amp;rsquo;s not hacking away at the next great thing, he&amp;rsquo;s most
likely to be found behind a cello; hacking in this context is less
desirable. Alternatively find him on twitter as
&lt;a href=&#34;http://twitter.com/mloughran&#34;&gt;@mloughran&lt;/a&gt; where he tweets, reluctantly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/martyn.jpg&#34; alt=&#34;Martyn Loughran&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;an-introduction-to-eventmachine-and-how-to-avoid-callback-spaghetti:96cdfdb836d0a458c504932ba57b920b&#34;&gt;An introduction to eventmachine, and how to avoid callback spaghetti&lt;/h2&gt;

&lt;p&gt;Evented programming has become cool lately, largely due to the very elegant
&lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; project. However, we&amp;rsquo;ve been evented in the Ruby
world for many years thanks to eventmachine, which adds evented IO to Ruby.
Writing evented code is often viewed as &amp;lsquo;hard&amp;rsquo; or &amp;lsquo;back to front&amp;rsquo;, but it can
actually be very elegant. You just need a few tricks up your sleeve.&lt;/p&gt;

&lt;p&gt;One of the big challenges is understanding how to create clean
abstractions. Since the structure of the code is so different to what
you&amp;rsquo;re probably used to, you can quickly find yourself tied up in
callback spaghetti. In this blog post I will explain some common
patterns you can use while we combine the Twitter streaming API,
Google&amp;rsquo;s language API, and a WebSocket server. No spaghetti is required,
promise!&lt;/p&gt;

&lt;p&gt;After getting started with eventmachine, we&amp;rsquo;ll discuss two common
abstractions. Firstly deferrable objects which are like method calls
which return asynchrnously. Secondly, how to abstract code that can
trigger multiple events. Finally, we&amp;rsquo;ll add a WebSocket server into the
same process to show off doing IO concurrently.&lt;/p&gt;

&lt;h2 id=&#34;getting_started_with_eventmachine:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Getting started with eventmachine&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start by installing eventmachine and checking that the basics
work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install eventmachine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can run this &lt;code&gt;ruby test1.rb&lt;/code&gt; as you normally would, but you&amp;rsquo;ll need
to kill it when you&amp;rsquo;ve had enough.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test1.rb

require &#39;rubygems&#39;
require &#39;eventmachine&#39;

EventMachine.run {
  EventMachine.add_periodic_timer(1) {
    puts &amp;quot;Hello world&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a bit of luck you should get a cheery message every second.&lt;/p&gt;

&lt;p&gt;So how does this work? After requiring eventmachine, we call
&lt;code&gt;EventMachine.run&lt;/code&gt;, passing a block. The best advice for now is to
completely ignore this and just focus on what&amp;rsquo;s inside the block,
eventmachine can&amp;rsquo;t work without it. (If you&amp;rsquo;re curious, read up on the
&lt;a href=&#34;http://en.wikipedia.org/wiki/Reactor_pattern&#34;&gt;reactor pattern&lt;/a&gt;.) Inside
the &lt;code&gt;EventMachine.run&lt;/code&gt; block we call &lt;code&gt;add_periodic_timer&lt;/code&gt;, passing
another block. This tells eventmachine to fire an event every 1s, at
which point it should call the block. This is the first of many
interesting blocks. It&amp;rsquo;s known a callback.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re probably thinking you could have done this much easier with
&lt;code&gt;loop { puts &#39;hi&#39;; sleep 1 }&lt;/code&gt;, and you&amp;rsquo;d be right! It&amp;rsquo;s gets better, I
promise.&lt;/p&gt;

&lt;h2 id=&#34;using_eventmachine_for_network_io:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Using eventmachine for network IO&lt;/h2&gt;

&lt;p&gt;Efficient IO is the whole point of eventmachine, but you need to
understand one thing. When you&amp;rsquo;re doing any kind of network IO with
eventmachine, you &lt;em&gt;must&lt;/em&gt; use eventmachine, or a library which uses
eventmachine under the hood (you can usually spot them on github because
they start with &lt;code&gt;em-&lt;/code&gt;). You therefore need to be very careful when for
example picking gems which talk to databases, apis, etc.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t do this you&amp;rsquo;ll block the reactor, which basically means
that eventmachine will not be able to trigger any more events until the
IO operation completes. So for example, if you used &lt;code&gt;Net::HTTP&lt;/code&gt; from the
standard library to request a URL which took 10s to return, the periodic
timer you added earlier wouldn&amp;rsquo;t fire till it finished. You&amp;rsquo;ve thrown
concurrency out of the window!&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s talk about the HTTP client. Although eventmachine actually
comes with two different HTTP clients, both have issues, and it&amp;rsquo;s
generally recommended to ignore them and install the very capable
[em-http-request]() instead&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install em-http-request
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make a quick http request to check that it works (note that EM is
an alias for EventMachine, and by corollary I dislike typing):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;eventmachine&#39;

EM.run {
  require &#39;em-http&#39;

  EM::HttpRequest.new(&#39;http://json-time.appspot.com/time.json&#39;).get.callback { |http|
    puts http.response
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again we&amp;rsquo;re attaching a callback which is called once the request has
completed. We&amp;rsquo;re attaching it in a slightly different way to the timer
above, which we&amp;rsquo;ll discuss next.&lt;/p&gt;

&lt;h2 id=&#34;abstracting_code_that_has_a_success_or_failure_case:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Abstracting code that has a success or failure case&lt;/h2&gt;

&lt;p&gt;When designing APIs it&amp;rsquo;s extremely common to need to differentiate
between successful and failure responses. In Ruby, two common ways to do
this are to return &lt;code&gt;nil&lt;/code&gt;, or to raise an exception
(&lt;code&gt;ActiveRecord::NotFound&lt;/code&gt; for example). Eventmachine provides quite an
elegant abstraction for this: the deferrable.&lt;/p&gt;

&lt;p&gt;A deferrable is an object to which you may attach a success and a
failure callback, slightly confusingly named &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;errback&lt;/code&gt;
respectively. If you&amp;rsquo;re so inclined you might like to look at the
&lt;a href=&#34;http://github.com/eventmachine/eventmachine/blob/master/lib/em/deferrable.rb&#34;&gt;code&lt;/a&gt;,
since there is not much to it.&lt;/p&gt;

&lt;p&gt;The call to &lt;code&gt;HttpRequest#get&lt;/code&gt; we looked at earlier actually returns a
deferrable (in fact it returns an instance of &lt;code&gt;EM::HttpClient&lt;/code&gt; which
mixes in the &lt;code&gt;EM::Deferrable&lt;/code&gt; module). It is also quite common to make
use of the &lt;code&gt;EM::DefaultDeferrable&lt;/code&gt; which you can use standalone.&lt;/p&gt;

&lt;p&gt;As an excuse to use a deferrable ourselves I&amp;rsquo;ve decided that it would be
a jolly marvelous idea to look up the language of tweets as they arrive
from the twitter streaming API.&lt;/p&gt;

&lt;p&gt;Handily, the &lt;a href=&#34;http://code.google.com/apis/ajaxlanguage/documentation/&#34;&gt;Google AJAX Language
API&lt;/a&gt; allows you
to get the language of any piece of text. It&amp;rsquo;s designed to be used from
the browser, but we won&amp;rsquo;t let a small matter like that stop us for now
(although you should if it&amp;rsquo;s a real application).&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m trying out a new API I generally start with HTTParty
(&lt;code&gt;gem install httparty&lt;/code&gt;) since it&amp;rsquo;s just so quick and easy to use.
Warning: you can&amp;rsquo;t use HTTParty with eventmachine since it uses
&lt;code&gt;Net::HTTP&lt;/code&gt; under the covers &amp;ndash; this is just for testing!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;httparty&#39;
require &#39;json&#39;

response = HTTParty.get(&amp;quot;http://www.google.com/uds/GlangDetect&amp;quot;, :query =&amp;gt; {
  :v =&amp;gt; &#39;1.0&#39;,
  :q =&amp;gt; &amp;quot;Sgwn i os yw google yn deall Cymraeg?&amp;quot;
})

p JSON.parse(response.body)[&amp;quot;responseData&amp;quot;]

# =&amp;gt; {&amp;quot;isReliable&amp;quot;=&amp;gt;true, &amp;quot;confidence&amp;quot;=&amp;gt;0.5834181, &amp;quot;language&amp;quot;=&amp;gt;&amp;quot;cy&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, Google understands Welsh!&lt;/p&gt;

&lt;p&gt;Before we convert this to use em-http-request (HTTParty uses Net::HTTP
under the covers), let&amp;rsquo;s wrap it up in a class so we can compare it to
the eventmachine version we&amp;rsquo;ll write in a minute. I decided to return
&lt;code&gt;nil&lt;/code&gt; if the language could not be reliably determined.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;httparty&#39;
require &#39;json&#39;

class LanguageDetector
  URL = &amp;quot;http://www.google.com/uds/GlangDetect&amp;quot;

  def initialize(text)
    @text = text
  end

  # Returns the language if it can be detected, otherwise nil
  def language
    response = HTTParty.get(URL, :query =&amp;gt; {:v =&amp;gt; &#39;1.0&#39;, :q =&amp;gt; @text})

    return nil unless response.code == 200

    info = JSON.parse(response.body)[&amp;quot;responseData&amp;quot;]

    return info[&#39;isReliable&#39;] ? info[&#39;language&#39;] : nil
  end
end

puts LanguageDetector.new(&amp;quot;Sgwn i os yw google yn deall Cymraeg?&amp;quot;).language
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now convert this code to use em-http-request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;em-http&#39;
require &#39;json&#39;

class LanguageDetector
  URL = &amp;quot;http://www.google.com/uds/GlangDetect&amp;quot;

  include EM::Deferrable

  def initialize(text)
    request = EM::HttpRequest.new(URL).get({
      :query =&amp;gt; {:v =&amp;gt; &amp;quot;1.0&amp;quot;, :q =&amp;gt; text}
    })

    # This is called if the request completes successfully (whatever the code)
    request.callback {
      if request.response_header.status == 200
        info = JSON.parse(request.response)[&amp;quot;responseData&amp;quot;]
        if info[&#39;isReliable&#39;]
          self.succeed(info[&#39;language&#39;])
        else
          self.fail(&amp;quot;Language could not be reliably determined&amp;quot;)
        end
      else
        self.fail(&amp;quot;Call to fetch language failed&amp;quot;)
      end
    }

    # This is called if the request totally failed
    request.errback {
      self.fail(&amp;quot;Error making API call&amp;quot;)
    }
  end
end

EM.run {
  detector = LanguageDetector.new(&amp;quot;Sgwn i os yw google yn deall Cymraeg?&amp;quot;)
  detector.callback { |lang| puts &amp;quot;The language was #{lang}&amp;quot; }
  detector.errback { |error| puts &amp;quot;Error: #{error}&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The language was cy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks pretty different. The important thing is that in all cases
we&amp;rsquo;ve either called &lt;code&gt;succeed&lt;/code&gt; or &lt;code&gt;fail&lt;/code&gt;, which we can do since we
included &lt;code&gt;EM::Deferrable&lt;/code&gt;. Depending on which one we call, either the
&lt;code&gt;callback&lt;/code&gt; or &lt;code&gt;errback&lt;/code&gt; block will be executed.&lt;/p&gt;

&lt;p&gt;As an exercise you could try to extend this class to retry the api call
up to 3 times on failure. You should be able to maintain exactly the
same external interface, which means that we&amp;rsquo;ve successfully wrapped up
this complexity in an object and can now forget how it works!&lt;/p&gt;

&lt;h2 id=&#34;abstracting_code_that_returns_multiple_events_multiple_times:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Abstracting code that returns multiple events multiple times&lt;/h2&gt;

&lt;p&gt;Now we arrive at territory where eventmachine really shines.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll build a client that connects to Twitter&amp;rsquo;s streaming api, and emits
events every time a tweet arrives.&lt;/p&gt;

&lt;p&gt;To use Twitter&amp;rsquo;s &lt;a href=&#34;http://dev.twitter.com/pages/streaming_api&#34;&gt;streaming
API&lt;/a&gt; you just need to open a
long lived HTTP connection to &lt;code&gt;stream.twitter.com&lt;/code&gt;, and wait for the
deluge to arrive. Again we&amp;rsquo;ll use em-http-request.&lt;/p&gt;

&lt;p&gt;Connecting to the API, and listening to all tweets that mention
newtwitter is as easy as doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http = EventMachine::HttpRequest.new(&#39;http://stream.twitter.com/1/statuses/filter.json&#39;).post({
  :head =&amp;gt; { &#39;Authorization&#39; =&amp;gt; [username, password] },
  :query =&amp;gt; { &amp;quot;track&amp;quot; =&amp;gt; &amp;quot;newtwitter&amp;quot; }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this returns a deferrable (which remember triggers its callback
when the request completes), it&amp;rsquo;s actually got another trick up it&amp;rsquo;s
sleeve. We can also register to be notified every time new data is
received:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.stream do |chunk|
  # This chunk may contain one or more tweets separated by \r\n
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s put this together and listen for some tweets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;em-http&#39;
require &#39;json&#39;

EM.run {
  username = &#39;yourtwitterusername&#39;
  password = &#39;password&#39;
  term = &#39;newtwitter&#39;
  buffer = &amp;quot;&amp;quot;

  http = EventMachine::HttpRequest.new(&#39;http://stream.twitter.com/1/statuses/filter.json&#39;).post({
    :head =&amp;gt; { &#39;Authorization&#39; =&amp;gt; [ username, password ] },
    :query =&amp;gt; { &amp;quot;track&amp;quot; =&amp;gt; term }
  })

  http.callback {
    unless http.response_header.status == 200
      puts &amp;quot;Call failed with response code #{http.response_header.status}&amp;quot;
    end
  }

  http.stream do |chunk|
    buffer += chunk
    while line = buffer.slice!(/.+\r\n/)
      tweet = JSON.parse(line)
      puts tweet[&#39;text&#39;]
    end
  end
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should return something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hey @Twitter. When shall I be getting the #NewTwitter?
#NewTwitter #Perfect
WHAHOO WTF? #NewTwitter is weird!
Buenos dÃ­as a todos! =) Estoy sola en la office, leyendo Le Monde y probando el #NewTwitter desde FireFox, que funciona de 10!
Curiosity and boredom got the better of me...I&#39;m trying the #newtwitter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works! Now say we wanted to lookup the language of each tweet using
the class we built earlier. We could do this by adding further to our
stream method, however this is the road to callback hell (and just
imagine what it would be like if we hadn&amp;rsquo;t abstracted the language
detection!).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.stream do |chunk|
  buffer += chunk
  while line = buffer.slice!(/.+\r\n/)
    tweet = JSON.parse(line)
    text = tweet[&#39;text&#39;]
    detector = LanguageDetector.new(text)
    detector.callback { |lang|
      puts &amp;quot;Language: #{lang}, tweet: #{text}&amp;quot;
    }
    detector.errback { |error|
      puts &amp;quot;Language could not be determined for tweet: #{text}&amp;quot;
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s rewrite what we just did nicely.&lt;/p&gt;

&lt;p&gt;Earlier we used a deferrable to abstract code that either succeeded or
failed asynchronously. Another common technique in a lot of eventmachine
code is to provide an &lt;code&gt;onevent&lt;/code&gt; callback system. For example, it would
be great if we could have an interface like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream = TweetStream.new(username, password, term)
stream.ontweet { |tweet| puts tweet }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As if by magic here is the code!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;em-http&#39;
require &#39;json&#39;

class TwitterStream
  URL = &#39;http://stream.twitter.com/1/statuses/filter.json&#39;

  def initialize(username, password, term)
    @username, @password = username, password
    @term = term
    @callbacks = []
    @buffer = &amp;quot;&amp;quot;
    listen
  end

  def ontweet(█)
    @callbacks &amp;lt;&amp;lt; block
  end

  private

  def listen
    http = EventMachine::HttpRequest.new(URL).post({
      :head =&amp;gt; { &#39;Authorization&#39; =&amp;gt; [ @username, @password ] },
      :query =&amp;gt; { &amp;quot;track&amp;quot; =&amp;gt; @term }
    })

    http.stream do |chunk|
      @buffer += chunk
      process_buffer
    end
  end

  def process_buffer
    while line = @buffer.slice!(/.+\r\n/)
      tweet = JSON.parse(line)

      @callbacks.each { |c| c.call(tweet[&#39;text&#39;]) }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we can write a nice bit of code like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EM.run {
  stream = TwitterStream.new(&#39;yourtwitterusername&#39;, &#39;pass&#39;, &#39;newtwitter&#39;)
  stream.ontweet { |tweet|
    LanguageDetector.new(tweet).callback { |lang|
      puts &amp;quot;New tweet in #{lang}: #{tweet}&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mixing_different_kinds_of_io_in_the_same_process:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Mixing different kinds of IO in the same process&lt;/h2&gt;

&lt;p&gt;One of the great things about using eventmachine is that because none of
the IO operations block, it&amp;rsquo;s possible and really easy to mix and match
different types of IO in the same process.&lt;/p&gt;

&lt;p&gt;So for example we could use WebSockets to push tweets to a browser in
realtime and get something like this:&lt;/p&gt;

&lt;p&gt;Fortunately there&amp;rsquo;s already a WebSocket server built using eventmachine,
&lt;a href=&#34;http://github.com/igrigorik/em-websocket&#34;&gt;em-websocket&lt;/a&gt; (which I&amp;rsquo;m
pretty familiar with since we use it in &lt;a href=&#34;http://pusherapp.com&#34;&gt;Pusher&lt;/a&gt;).
Install it with &lt;code&gt;gem install em-websocket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve started a websocket server (which is trivial), it&amp;rsquo;s as easy
as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream.ontweet { |tweet|
  LanguageDetector.new(tweet).callback { |lang|
    puts &amp;quot;New tweet in #{lang}: #{tweet}&amp;quot;

    websocket_connections.each do |socket|
      socket.send(JSON.generate({
        :lang =&amp;gt; lang,
        :tweet =&amp;gt; tweet
      }))
    end
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See, no spaghetti!&lt;/p&gt;

&lt;p&gt;All the code is contained in &lt;a href=&#34;http://gist.github.com/604404&#34;&gt;this gist&lt;/a&gt;,
including the extremely basic HTML page which connects to the WebSocket.
Please fork it and add the funky canvas visualisation I ran out of time
to write!&lt;/p&gt;

&lt;h2 id=&#34;going_further:96cdfdb836d0a458c504932ba57b920b&#34;&gt;Going further&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to learn more I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://github.com/eventmachine/eventmachine/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Aman Gupta&amp;rsquo;s
&lt;a href=&#34;http://timetobleed.com/eventmachine-scalable-non-blocking-io-in-ruby/&#34;&gt;slides&lt;/a&gt;
(he knows what he&amp;rsquo;s talking about since he maintains eventmachine).&lt;/li&gt;
&lt;li&gt;Joining the &lt;a href=&#34;http://groups.google.com/group/eventmachine&#34;&gt;google
group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reading the &lt;a href=&#34;http://github.com/eventmachine/eventmachine&#34;&gt;code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Asking on the irc channel (#eventmachine).&lt;/li&gt;
&lt;li&gt;Try node.js as well, it&amp;rsquo;s pretty cool and the same concepts apply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable and that it gives you an insight
into the eventmachine. Feel free to ask questions and give feedback in
the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/30/the-testing-mindset/&#34;&gt;The Testing
Mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/29/an-introduction-to-desktop-apps-with-ruby/&#34;&gt;An Introduction to Desktop Apps with
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/28/the-ruby-movement/&#34;&gt;The Ruby
movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/27/almost-everything-is-an-object-and-everything-is-almost-an-object/&#34;&gt;Almost everything is an object (and everything is almost an
object!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/24/so-youre-new-to-ruby/&#34;&gt;So&amp;hellip; you&amp;rsquo;re new to
Ruby!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/23/incorporating-web-apis-to-spark-computer-programming-exercises/&#34;&gt;Incorporating Web APIs to spark computer programming
exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/22/14-ways-to-have-fun-coding-ruby/&#34;&gt;14 Ways To Have Fun Coding
Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/21/writing-modular-web-applications-with-rack/&#34;&gt;Writing modular web applications with
Rack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/20/how-to-learn-ruby-or-any-programming-language/&#34;&gt;How to Learn Ruby (or any programming
language)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>14 Ways To Have Fun Coding Ruby</title>
      <link>http://rubylearning.com/2010/09/22/14-ways-to-have-fun-coding-ruby/</link>
      <pubDate>Wed, 22 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/09/22/14-ways-to-have-fun-coding-ruby/</guid>
      <description>

&lt;p&gt;This guest post is contributed by &lt;strong&gt;Jeff Schoolcraft&lt;/strong&gt;, who runs &lt;a href=&#34;http://thequeue.net/&#34;&gt;The
Queue Incorporated&lt;/a&gt; a freelance consultancy that
provides custom software development in Ruby, Rails and iOS. He produces
screencasts with his partner, Istvan Hoka, at
&lt;a href=&#34;http://bddcasts.com/&#34;&gt;BDDCasts&lt;/a&gt;. When he&amp;rsquo;s not building his business
he&amp;rsquo;s trying to keep up with his two daughters and spending the rare free
moment with his wife. You can read his &lt;a href=&#34;http://thequeue.net/&#34;&gt;blog&lt;/a&gt; and
follow him on twitter &lt;a href=&#34;http://twitter.com/jschoolcraft&#34;&gt;@jschoolcraft&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.gravatar.com/avatar.php?default=http://railsdeveloper.com/images/icons/user-flag-2.png&amp;amp;gravatar_id=196b781eef85b7ce609fd12234cc1f39&amp;amp;rating=G&#34; alt=&#34;Jeff
Schoolcraft&#34; title=&#34;Jeff Schoolcraft&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;14-ways-to-have-fun-coding-ruby:cd94bfcae9ecff573369ba05002161ad&#34;&gt;14 Ways To Have Fun Coding Ruby&lt;/h2&gt;

&lt;p&gt;From time to time you might need to spice up your romance with code to
make it a bit more interesting and fun. Maybe you&amp;rsquo;ve been there? You&amp;rsquo;d
rather do anything except find the extra closing tag in some view. Or
maybe you&amp;rsquo;ve stumbled across some particularly horrible use of google +
copy and paste. Or, you might just be looking to practice. You don&amp;rsquo;t
necessarily want to get on the same treadmill day after day so you&amp;rsquo;re
looking for something new.&lt;/p&gt;

&lt;p&gt;Here are 14 different ways to have fun coding Ruby.&lt;/p&gt;

&lt;h2 id=&#34;by_yourself:cd94bfcae9ecff573369ba05002161ad&#34;&gt;By Yourself&lt;/h2&gt;

&lt;h3 id=&#34;one_ruby_quiz:cd94bfcae9ecff573369ba05002161ad&#34;&gt;1. &lt;a href=&#34;http://rubyquiz.com/&#34;&gt;Ruby Quiz&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The original problem site for our community was based on the &lt;a href=&#34;http://perl.plover.com/qotw/&#34;&gt;Perl Quiz
of the Week&lt;/a&gt;. Sheparded by &lt;a href=&#34;http://blog.grayproductions.net/&#34;&gt;James Edward
Gray II&lt;/a&gt; for over three years, even
becoming a book from Pragmatic Programmers, it&amp;rsquo;s now under new
management. It spent a bit of time as &lt;a href=&#34;http://www.splatbang.com/rubyquiz/&#34;&gt;Ruby Quiz
2.0&lt;/a&gt; covering 157-188 by Matthew
Moss. Most recently as &lt;a href=&#34;http://rubyquiz.strd6.com/&#34;&gt;Ruby Quiz 3&lt;/a&gt;
maintained by &lt;a href=&#34;http://strd6.com/&#34;&gt;Daniel More&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically every Friday a quiz gets sent to the &lt;a href=&#34;http://www.ruby-lang.org/en/20020104.html&#34;&gt;Ruby Talk mailing
list&lt;/a&gt;, you have the weekend
to solve the quiz during a 48 hour no-spoiler period. After that
everyone is invited to contribute solutions and discussion back to the
list. The current quiz maintainer sends a summary of the submissions
back to the list on Thursday.&lt;/p&gt;

&lt;h3 id=&#34;two_codekata:cd94bfcae9ecff573369ba05002161ad&#34;&gt;2. &lt;a href=&#34;http://codekata.pragprog.com/&#34;&gt;CodeKata&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://pragdave.pragprog.com/&#34;&gt;Dave Thomas&lt;/a&gt; put out a series of 15
Kata, or specific practice sessions, to help you flex your Ruby muscles
and excel at Ruby. They&amp;rsquo;re designed to be repeated, practiced and
discarded to come back to again. &lt;a href=&#34;http://coreyhaines.com/index.html&#34;&gt;Cory
Haines&lt;/a&gt; has most recently carried the
Kata torch with &lt;a href=&#34;http://www.katacasts.com/&#34;&gt;KataCasts&lt;/a&gt; encouraging the
programming community to do a screen recording of their kata&amp;rsquo;s to
publish for peer review.&lt;/p&gt;

&lt;h3 id=&#34;three_project_euler:cd94bfcae9ecff573369ba05002161ad&#34;&gt;3. &lt;a href=&#34;http://projecteuler.net/index.php?section=problems&#34;&gt;Project Euler&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What is the smallest number divisible by each of the numbers 1 to
20?&lt;/li&gt;
&lt;li&gt;Finding Fibonacci numbers for which the first and last nine digits
are pandigital.&lt;/li&gt;
&lt;li&gt;Calculate the sum of all the primes below two million.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a sampling of the 300 (and growing) list of problems to
solve at Project Euler. What&amp;rsquo;s particularly fun about this site is the
need to use math and code to solve the problem. Most (all?) problems
have a way to check your answer.&lt;/p&gt;

&lt;h3 id=&#34;four_ruby_programming_challenge_for_newbies:cd94bfcae9ecff573369ba05002161ad&#34;&gt;4. &lt;a href=&#34;http://ruby-challenge.rubylearning.org/&#34;&gt;Ruby Programming Challenge for Newbies&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Even this very site ( RubyLearning.org ) has a set of challenges to test
your Ruby mettle. The problems are submitted by folks in the community
and look to come out monthly.&lt;/p&gt;

&lt;h3 id=&#34;five_refactor_my_code:cd94bfcae9ecff573369ba05002161ad&#34;&gt;5. &lt;a href=&#34;http://refactormycode.com/&#34;&gt;Refactor My Code&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;While not necessarily a quiz or problem site, per se, it does provide
you with a fairly broad exposure to various types of programming
challenges and gives you an opportunity to refactor (or learn) the
submitted code samples. Not everyone has the benefit of a pair, or even
a colleague to bounce ideas off, so this is a welcome addition.&lt;/p&gt;

&lt;h2 id=&#34;with_a_partner:cd94bfcae9ecff573369ba05002161ad&#34;&gt;With a Partner&lt;/h2&gt;

&lt;h3 id=&#34;six_hackfests:cd94bfcae9ecff573369ba05002161ad&#34;&gt;6. HackFests&lt;/h3&gt;

&lt;p&gt;Picture this: a bunch of hackers, some notebooks, pizza, beer and a
hankering to build something better (or at all). That&amp;rsquo;s pretty much a
hackfest. Some are organized more than others. Some are just ad hoc
events where you look for an interesting project, or a partner for your
own intersting project. Here&amp;rsquo;s a &lt;a href=&#34;http://is.gd/u13u&#34;&gt;Google Search&lt;/a&gt; for
HackFests in the last month.&lt;/p&gt;

&lt;h3 id=&#34;seven_coding_dojo:cd94bfcae9ecff573369ba05002161ad&#34;&gt;7. &lt;a href=&#34;http://codingdojo.org/&#34;&gt;Coding Dojo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Coding Dojo&amp;rsquo;s are karate practice for coders. Basically a group of
coders meet to go over a set problem, or kata. They&amp;rsquo;re either completed
as a &lt;a href=&#34;http://codingdojo.org/cgi-bin/wiki.pl?PreparedKata&#34;&gt;PreparedKata&lt;/a&gt;
or a &lt;a href=&#34;http://codingdojo.org/cgi-bin/wiki.pl?RandoriKata&#34;&gt;RandoriKata&lt;/a&gt;.
The latter involving the whole group in a round-robin pair programming
kata. Here&amp;rsquo;s a &lt;a href=&#34;http://codingdojo.org/cgi-bin/wiki.pl?back=CodingDojos&#34;&gt;list of some
CodingDojos&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;code_vs_code:cd94bfcae9ecff573369ba05002161ad&#34;&gt;Code vs Code&lt;/h2&gt;

&lt;h3 id=&#34;eight_ruby_battleship:cd94bfcae9ecff573369ba05002161ad&#34;&gt;8. &lt;a href=&#34;http://sparring.rubyforge.org/battleship/&#34;&gt;Ruby Battleship&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This evolved from a RubyConf or RailsConf talk about Kata and became an
online battleship competition using Ruby. I don&amp;rsquo;t think there&amp;rsquo;s much
movement in the project anymore, but it&amp;rsquo;s still something you could pull
together for a Ruby Brigade meeting, I imagine.&lt;/p&gt;

&lt;h3 id=&#34;nine_rrobots:cd94bfcae9ecff573369ba05002161ad&#34;&gt;9. &lt;a href=&#34;http://rrobots.rubyforge.org/index.html&#34;&gt;RRobots&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;RRobots is another older game/competition for Ruby. This one you build
the AI to control robot tanks and destroy your enemies. Again, it&amp;rsquo;s
older but still something you could probably pull together for a Ruby
Brigade or HackFest.&lt;/p&gt;

&lt;h3 id=&#34;ten_rubywarrior:cd94bfcae9ecff573369ba05002161ad&#34;&gt;10. &lt;a href=&#34;http://github.com/ryanb/ruby-warrior&#34;&gt;RubyWarrior&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ruby Warrior is a game designed by &lt;a href=&#34;http://railscasts.com&#34;&gt;Ryan Bates&lt;/a&gt;
to teach Ruby and AI in a fun, interactive way. You play a warrior
climbing a tower trying to reach the ruby at the top. You have to battle
enemies, rescue captives and reach the stairs all using your code.&lt;/p&gt;

&lt;h3 id=&#34;eleven_rails_rumble:cd94bfcae9ecff573369ba05002161ad&#34;&gt;11. &lt;a href=&#34;http://railsrumble.com/&#34;&gt;Rails Rumble&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first, often duplicated, what kind of a kick ass web application can
you develop in 48 hours using Ruby and Rails competition. It&amp;rsquo;s been
going on since 2007 and it&amp;rsquo;s a load of fun. Either by yourself or with 3
of your mates see what you can build in 48 hours.&lt;/p&gt;

&lt;h2 id=&#34;the_rest:cd94bfcae9ecff573369ba05002161ad&#34;&gt;The Rest&lt;/h2&gt;

&lt;h3 id=&#34;twelve_scratching_an_itch:cd94bfcae9ecff573369ba05002161ad&#34;&gt;12. Scratching an Itch&lt;/h3&gt;

&lt;p&gt;Build a better mousetrap. Scrape a few places for data and mash it
together to come up with something clever or entertaining. Solve a
problem. Ease some pain. There has to be an idea that you&amp;rsquo;ve been
waiting to get some time to implement, just do it.&lt;/p&gt;

&lt;h3 id=&#34;thirteen_contribute_to_oss:cd94bfcae9ecff573369ba05002161ad&#34;&gt;13. Contribute to OSS&lt;/h3&gt;

&lt;p&gt;Free as in beer. Free as in speech. Free as in puppies. Feel free to
help out on one of the OSS projects you clearly use day in and day out
that could use some love. Most OSS maintainers will bend over backwards
to get you up to speed and coding on the project. You don&amp;rsquo;t even have to
be able to code at first, a lot of projects can use help with
documentation.&lt;/p&gt;

&lt;p&gt;Maybe not your idea of fun to start, but you&amp;rsquo;ll be rewarded by the
welcoming of a new community.&lt;/p&gt;

&lt;h3 id=&#34;fourteen_mentor:cd94bfcae9ecff573369ba05002161ad&#34;&gt;14. Mentor&lt;/h3&gt;

&lt;p&gt;Some people love to teach. If you&amp;rsquo;re one of them mentoring someone in
the community is a great way to keep fresh and share your knowledge in a
more personal medium than your blog or twitter. The
&lt;a href=&#34;http://railsbridge.org&#34;&gt;RailsBridge&lt;/a&gt; maintains the &lt;a href=&#34;http://www.railsmentors.org/&#34;&gt;Rails
Mentors&lt;/a&gt; portal connecting students with
mentors. Before you say you don&amp;rsquo;t have anything to teach, or worse,
learn, remember that it&amp;rsquo;s not always about the code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So &amp;ndash; what do you think? I&amp;rsquo;d love to double this list, or triple it. If
&lt;strong&gt;you&lt;/strong&gt; have ideas, sites, resources, etc. that I haven&amp;rsquo;t mentioned,
please post them as comments here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post supported by Blue Box Group&lt;/em&gt;:&lt;/strong&gt; &lt;a href=&#34;http://www.blueboxgrp.com/?utm_source=rubylearning&amp;amp;utm_medium=blog&amp;amp;utm_campaign=rubylearning&#34;&gt;Blue Box
Group&lt;/a&gt;
is in the business of providing affordable &lt;a href=&#34;http://www.blueboxgrp.com/?utm_source=rubylearning&amp;amp;utm_medium=blog&amp;amp;utm_campaign=rubylearning&#34;&gt;Rails
hosting&lt;/a&gt;
solutions! They approach web hosting, virtual servers and dedicated
servers differently, treating each client as a partner and working
towards the common goal of success for their business. They have the
experience, talent and equipment to make your site a success!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/21/writing-modular-web-applications-with-rack/&#34;&gt;Writing modular web applications with
Rack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/09/20/how-to-learn-ruby-or-any-programming-language/&#34;&gt;How to Learn Ruby (or any programming
language)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Best of RubyLearning Posts for Ruby Beginners</title>
      <link>http://rubylearning.com/2008/07/31/best-of-rubylearning-posts-for-ruby-beginners/</link>
      <pubDate>Thu, 31 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2008/07/31/best-of-rubylearning-posts-for-ruby-beginners/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    Here&amp;#8217;s a digest of RubyLearning&amp;#8217;s best posts for Ruby beginners. These include (with the latest posts first):
  &lt;/p&gt;
  
  &lt;h3&gt;
    Advise:
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2008/07/29/david-flanagan-talks-to-rubylearning/&#34;&gt;David Flanagan talks to RubyLearning&lt;/a&gt;&lt;br /&gt;&lt;em&gt;David Flanagan is the author of the book &amp;#8220;The Ruby Programming Language&amp;#8221;. David says that his book was written to be a definitive book on the language, and is intended for those who want to learn and master the language. He also offers insights on Ruby 1.9.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2008/07/21/charles-nutter-talks-to-rubylearning-participants/&#34;&gt;Charles Nutter talks to RubyLearning Participants&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Charles Nutter currently works full-time as a core developer on JRuby at Sun Microsystems. He talks on how JRuby brings the Ruby and Java world closer.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2008/04/29/akitaonrails-advises-a-young-ruby-beginner/&#34;&gt;&amp;#8220;AkitaOnRails&amp;#8221; Advises A Young Ruby Beginner&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Fabio Akita is a Brazilian Rails enthusiast, also known online as &amp;#8220;AkitaOnRails&amp;#8221;. Here Fabio advises a 16 year young participant of the &lt;a href=&#34;http://rubylearning.org/&#34;&gt;FORPC101&lt;/a&gt; course. Advise that is valid for any Ruby beginner.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2007/09/27/advice-for-ruby-beginners-1/&#34;&gt;Advise For Ruby Beginners&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Ruby Gurus: &lt;strong&gt;Agnieszka Figiel&lt;/strong&gt; from Poland, &lt;strong&gt;David Black&lt;/strong&gt; from USA, &lt;strong&gt;Fabio Akita&lt;/strong&gt; from Brazil, &lt;strong&gt;Jamie van Dyke&lt;/strong&gt; from UK, &lt;strong&gt;Jamis Buck&lt;/strong&gt; from USA, &lt;strong&gt;Jens-Christian Fischer&lt;/strong&gt; from Switzerland, &lt;strong&gt;Juanjo Bazan&lt;/strong&gt; from Spain, &lt;strong&gt;Julian Tarkhanov&lt;/strong&gt; from Russia / Netherlands, &lt;strong&gt;Manik Juneja&lt;/strong&gt; from India, &lt;strong&gt;Matt Palmer&lt;/strong&gt; from Australia, &lt;strong&gt;Mislav Marohnic&lt;/strong&gt; from Croatia, &lt;strong&gt;Ola Bini&lt;/strong&gt; from Sweden, &lt;strong&gt;Pedro Custodio&lt;/strong&gt; from Portugal, &lt;strong&gt;Peter Cooper&lt;/strong&gt; from UK, &lt;strong&gt;Remco van&amp;#8217;t Veer&lt;/strong&gt; from Netherlands and &lt;strong&gt;Sau Sheong Chang&lt;/strong&gt; from Singapore give their perspective on the various questions facing the would-be Ruby developers, in a three-part series.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2007/08/18/david-black-interview-talking-to-rubylearningcom/&#34;&gt;David Black Interview: Talking to RubyLearning.com&lt;/a&gt;&lt;br /&gt;&lt;em&gt;David Black author of &lt;a href=&#34;http://www.manning.com/black/&#34;&gt;Ruby for Rails&lt;/a&gt; and soon to be published book &lt;a href=&#34;http://www.manning.com/black2/&#34;&gt;The Well-Grounded Rubyist&lt;/a&gt; offers pearls of advise.&lt;/em&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Code:
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2008/05/31/a-teeny-weeny-mp3-player-using-ruby-and-shoes/&#34;&gt;A Teeny-weeny mp3 player using Ruby and Shoes&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Satoshi Asakawa is a Japanese Ruby enthusiast, and an Asst. Teacher of the FORPC101 course. He walks you through building a small mp3 player using Ruby and Shoes.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2008/04/25/yahoo-web-services-in-ruby/&#34;&gt;Yahoo! Web Services in Ruby&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Jose Carlos Monteiro is a Portuguese Ruby enthusiast and an Asst. teacher of the FORPC101 course shows how to use Yahoo! Web Services in Ruby.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2007/11/30/akitaonrails-on-anatomy-of-ruby-blocksclosures/&#34;&gt;&amp;#8220;AkitaOnRails&amp;#8221; On Anatomy of Ruby Blocks/Closures&lt;/a&gt;&lt;br /&gt;&lt;em&gt;This is one of Fabio Akita&amp;#8217;s post from his very popular series on various aspects of Ruby. Here he talks on Ruby blocks.&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2007/11/26/akitaonrails-on-ruby-symbols/&#34;&gt;&amp;#8220;AkitaOnRails&amp;#8221; On Ruby Symbols&lt;/a&gt;&lt;br /&gt;&lt;em&gt;This post by Fabio Akita, talks about Ruby Symbols.&lt;/em&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/JRuby&#34; rel=&#34;tag&#34;&gt;JRuby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby&#34; rel=&#34;tag&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Beginners&#34; rel=&#34;tag&#34;&gt;Ruby Beginners&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Charles Nutter talks to RubyLearning Participants</title>
      <link>http://rubylearning.com/2008/07/21/charles-nutter-talks-to-rubylearning-participants/</link>
      <pubDate>Mon, 21 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2008/07/21/charles-nutter-talks-to-rubylearning-participants/</guid>
      <description>&lt;div style=&#34;float: right; margin-left: 10px; margin-bottom: 10px;&#34;&gt;
  &lt;a href=&#34;http://rubylearning.com/images/nutter.jpg&#34; title=&#34;Charles Nutter&#34;&gt;&lt;img src=&#34;http://rubylearning.com/images/nutter.jpg&#34; alt=&#34;Charles Nutter&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;p&gt;
    On the eve of the new &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/satishtalim/jruby_course.html&#34;&gt;JRuby Course&lt;/a&gt;&lt;/strong&gt; announced by RubyLearning, Satish Talim of RubyLearning caught up with &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&lt;/span&gt;&lt;/strong&gt;, who was kind enough to spare time answering questions posed by the RubyLearning participants.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;Charles Nutter has been a Java developer since 1996. He currently works full-time as a core developer on JRuby at Sun Microsystems. He led the open-source LiteStep project in the late 90s and started working on Ruby in the fall of 2004. Since then he has been a member of the JRuby team, helping to make it a true alternative Ruby platform. Charles blogs on Ruby and Java at &lt;a href=&#34;http://headius.blogspot.com/&#34;&gt;headius.blogspot.com&lt;/a&gt;.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Many of the RubyLearning course participants have a Java background and are learning Ruby. Why, according to you, must these participants also &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/satishtalim/jruby_course.html&#34;&gt;learn JRuby&lt;/a&gt;&lt;/strong&gt;?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Java is still a great language for building high performance libraries, system code, frameworks and sometimes applications. But more and more it&amp;#8217;s not enough to just know Java. We have JRuby, Groovy, Jython, and other languages all showing new ways of looking at the classic problems facing application developers. And learning JRuby is a perfect way to keep up with where development on the Java platform is going.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; How should they go about acquiring knowledge and skills in JRuby?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; You learn best by doing&amp;#8230;pick up pretty much any Ruby or Rails book, or go to any Ruby or Rails training session, and see if you can get through it with JRuby. And while you&amp;#8217;re doing it, start thinking about where you can take advantage of JRuby&amp;#8217;s additional features, like the ability to call Java libraries.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; What&amp;#8217;s the focus of JRuby?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; JRuby has two focuses. First and foremost, we want to be the best Ruby implementation we can, providing the best performance, threading, and memory utilization. Second, we want to be the best JVM language we can, providing access to all the libraries you are used to as a Java developer and fitting seamlessly into your Java world.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; What are JRuby&amp;#8217;s long-term goals?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Long term, I see more and more Ruby developers choosing JRuby as their implementation of choice, and I see Ruby becoming a standard and common language for JVM platform developers to use. We&amp;#8217;re also planning to keep up with Ruby 1.9&amp;#8217;s new features (still in development) and always keep improving JRuby&amp;#8217;s performance and Java integration capabilities.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; What benefits do you think JRuby will bring to the Ruby and Java communities?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; For Rubyists, we have a high performance Ruby implementation with native threading and access to everything on the Java platform. For Java developers, we have Ruby, a beautiful and powerful language that&amp;#8217;s a lot of fun to write. I think both sides get a lot out of the deal, and we&amp;#8217;re trying to make JRuby a perfect combination of the best of both worlds.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Does JRuby mark the end of the road for MRI (the standard Ruby implementation)?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Certainly not&amp;#8230;and we always recommend that if MRI is good enough for their needs, there&amp;#8217;s no reason to update. But if they need better performance, native threading, libraries only available on the JVM, or other such bonuses that JRuby offers, they certainly should consider JRuby. And we&amp;#8217;re working hard to help folks make that transition when they&amp;#8217;re ready.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Anything else you would like to share with the RubyLearning participants?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Charles Nutter&gt;&gt;&lt;/span&gt;&lt;/strong&gt; I&amp;#8217;m very excited to hear about more and more developers taking an interest in alternative languages on the JVM. I think it shows what we&amp;#8217;re doing with JRuby and what others are doing with Groovy and Jython and Scala is the right way to go. With help from folks like the RubyLearning participants, I think we&amp;#8217;re making a better world for developers everywhere.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:blue;&#34;&gt;Satish Talim&gt;&gt;&lt;/span&gt;&lt;/strong&gt; Thanks Charles for sharing your views with the RubyLearning participants.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Charles+Nutter&#34; rel=&#34;tag&#34;&gt;Charles Nutter&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Interviews&#34; rel=&#34;tag&#34;&gt; Interviews&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Java&#34; rel=&#34;tag&#34;&gt; Java&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/JRuby+interview&#34; rel=&#34;tag&#34;&gt; JRuby interview&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/JRuby&#34; rel=&#34;tag&#34;&gt; JRuby&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;AkitaOnRails&#34; Advises A Young Ruby Beginner</title>
      <link>http://rubylearning.com/2008/04/29/akitaonrails-advises-a-young-ruby-beginner/</link>
      <pubDate>Tue, 29 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2008/04/29/akitaonrails-advises-a-young-ruby-beginner/</guid>
      <description>&lt;div&gt;
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Fabio Akita&#34; src=&#34;http://www.rubylearning.com/images/akita.jpg&#34; alt=&#34;Fabio Akita&#34; /&gt;&lt;strong&gt;Fabio Akita&lt;/strong&gt; is a Brazilian Rails enthusiast, also known online as &amp;#8220;AkitaOnRails&amp;#8221;. He regularly write posts on his own &lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;blog&lt;/a&gt; and had published the very first book tailored for the Brazilian audience called &amp;#8220;Repensando a Web com Rails&amp;#8221;. He is now a full-time Ruby on Rails developer working as Brazil Rails Practice Manager for the Utah company Surgeworks LLC.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Paresh Mathur&#34; src=&#34;http://www.rubylearning.com/images/paresh.gif&#34; alt=&#34;Paresh Mathur&#34; /&gt;&lt;strong&gt;Paresh Mathur&lt;/strong&gt; aka &amp;#8220;Rick&amp;#8221;, is a 16 year young participant &amp;#8211; ceek (cool geek) &amp;#8211; at the &amp;#8216;&lt;a href=&#34;http://rubylearning.org/&#34;&gt;Free Online Ruby Programming Course&lt;/a&gt;&amp;#8216;. &amp;#8216;Rick&amp;#8217; is a student in XII grade at the Kendriya Vidyalaya Cantonment School in Ahmedabad, India. He&amp;#8217;s an open source fan, loves programming and is very active in the course forums. If not studying, Paresh is tinkering on his computer and helping out friends.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;Paresh felt that a pro like Fabio should write an article on what one should do after the &amp;#8216;Free Online Ruby Programming Course&amp;#8217;. He was not aware whether such an article existed and if it did, it would be of great help to him.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Paresh had two questions for Fabio and Fabio was kind enough to answer and also give his invaluable advice.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:blue;&#34;&gt;&lt;strong&gt;Paresh&gt;&gt;&lt;/strong&gt; &lt;strong&gt;Further Studies&lt;/strong&gt;: What to do next? Can you recommend things to study after the course, including different frameworks and external libraries? If a free course like Satish&amp;#8217;s is in your mind please do share.&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Fabio&gt;&gt;&lt;/strong&gt; The question is very broad in nature, so I can&amp;#8217;t pinpoint a direct answer.
  &lt;/p&gt;
  
  &lt;p&gt;
    Satish has an excellent free online Ruby course at &lt;a href=&#34;http://rubylearning.org/&#34;&gt;rubylearning.org&lt;/a&gt;. Satish&amp;#8217;s approach should be replicated more, that&amp;#8217;s for sure, and he is doing a great contribution to the community. So, no, I don&amp;#8217;t know by heart any other online free course comparable to Satish&amp;#8217;s. That said, there are a number of good online resources. One that should be on anyone&amp;#8217;s RSS reader is Ryan Bates&amp;#8217; &amp;#8220;&lt;a href=&#34;http://railscasts.com/&#34;&gt;Railscasts&lt;/a&gt;&amp;#8220;, where he publishes several small screencasts with tips and best practices using Rails. The other great resource is &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&amp;#8217;s&lt;/a&gt; series of screencasts. Those are not free but are much more elaborate and complete.
  &lt;/p&gt;
  
  &lt;p&gt;
    I think these are the &amp;#8216;usual suspects&amp;#8217;. But there is so much more. And on the other hand you have to ask yourself &amp;#8220;&lt;strong&gt;at what level am I?&lt;/strong&gt;&amp;#8220;
  &lt;/p&gt;
  
  &lt;p&gt;
    Most screencasts, tutorials, articles on the internet assume that you&amp;#8217;re at least a reasonably educated programmer. By that I mean, you:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      have a very good understanding on &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/teaching/algorithms-web.html&#34;&gt;Algorithms and Data Structure&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      have a reasonable understanding on the several different kinds of &lt;a href=&#34;http://en.wikipedia.org/wiki/Programming_language&#34;&gt;programming language styles.&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      understand the underpinnings of &lt;a href=&#34;http://en.wikipedia.org/wiki/Computer#Input&#34;&gt;computers&lt;/a&gt;. Basic concepts like I/O.
    &lt;/li&gt;
    &lt;li&gt;
      you understand, at least, how to deal with structured data in &lt;a href=&#34;http://en.wikipedia.org/wiki/Database#Relational_model%20databases&#34;&gt;RDBMS-based databases&lt;/a&gt;. &lt;a href=&#34;http://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt; should not be a problem to you.
    &lt;/li&gt;
    &lt;li&gt;
      understand that object-oriented programming is a good thing but it is &lt;a href=&#34;http://en.wikipedia.org/wiki/Object_oriented#Criticism&#34;&gt;neither&lt;/a&gt; the only solution nor the best one for all cases.
    &lt;/li&gt;
    &lt;li&gt;
      understand &lt;a href=&#34;http://en.wikipedia.org/wiki/Operating_system#Unix_and_Unix-like_operating_systems&#34;&gt;operating systems&lt;/a&gt; well enough and therefore Linux doesn&amp;#8217;t scare you without GUI tools.
    &lt;/li&gt;
    &lt;li&gt;
      know &lt;a href=&#34;http://www.googleguide.com/&#34;&gt;how to use Google&lt;/a&gt; (and this is not a joke, many people don&amp;#8217;t!)
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    The field of Computer Science is very very broad; it is an enormous and ever growing body of knowledge and it is impossible to know everything. That&amp;#8217;s why it is so important to at least focus on the foundations, so you can build your way up on your own. The best programmers learn by themselves the required skills for our craft. Programming is basically a &lt;a href=&#34;http://www.mcbreen.ab.ca/SoftwareCraftsmanship/&#34;&gt;craftsmanship&lt;/a&gt;. The same way no one can teach you how to become a Leonardo Da Vinci; it is obviously difficult to come up with a recipe to become the next &lt;a href=&#34;http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;Donald Knuth&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    That said, you don&amp;#8217;t and you shouldn&amp;#8217;t try to learn every single bullet point, I mentioned above, in deep detail. Remember: I said it is impossible to know the whole. Each bullet point above is a vast and complex body of knowledge by itself. Don&amp;#8217;t try to learn every bit at once, it is time consuming and not valuable.
  &lt;/p&gt;
  
  &lt;p&gt;
    Instead, educate yourself to at least get to know the basics on each. You don&amp;#8217;t have to become Linus Torvalds to be able to understand the basics on operating systems. Install any Linux distro, read the several tutorials, try to do something useful with it. Then try to solve problems, tweak it, try to make it do different things than what was offered to you out-of-the-box. Try to make it crash and understand why it does so. Trying and error is the best learning process if you are a beginner.
  &lt;/p&gt;
  
  &lt;p&gt;
    There is absolutely no set of a fixed number of items that can be listed for you to learn, so you can consider yourself a &lt;strong&gt;good programmer&lt;/strong&gt;. Programming is an art that requires commitment and gives you nothing back: meaning that it never ends. Techniques get obsolete fast, new techniques arise all the time and it is your job, as a programmer, to get to know them.
  &lt;/p&gt;
  
  &lt;p&gt;
    Read good books, but never consider them absolute truths. Many books have a lot of mistakes and things that can be misinterpreted. Like the classic &lt;a href=&#34;http://en.wikipedia.org/wiki/Gang_of_Four_%28software%29&#34;&gt;Gang of Four&lt;/a&gt; book: it is more of a guideline than a defined set of authoritative techniques that you must use all the time. Different people make different implementations of the same design pattern.
  &lt;/p&gt;
  
  &lt;p&gt;
    Considering that you already know all this and I am wasting my time &lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; /&gt; Let&amp;#8217;s get straight to the Ruby specific topic: you are already an experienced programmer and you just got initial knowledge about Ruby&amp;#8217;s way. What to do next?
  &lt;/p&gt;
  
  &lt;p&gt;
    Find yourself an &lt;a href=&#34;http://catb.org/~esr/writings/cathedral-bazaar/&#34;&gt;itch to scratch&lt;/a&gt;. Meaning: find yourself a computer problem for which you may not have a good answer, just yet. You want some new desktop client to better manage your Twitter activities. You want something to hold together all passwords from all your dozen or so social network accounts. Choose whatever you want. It can even be something that already exists but that you think you could do better.
  &lt;/p&gt;
  
  &lt;p&gt;
    It shouldn&amp;#8217;t be something too big &amp;#8220;&lt;strong&gt;I want to write the next MySpace in Ruby&lt;/strong&gt;.&amp;#8221; Less ambition. You&amp;#8217;re just getting started. Type in your first &amp;#8220;Hello World&amp;#8221;, see it running and set the stage for more code to come.
  &lt;/p&gt;
  
  &lt;p&gt;
    Once you do that, you will probably find yourself either doing a lot of code for something that was supposed to be simple, by Ruby standards, and chances are that you are reinventing the wheel. Define the specific problem you are coding right now and research to see if an alternative library doesn&amp;#8217;t exist already. Or you will try to code something and get stuck at some problem you don&amp;#8217;t even know how to start (&amp;#8220;&lt;strong&gt;how do I authenticate into a Twitter account?&lt;/strong&gt;&amp;#8220;).
  &lt;/p&gt;
  
  &lt;p&gt;
    In all cases you have several answers: Google for general research. IRC channels. Google Groups discussion lists. Web-based forums. The Blogosphere. Suit yourself, there is a ton of information available for just about any kind of computer problem. If you are having trouble, chances are someone else has already solved it and was kind enough to document and make it available online. It is just a matter of spending a few minutes researching for it.
  &lt;/p&gt;
  
  &lt;p&gt;
    Without a small problem to solve, you won&amp;#8217;t be able to warm yourself up quick enough. Reading books is fine, but kind of pointless without real usage. Experience is the best way to learn something. You can read hundreds of books on how to ride a bicycle, but you won&amp;#8217;t learn it until you actually try the real thing and fall down for the first time. Only then you start to appreciate the learning process.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:blue;&#34;&gt;&lt;strong&gt;Paresh&gt;&gt; Hands on&lt;/strong&gt;: Most people, like me, would like to contribute our time, skills and expertise to a project but invariably are unaware of where and how to do so. Fabio, could you suggest some?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Fabio&gt;&gt;&lt;/strong&gt; This is another thing that has no real answer. Being very arrogant the short answer is: &amp;#8220;&lt;strong&gt;if you don&amp;#8217;t know how to contribute, you shouldn&amp;#8217;t be thinking about it just yet&lt;/strong&gt;.&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    Let me reason why is that: contributing to an open source software is far more complex than writing half a dozen lines of code, submitting it and expecting that it will be used. The process is a lot more complex than that.
  &lt;/p&gt;
  
  &lt;p&gt;
    Understand that open source projects are &lt;a href=&#34;http://www.ruby-lang.org/en/community/&#34;&gt;community-driven&lt;/a&gt;. It means that first of all you should start becoming part of a community. It also assumes that you already know of some project you want to participate in. For that, you can&amp;#8217;t be an internet illiterate.
  &lt;/p&gt;
  
  &lt;p&gt;
    One project that you know about is Ruby. Fine, you can start by joining the &lt;a href=&#34;http://www.ruby-forum.com/&#34;&gt;Ruby Core Group&lt;/a&gt;. You can start by downloading Ruby&amp;#8217;s &lt;a href=&#34;http://www.ruby-lang.org/en/downloads/&#34;&gt;source code&lt;/a&gt; (which is in C, mind you). You will quickly find out that each open source group has a lot going on: bug fixes, feature request, politics. Yes, even politics. You have to be nice to your neighbors in order to gain respect. Simply shouting &amp;#8220;&lt;strong&gt;I want my code in!&lt;/strong&gt;&amp;#8221; will lead you no-where.
  &lt;/p&gt;
  
  &lt;p&gt;
    You don&amp;#8217;t contribute for recognition, you contribute because you think some project is valuable to you and, once you get experience and knowledge about its inner gears and general community culture, you think you are able to help in some way: fixing bugs, completing documentation, answering other newbie questions at the forums, giving in new ideas. It is the same thing as joining any social group in real life: don&amp;#8217;t think that just because you&amp;#8217;re in everybody has to pay attention on you. Worse: don&amp;#8217;t even think that your solution is better than anyone else. Chances are that your requests are not new, they were already discussed and decisions were already made. Read the CHANGELOGs, read the discussion lists archives. It is very annoying when newbies sign in and start asking random request that are already buried.
  &lt;/p&gt;
  
  &lt;p&gt;
    Also, make sure you understand the &lt;a href=&#34;http://www.gnu.org/philosophy/philosophy.html&#34;&gt;Philosophy&lt;/a&gt; around open source software. It is not as trivial as one could think. Understand open source &lt;a href=&#34;http://en.wikipedia.org/wiki/Open_source_license&#34;&gt;Licenses&lt;/a&gt;. Chances are, if you are a beginner, that you never read any of those documents. All of them being published in the open, it is not an excuse to not know all of them.
  &lt;/p&gt;
  
  &lt;p&gt;
    Again, let&amp;#8217;s assume that you already are a programmer well aware of all the culture and what&amp;#8217;s going on around open source projects. You just want to know how to contribute to the Ruby community.
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Ruby 1.8 is in maintenance mode. There are bugs to be fixed, documentation to be completed. Join the Ruby list and see what they are discussing.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubyforge.org/projects/rubyinstaller/&#34;&gt;Ruby on Windows&lt;/a&gt; needs some love. Luis Lavena would love to have more help on testing, debugging, Windows internal specifics (if you are a Windows system specialist), documentation, packaging, distribution and so on.
    &lt;/li&gt;
    &lt;li&gt;
      Maybe you are a web developer and you learned Ruby because of Rails. So show Rails some love and start digging through Rails &lt;a href=&#34;http://rails.lighthouseapp.com/&#34;&gt;bug list&lt;/a&gt;. Follow the discussions and read what people are already doing.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubyforge.org/top/mostactive.php?type=week&#34;&gt;RubyForge&lt;/a&gt; is one of the main sources of Ruby projects. Check it out for projects that you like and join their communities.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://github.com/popular/forked&#34;&gt;GitHub&lt;/a&gt; is the new kid on the block but it is already hosting several high profile projects. Bear in mind that popular projects means lots of people to deal with, you don&amp;#8217;t want to attract attention without need.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    You did realize that the first step for contributing to any open source project is to join their communities, right? It is not enough to download the source code, change a few bits and expect it to show up in the official repository. Open source means commitment to a community. It is totally driven by mutual respect, open discussions.
  &lt;/p&gt;
  
  &lt;p&gt;
    If you are a beginner it is good enough to just join the community and follow what&amp;#8217;s going on, passively, until you get a grip on how things work and start posting questions and asking directions. This is socializing-101. There actually is a &lt;a href=&#34;http://www.inet.bg/faq/netiquete.html&#34;&gt;Netiquete&lt;/a&gt; that you really should follow.
  &lt;/p&gt;
  
  &lt;p&gt;
    As I said before, look for an &amp;#8216;itch to scratch&amp;#8217;. No one wakes up one day and decides &amp;#8216;I will help some project&amp;#8217;. It is not how it works. The more usual use case is that you&amp;#8217;re using something from somebody else and you get yourself stuck with it. &amp;#8220;&lt;strong&gt;It may be a bug!&lt;/strong&gt;&amp;#8221; But it may not! First thing: you Google over it. You research the discussion forums and mailing lists. You research the bug tracker site (if the project has one). Then, after a lot of researching you realized that it is an undocumented bug. Second step, you make sure it is a bug and are not using the product in the wrong way. You build tests. You debug it. You think twice.
  &lt;/p&gt;
  
  &lt;p&gt;
    Once you have done all that and know it is a bug, you go to step three and see if it is something you think you&amp;#8217;re able to fix. Either way, you ask the community about it, if no one knows anything about it, you file in a bug ticket. Now you can wait for a fix or, if you really want to contribute, you post all details about the bug, all your debug information and, hopefully either fix it yourself or ask for someone else, more experienced, to fix it.
  &lt;/p&gt;
  
  &lt;p&gt;
    It&amp;#8217;s a very organic process and it become second nature to every non-passive programmer reasonably fast. The important thing is to understand that no good programmer lives in isolation: the internet is a living and breathing world-wide community that you must be a part of, in order to become a respectable and good programmer.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Conclusion&lt;/strong&gt;:
  &lt;/p&gt;
  
  &lt;p&gt;
    So, you are a beginner programmer. Welcome to the Programming field. There are lots of exciting new things for you to explore and learn. It is even more exciting because it has no defined goal, no finish line, no end at all. You will never get bored because it is ever changing. You can learn at the very least, one new thing every single day.
  &lt;/p&gt;
  
  &lt;p&gt;
    You can and should socialize with other experienced programmers. Join communities. Read good books. This is a wonderful craft that can be very rewarding once you get yourself really started.
  &lt;/p&gt;
  
  &lt;p&gt;
    Understand that there is no such thing as a &amp;#8216;perfect software&amp;#8217; or &amp;#8216;bug free software&amp;#8217;. You will make mistakes, lot&amp;#8217;s of them. And that is okay as far as you recognize them and learn from your mistakes. It is not how many mistakes you make, it is how many of them do you repeat over and over. It is how prepared you are to handle mistakes. There is no such a thing as a &amp;#8216;perfect painting&amp;#8217;. An artist is always tweaking his own skills. That&amp;#8217;s what we do.
  &lt;/p&gt;
  
  &lt;p&gt;
    Good luck, Paresh.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:blue;&#34;&gt;&lt;em&gt;Thank you Fabio. In case you have any queries, questions on this article, kindly post your questions here and Fabio would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:red;&#34;&gt;Update:&lt;/span&gt;&lt;/strong&gt; Participate in the discussion at &lt;a href=&#34;http://www.dzone.com/links/fabio_akita_advises_a_young_ruby_beginner.html&#34;&gt;DZone&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Brazil&#34; rel=&#34;tag&#34;&gt;Brazil&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Fabio+Akita&#34; rel=&#34;tag&#34;&gt;Fabio Akita&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Rails&#34; rel=&#34;tag&#34;&gt;Rails&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Beginner&#34; rel=&#34;tag&#34;&gt;Ruby Beginner&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Programming&#34; rel=&#34;tag&#34;&gt;Ruby Programming&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>