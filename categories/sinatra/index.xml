<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sinatra on RubyLearning Blog</title>
    <link>http://rubylearning.com/categories/sinatra/</link>
    <description>Recent content in Sinatra on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/categories/sinatra/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What are the Twelve Rules of Sinatra? (Reprint)</title>
      <link>http://rubylearning.com/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 19th July. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Twelve Rules of Sinatra
  &lt;/h3&gt;
  
  &lt;p class=&#34;update center&#34;&gt;
    &lt;strong&gt;The Twelve Rules of Sinatra: &lt;a href=&#34;http://rubylearning.com/data/Sinatra12Rules.pdf&#34;&gt;Download this as a Free Report&lt;/a&gt;.&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Recently, I was reading Scott Adams&amp;#8217; (of Dilbert fame) blog post &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/rule_of_twelve&#34;&gt;Rule of Twelve&lt;/a&gt;&amp;#8221; where he stated:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      The Rule of Twelve states that if you know twelve concepts about a given topic you will look like an expert to people who only know two or three. If you learn more than twelve concepts about a topic, the value of each additional one drops off considerably. Allow me to be the first to confess that twelve is not a magic and inviolable number.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    He also wrote a follow-up post to support his statement: &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/twelve_rules_of_energy_efficient_building/&#34;&gt;Twelve Rules of Energy Efficient Building&lt;/a&gt;&amp;#8220;.
  &lt;/p&gt;
  
  &lt;p&gt;
    This made me wonder, could we apply the same &amp;#8220;Rule of Twelve&amp;#8221; to &lt;strong&gt;Sinatra&lt;/strong&gt;?
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Jeremy Evans&#34; src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy Evans&#34; /&gt;Here is &lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy Evans&amp;#8217;&lt;/a&gt;&lt;/strong&gt; take on this:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Just like Rails, keep your controller/actions simple, and put most of your business logic in your models. This makes testing and code reuse easier.
    &lt;/li&gt;
    &lt;li&gt;
      Also like Rails, avoid excess logic in your views. Add helper methods that the views call to keep the views clean.
    &lt;/li&gt;
    &lt;li&gt;
      Unlike Rails, read the Sinatra source. The main part is a single file that&amp;#8217;s around 1000 lines of quite understandable Ruby code. Just reading it will probably make you a better programmer.
    &lt;/li&gt;
    &lt;li&gt;
      If you have a problem that you think other people probably have (e.g. a Rails-like flash), look first for a Rack middleware that handles it, rather than recreating the wheel.
    &lt;/li&gt;
    &lt;li&gt;
      Untested code will probably break sooner than later, so if you want the code to work in the future, write tests.
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Well, Jeremy has set the ball rolling. &lt;b&gt;What&amp;#8217;s your take on this?&lt;/b&gt; Kindly post your thoughts as comments to this blog post. Looking forward to some interesting read.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>20&#43; Rubyists are using Sinatra - Do you? (Reprint)</title>
      <link>http://rubylearning.com/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This first appeared on 29th June 2009 and is being reprinted
as the original is not accessible.&lt;/p&gt;

&lt;h3 id=&#34;20-rubyists-are-using-sinatra-do-you:b9d73662ccbad47811ad53b639d84c77&#34;&gt;20+ Rubyists are using Sinatra – Do you?&lt;/h3&gt;

&lt;p&gt;With &lt;strong&gt;Sinatra&lt;/strong&gt; you can quickly create your own tiny web-applications
in Ruby and write lots of small services. RubyLearning caught up with
some Rubyists working with Sinatra and asked them as to why, how and
where they use &lt;em&gt;Sinatra&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AaronQuint.jpg&#34; alt=&#34;Aaron
Quint&#34; title=&#34;Aaron Quint&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/aq&#34;&gt;Aaron
Quint&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’ve been using Sinatra all over the
place. With &lt;a href=&#34;http://code.quirkey.com/vegas/&#34;&gt;Vegas&lt;/a&gt; I’ve been using it
as a way to provide simple web interfaces to existing code. I’ve also
been using it to prototype new application ideas. When not using
Sinatra, I’ve been using some of the same basic ideas in JavaScript with
&lt;a href=&#34;http://code.quirkey.com/sammy/&#34;&gt;Sammy.js&lt;/a&gt;. In general, Sinatra is just
fun to use as it provides the most direct and clean route to get an idea
or a piece of code on the web. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/20/interview-aaron-quint-on-sinatra/&#34;&gt;Read Aaron’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AdamKeys.jpg&#34; alt=&#34;Adam
Keys&#34; title=&#34;Adam Keys&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/therealadam&#34;&gt;Adam
Keys&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m using Sinatra for two
things. For personal stuff, I always reach for Sinatra when I want to
prototype an idea. It’s easy to get something in place so I can iterate
on the idea quickly. Sinatra is great for deploying prototypes too!&lt;/p&gt;

&lt;p&gt;At FiveRuns, we use Sinatra as the API endpoint for Dash. We’ve got
hundreds of clients in our public beta sending custom metrics to Dash
once a minute. Sinatra has handled this load with aplomb. Further,
because our API is just a few URL endpoints, Sinatra’s minimal API is a
perfect match for our needs. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/03/interview-adam-keys-on-sinatra/&#34;&gt;Read Adam’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/nelstrom-125.jpg&#34; alt=&#34;Andrew
Neil&#34; title=&#34;Andrew Neil&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;Andrew
Neil&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;a href=&#34;http://all-sorts.org/&#34;&gt;All
Sorts&lt;/a&gt; searches Twitter every minute for the
&lt;a href=&#34;http://search.twitter.com/search?q=%23collectivenouns&#34;&gt;#collectivenouns&lt;/a&gt;
hashtag, then parses matching tweets to identify collective nouns. The
requirements were very simple – no user log in, no CRUD, only a handful
of models and routes – so Sinatra was the perfect choice for this
project. I took Nick Plante’s
&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt; source as a
starting point, which proved to be an excellent introduction to Sinatra
and DataMapper. Part of the appeal, of course, was to dabble with new
technologies. The live site runs on passenger, with Rack::Cache taking
care of the caching.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/bruno.jpg&#34; alt=&#34;Bruno
Miranda&#34; title=&#34;Bruno Miranda&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/brupm&#34;&gt;Bruno
Miranda&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra on a url
shortner app that I wrote at &lt;a href=&#34;http://s.bopia.com/&#34;&gt;s.bopia.com&lt;/a&gt; as well
as a proxy app that processes beanstalkd queue items for
&lt;a href=&#34;http://mx.msn.cyloop.com/&#34;&gt;mx.msn.cyloop.com&lt;/a&gt;. Sinatra is a great tool
to accomplish small tasks as a minimal layer on top of http protocol.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris
Strom&#34; title=&#34;Chris Strom&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;Chris
Strom&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra most
prominently to serve up my family’s cookbook, backed by a CouchDB store.
Excruciating details on how I do this are contained in a series of blog
posts starting with:
&lt;a href=&#34;http://japhr.blogspot.com/2009/03/my-chain.html&#34;&gt;http://japhr.blogspot.com/2009/03/my-chain.htm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I chose Sinatra because it felt close to the metal — especially
important because I did not want anything interfering with CouchDB. I
continue to use Sinatra because it complements my BDD workflow
exceedingly well. Sinatra’s lean DSL encourages me to produce similarly
beautiful code. Sinatra never gets in my way. Sinatra goes out of its
way to make my life simple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey
Donohoe&#34; title=&#34;Corey Donohoe&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/atmos&#34;&gt;Corey
Donohoe&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra is great for building
non-trivial rack middleware. &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;We’re mainly using
Sinatra&lt;/a&gt; for integration applications
between existing pieces of software. Instead of working on a monolithic
app we’re writing a fleet of microapps to handle arising business needs.
We feel that Sinatra gets in the way less frequently than most other
frameworks. With cucumber and good development practices we’re using the
same top notch testing tools the Rails guys are using. In my &lt;a href=&#34;http://atmos.org/index.php/about/&#34;&gt;personal
hacking&lt;/a&gt; I’ve been using it as the
basis for twitter microapps leveraging twitter’s oauth API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/doug_sparling.jpg&#34; alt=&#34;Doug
Sparling&#34; title=&#34;Doug Sparling&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;Doug
Sparling&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; In my former company,
we had started using &lt;em&gt;Sinatra for web services&lt;/em&gt; and in one instance, a
small app used for mobile advertising that doesn’t use the database.&lt;/p&gt;

&lt;p&gt;​1) &lt;strong&gt;Why?&lt;/strong&gt; – We don’t always need the full Rails stack, particularly
with web services and anything that doesn’t require the database. It’s
also useful for use with legacy databases, which we have to deal with. I
can use Datamapper, which is thread safe (though I haven’t seen any
performance issues with Rails, which we usually cache anyway).\
2) &lt;strong&gt;How?&lt;/strong&gt; – We use Mongrel clusters for our Rails web sites, but with
the Sinatra apps we’re using Passenger. For our Sinatra web services, I
use Datamapper ORM. I have one internal web service in Rails 2.3.2, but
I’m looking at moving it to Sinatra as well.\
3) &lt;strong&gt;Where?&lt;/strong&gt; – Mostly internal web services at the moment, but I’m sure
we’ll look at it for external services as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy
Evans&#34; title=&#34;Jeremy Evans&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy
Evans&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra on quite a few
projects, mostly for small applications. At work, we use it to handle
the dynamic portion of our mostly static public website, and for some
internal applications. Personally, I use it in
&lt;a href=&#34;http://github.com/jeremyevans/giftsmas/tree/master&#34;&gt;Giftsmas&lt;/a&gt;, my open
source gift-tracking application, and in a couple of other sites I
maintain.&lt;/p&gt;

&lt;p&gt;I use Sinatra because it is simple and flexible. It doesn’t require
boilerplate code, and lets you focus on the needs of your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/graham-ashton.jpeg&#34; alt=&#34;Graham
Ashton&#34; title=&#34;Graham Ashton&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://grahamashton.net/&#34;&gt;Graham
Ashton&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I first tried Sinatra during an
in house “hack week” at &lt;a href=&#34;http://www.wordtracker.com/&#34;&gt;Wordtracker&lt;/a&gt; (one
of my main Rails clients). We used Sinatra to great effect to throw up a
user interface for a new keyword research tool that we’d come up with
during hack week. Sinatra was very accessible – the docs are well
written and the mailing list is friendly. I quickly gained a lot of
confidence in the framework by reading the code, which is succinct and
easy to follow (I wish more projects would follow the advice of the
Linux kernel coding style and wrap their code at 80 columns – it
encourages legibility).&lt;/p&gt;

&lt;p&gt;After that experience Sinatra was an obvious choice for Nesta, my &lt;a href=&#34;http://effectif.com/nesta&#34;&gt;file
based CMS&lt;/a&gt;. It’s a simple app and Sinatra is
a perfect fit for it. I had the application up and running in a matter
of days, and I really enjoyed writing it. The goal of Nesta was to build
a CMS that people could easily modify to suit their own web sites, and
Sinatra makes it very easy for people to do that. There’s not a lot of
ceremony.&lt;/p&gt;

&lt;p&gt;I still use Rails for larger apps, but I’m now turning to Sinatra first
whenever I want to try something out, or if I’m not sure where a new
application is going. It’s more fun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/hasham_small.jpg&#34; alt=&#34;Hasham
Malik&#34; title=&#34;Hasham Malik&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;Hasham
Malik&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I have recently started
development with the Sinatra micro framework while working at
&lt;a href=&#34;http://www.cambridgedocs.com/&#34;&gt;CambridgeDocs&lt;/a&gt;. Earlier we have used PHP
/ Ruby on Rails for server-side back ends of native iphone applications
that we have been developing. Sinatra lets you create REST based
services with minimalistic approach which is ideal of mobile back ends.
Sinatra is also lean and fast and at the same time it gives you the
liberty to use whichever ORM / templating system you want. Sinatra has
this positive vibe among Rubyists these days with 1.0 nearing its
release its great time to learn this new framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://grayproductions.net/images/james_headshot_square.jpg&#34; alt=&#34;James Edward Gray
II&#34; title=&#34;James Edward Gray II&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;James
Edward Gray II&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; At &lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;, Sinatra is a vital part of the
architecture of our monitoring application,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt;. We provide the API the agents use to
check-in with data via the micro framework. This is nice because it
separates the two functions of the application, allowing us to do things
like deploy an application update without interrupting the API service.
Still Sinatra gives us a touch more abstraction than something like
Rails Metal would and that makes working on the API a little easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/face_small2.jpg&#34; alt=&#34;Jeremy
Raines&#34; title=&#34;Jeremy Raines&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/jraines&#34;&gt;Jeremy
Raines&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m a web developer in Park
City, Utah. I got started using Sinatra because I was interested in REST
and I like the way Sinatra maps controller actions to HTTP verbs. I also
love its lightweight simplicity. It’s great for doing small API based
webapps and mashups. Most of my Sinatra apps use Ruby scripts fired by
cron jobs to pull data from other webservices into a SQLite database,
and serve content with Sinatra. I’ll be using it more in my work with
Purple Raincloud, a new social media consultancy here in Utah. I’m
@jraines on Twitter, and my homepage is at
&lt;a href=&#34;http://jeremyraines.com/&#34;&gt;jeremyraines.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/jjcicchelli.jpg&#34; alt=&#34;Julio Javier
Cicchelli&#34; title=&#34;Julio Javier Cicchelli&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Julio
Javier Cicchelli&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; First of all,
I like the idea to write about Sinatra and, especially, to show its
practical uses to the masses. There are a whole lot of Rails developers
but nobody seems to be taking Sinatra quite seriously (at least, this is
what I’ve been noticing in websites such as
&lt;a href=&#34;http://jobs.rubynow.com/&#34;&gt;jobs.rubynow.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I’ve just founded a company called “&lt;a href=&#34;http://rock-n-code.com/&#34;&gt;Rock &amp;amp;
Code&lt;/a&gt;” in Amsterdam, The Netherlands that
offers solutions developed on Sinatra (instead of Rails or even Merb) to
my partners. Why you would ask? Sinatra have definitely broken the MVC
paradigm (widely implemented by frameworks such as Rails, Merb, Django,
Spring, etc.) and decided to give total control back to the developer by
allowing him to build almost any kind of web-based solution (no matter
the complexity) in a very simple manner on top of the abstracted HTTP
layer it implements from Rack. Furthermore, Sinatra applications can
make use of the existing gem library instead of consuming plug-ins
specifically-designed for a particular framework. How my company is
using Sinatra? I’m currently developing RESTful web services that uses
CouchDB and communicates with clients written in both MacRuby and iPhone
(in the near future) using JSON but I’ve planned to use Sinatra in web
development and also server interfacing. Where can it be applied? I
believe that Sinatra suits perfectly for prototyping, client-server
applications, SOA applications and interfacing servers, for starters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/karmi_mugshot.jpg&#34; alt=&#34;Karel
Minarík&#34; title=&#34;Karel Minarík&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;Karel
Minarík&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra powers &lt;a href=&#34;http://www.restafari.org/&#34;&gt;my
blog&lt;/a&gt;, deployment automation, internal apps
and is generally the tool of choice whenever I need to build a web app
without overhead. Sinatra excels when doing “freestyle coding” — it’s a
sort of a blank canvas: you’re bound only by HTTP and your Ruby
knowledge. Sinatra doesn’t force anything on you, which can lead to
awesome or evil code, in equal measures — and that’s part of its charm
to me. Sinatra exposes you to Rack intensely, though, which brings
rather different mindset for building web applications then the
prevailing “monolithic” style. See eg.
&lt;a href=&#34;http://github.com/rack/rack-contrib/tree/master&#34;&gt;www.github.com/rack/rack-contrib&lt;/a&gt;
for inspiration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://twitter.com/cypher&#34;&gt;Markus Prinz&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra because
it concentrates on one area, and does that very well, leaving the rest
up to me. So whenever I have some idea that requires a web app, I can
try it out very quickly with Sinatra with a minimum of fuss. And since
Sinatra is not a one-size-fits-all solution, but instead essentially a
library, I have a great deal of flexibility in using it. That means I
can try out new approaches to things like data storage, and use
something like Tokyo Cabinet/Tokyo Tyrant or CouchDB instead of a
relational database. But I can also use Sinatra as a component in a
larger application to offer a web interface, without interfering with
the rest of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://highgroove.com/images/about/mtodd.jpg&#34; alt=&#34;Matt
Todd&#34; title=&#34;Matt Todd&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;Matt
Todd&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We at @highgroove (&lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;) use Sinatra in a lot of different
projects for memory-efficient web services. One of our products,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt; (@scoutapp) uses it to consume thousands
of reports constantly. We are able to fine tune our stack with Sinatra
to keep it minimal, responsive, and powerful.&lt;/p&gt;

&lt;p&gt;Highgroove Studios is Charles Brian Quinn (@seebq), Derek Haynes
(@dhaynes23), Andre Lewis (@alewis), James Edward Gray II (@JEG2), and
myself, Matt Todd (@mtodd).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/nap.jpg&#34; alt=&#34;Nick
Plante&#34; title=&#34;Nick Plante&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;Nick
Plante&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We’re using Sinatra for a
variety of small web sites and services. Why? Because Sinatra is small,
RESTful, fast, and intuitive. It’s perfect for lightweight apps and
APIs.&lt;/p&gt;

&lt;p&gt;One of our sites, &lt;a href=&#34;http://rdoc.info/&#34;&gt;rdoc.info&lt;/a&gt;, uses it to generate
and host documentation for a variety of Ruby libraries, integrating with
GitHub web hooks to automatically regenerate docs whenever projects are
updated. We could have used Rails, but the additional overhead, helpers,
and other extras that come pre-packaged with it just weren’t necessary.
In fact, they would have probably gotten in our way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tweetdreams.org/&#34;&gt;Tweetdreams&lt;/a&gt; is another small Sinatra-based
project that we launched earlier this year. It’s a Twitter dream
journal. There really isn’t much to it, which is sort of the beauty of
it. The source is available on GitHub as
“&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt;” and it’s been
used as the basis for a number of other Twitter-oriented projects
including the &lt;a href=&#34;http://all-sorts.org/&#34;&gt;http://all-sorts.org&lt;/a&gt; linguistic
experiment created by Andrew Neil.&lt;/p&gt;

&lt;p&gt;I should note that both of these projects use DataMapper and Haml, too.
Sinatra is ORM and templating language agnostic, which can be another
bonus if you already have a predefined set of tools that you’re familiar
with and want to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/petercooper.jpg&#34; alt=&#34;Peter
Cooper&#34; title=&#34;Peter Cooper&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/peterc&#34;&gt;Peter
Cooper&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; As I don’t work on big
projects, I’m using Sinatra for everything now, where I would have used
Rails before. It’s nearly all local or private stuff for now but I’d
like to be able to release more community projects using it in due
course. I love Sinatra because it’s less opinionated and more Ruby-like
than Rails. It might take me a little longer to achieve certain results
but I can “plug and play” code, libraries, and frameworks wherever I
like with it, rather than have to work around tightly coupled
“conventions.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/PiyushGupta.jpg&#34; alt=&#34;Piyush
Gupta&#34; title=&#34;Piyush Gupta&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;Piyush
Gupta&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; When your application is
small, Sinatra helps us to develop applications quickly and easily.
Sinatra is easy to understand and follow. We have recently used it for a
twitter mashup called MillionTwitter Follower which is not yet live.
Expecting it to be live soon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/sam.jpg&#34; alt=&#34;Sam
Goebert&#34; title=&#34;Sam Goebert&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;Sam
Goebert&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt;
&lt;a href=&#34;http://www.bigcurl.de/&#34;&gt;Bigcurl&lt;/a&gt; uses Sinatra to power its &lt;a href=&#34;http://www.httpush.com/&#34;&gt;HTTPush
API&lt;/a&gt;, which is a hosted gateway to the Apple
Push Notification Service. Our complete api frontend is implemented
using Sinatra. This gave us a tremendous boost during development of the
API specification. We were able to experiment more as the code has very
few lines. Second reason we went with Sinatra was memory consumption,
since we span lot of instances over the course of a day this was crucial
to get the maximum out of a machine but maintaining the beauty in code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/sau.jpg&#34; alt=&#34;Sau Sheong
Chang&#34; title=&#34;Sau Sheong Chang&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;Sau
Sheong Chang&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I picked up Sinatra
first when I was writing my &lt;a href=&#34;http://blog.saush.com/2009/03/write-an-internet-search-engine-with-200-lines-of-ruby-code/&#34;&gt;search
engine&lt;/a&gt;
and I was looking for a simple way to write my search engine interface.
The simplicity of Sinatra blew me away and I was soon knee-deep into
writing more apps on Sinatra. After a few more applications, I was
convinced that Sinatra is the way to write web applications as it is
meant to be. Today I use it to write quick and simple web applications,
often in combination with DataMapper, that serve as front-end interfaces
for larger systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/saurabhpurnaye.jpg&#34; alt=&#34;Saurabh
Purnaye&#34; title=&#34;Saurabh Purnaye&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;Saurabh
Purnaye&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I work for Synechron, Pune.
The applications we create are mostly UI based (html/css/jquery and
flex), and I need web services to respond to the calls from UI – that’s
where I use Sinatra. Sinatra is really fast and easy for providing
RESTful web service solutions. There are many options while working with
Sinatra – for example Database: ORM (datamapper/active record),
Templating: (erb/haml/builder), http caching, filters, helpers and error
handling. One of it’s best features is it comes with Rack middleware.
For the last 6 months I am using Sinatra and I feel very happy to work
with it.&lt;/p&gt;

&lt;h3 id=&#34;do-you-use-sinatra:b9d73662ccbad47811ad53b639d84c77&#34;&gt;Do YOU use Sinatra?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ad.ly/refer/2014322399&#34;&gt;&lt;img src=&#34;http://ad.ly/static/images/referral/square.gif&#34; alt=&#34;Twitter&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a Rubyist using Sinatra, &lt;em&gt;we would like to know as to why,
how and where you are using Sinatra&lt;/em&gt;. Post this as a blog comment.
Thanks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited
offer Sinatra and Rails hosting running on a Phusion Passenger
(mod_rails) and LAMP stack. If you want to get to know them first, or
simply want to try out your Sinatra or Rails skills, &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;let them arrange a
free trial hosting
account&lt;/a&gt; for you – full
technical support from their team is included!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corey Donohoe: How do I learn and master Sinatra?</title>
      <link>http://rubylearning.com/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: We are re-printing this blog post that appeared on 6th July 2009, as the original post is not accessible.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Welcome to the &lt;b&gt;first&lt;/b&gt; installment on the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, of a mini series &amp;#8211; &amp;#8220;&lt;strong&gt;How do I learn and master Sinatra?&lt;/strong&gt;&amp;#8221; &amp;#8211; by top Rubyists using &lt;em&gt;Sinatra&lt;/em&gt;. The interview series will provide insight and commentary from these notable &lt;em&gt;Sinatra&lt;/em&gt; developers, with the goal of facilitating and providing answers to the questions Ruby beginners face on &lt;em&gt;how to learn and master Sinatra&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Corey Donohoe, could you tell us something about yourself &amp;#8211; your background, where you are based?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Corey Donohoe&#34; src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey Donohoe&#34; /&gt;&lt;strong&gt;Corey Donohoe&gt;&gt;&lt;/strong&gt; I&amp;#8217;m &lt;a href=&#34;http://atmos.org/&#34;&gt;Corey Donohoe&lt;/a&gt;. I&amp;#8217;m based out of Boulder, Colorado &amp;#8211; USA. My background is in computer science and system administration though I prefer hacking to either of those labels. I&amp;#8217;m a pretty normal dude, I enjoy cycling, music, coffee, micro brews, and all the other awesomeness that my home state has to offer. I&amp;#8217;ve been working for &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;Engine Yard&lt;/a&gt; since March of &amp;#8217;07 doing everything from app support to internal development. I&amp;#8217;m currently 1/2 of our internal integrations team.
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra&amp;#8217;s greatest strength is its flexibility
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Are there any pre-requisites for a person to start learning Sinatra&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; There aren&amp;#8217;t any hardcore prerequisites per se; Ruby and experience in a Ruby web framework is a plus. HTTP verbs play a huge role in Sinatra, as well as things like query and post params. If you get those concepts you can hit the ground running.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Learn Sinatra incrementally. If you have new business requirements try to think about things like &amp;#8220;how would i implement this in Sinatra?&amp;#8221; Take the time to figure that requirement out in Sinatra then throw the solution out! When the time comes to use Sinatra for something you&amp;#8217;ll have a much more broad understanding of the framework and you&amp;#8217;ll hit fewer blockers.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Which area of Sinatra should a beginner pay particular attention to?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Understanding the difference between &lt;b&gt;Sinatra::Base&lt;/b&gt; and &lt;b&gt;Sinatra::Default&lt;/b&gt; is definitely something a Sinatra beginner should focus on early. &lt;b&gt;Sinatra::Base&lt;/b&gt; is for writing Rack middleware, and &lt;b&gt;Sinatra::Default&lt;/b&gt; is normally for writing Rack applications. Learning the modular style app development is really useful as well as using the register method to include pieces of functionality. Getting a handle on those concepts will expose you to the rest of Sinatra, which is relatively intuitive.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is the official documentation on Sinatra good enough for a beginner? Are there areas which need improvement or need to be re-written&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; The Sinatra documentation is well done and I can generally find answers to my questions just by referencing the docs. There&amp;#8217;s always #sinatra on freenode or the Sinatra book on github if you need additional help too. There&amp;#8217;s plenty of pretty well tested examples on github using Sinatra, hancock and integrity come to mind.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Sequel, DataMapper, ActiveRecord &amp;#8211; which one would you recommend to use with Sinatra and why?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; I use DataMapper exclusively. It was a bumpy ride a year ago but these days it&amp;#8217;s acceptable for production use. We interface with more than just relational databases and the ability to keep a consistent model syntax across various data sources is really attractive to us. Realistically I feel like I spend less time fighting my framework when I&amp;#8217;m using DataMapper so it&amp;#8217;s the clear choice. The one place I wouldn&amp;#8217;t use dm in would be a join heavy relational environment; ActiveRecord is way better at that.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is an understanding of Rack important while learning Sinatra? Why? Which area of Rack should one be really comfortable with?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; You don&amp;#8217;t need a solid understanding of Rack to get a Sinatra up and running, but you&amp;#8217;ll be missing out on a lot of the power. It&amp;#8217;s extremely beneficial to take the time to learn how the &lt;b&gt;Rack::Builder&lt;/b&gt; works as well as the usage of the &lt;b&gt;use/map/run&lt;/b&gt; commands in that context. The modularity of Rack really becomes apparent and you&amp;#8217;ll find yourself using Sinatra more effectively.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one hone one&amp;#8217;s skills in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Read code, write test code, write code. All of the awesome testing frameworks available for Ruby are available to Sinatra. If you don&amp;#8217;t write tests it might be a good way to familiarize yourself with testing best practices without the overheard of a larger framework.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What type of projects should a beginner work on to gain more expertise in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;A beginner would benefit from writing something completely API driven as a first project&lt;/span&gt;. So many people couple databases with dynamic web applications but it&amp;#8217;s kind of liberating to just be an intermediary service. Twitter apps are pretty trivial to implement and can teach you a lot. They also expose you to a pretty large userbase to solicit feedback.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you suggest some web services that a Sinatra beginner could develop himself / herself?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Web services are great targets for introducing Sinatra into your workplace&lt;/span&gt;. Identify a pain point in your organization and put a small app in front of it. It doesn&amp;#8217;t have to replace something overnight but it&amp;#8217;s a great way to sneak functionality in at work. Once you have a few of these built you start to reap the benefits of microapps and web services.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Anything else you would like to add?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Learning Sinatra is the best thing you can do while we all wait for Rails 3 to land&lt;/span&gt;. The middleware you write will be able to be dropped right into your Rails 3 applications so it&amp;#8217;s not like you&amp;#8217;re wasting time. We&amp;#8217;re starting to build really modular systems using Sinatra by building APIs into those systems. I think a lot of people would benefit from breaking their monolith apps down into microapps and Sinatra is a great way to do it.
  &lt;/p&gt;
  
  &lt;p&gt;
    People looking for a template might want to investigate the singem gem. It has basic templates for twitter apps or regular webservices. All of them are bootstrapped for testing with cucumber+rspec.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Corey. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Corey would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited offer Sinatra and Rails hosting running on a Phusion Passenger (mod_rails) and LAMP stack. If you want to try your hand at developing with Sinatra, why not let them arrange a &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;trial hosting account&lt;/a&gt; for you? You&amp;#8217;ll get to deploy your app, with full technical support from their team!
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Follow 10&#43; Rubyists using Sinatra on Twitter (Reprint)</title>
      <link>http://rubylearning.com/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This first appeared on 24th June 2009 and is being reprinted as the original is not accessible.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What&amp;#8217;s Twitter?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/icon_d.png&#34; alt=&#34;Twitter&#34; title=&#34;http://twitter.com/IndianGuru&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://shiftingcareers.blogs.nytimes.com/2008/09/07/how-twitter-can-help-at-work/?excamp=GGSBtwitternews&amp;WT.srch=1&amp;WT.mc_ev=click&amp;WT.mc_id=SB-S-E-GG-NA-S-twitter_news&#34;&gt;The New York Times&lt;/a&gt; says:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;a href=&#34;http://www.twitter.com/&#34;&gt;Twitter&lt;/a&gt; is a simple messaging service that you&amp;#8217;ve either &lt;a href=&#34;http://query.nytimes.com/search/sitesearch?query=twitter&amp;srchst=cse&#34;&gt;heard about a lot&lt;/a&gt; or &lt;a href=&#34;http://kara.allthingsd.com/20080428/twitter-where-nobody-know-your-name/&#34;&gt;not at all&lt;/a&gt;. Either way, it&amp;#8217;s a fun and useful tool, well worth trying if you want to reach potential and existing customers, employees or employers.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    List of Rubyists Using Sinatra
  &lt;/h3&gt;
  
  &lt;p&gt;
    This list of over 10 Rubyists using Sinatra, is in alphabetical order, with a link to their Twitter profile. The following list is &lt;em&gt;not&lt;/em&gt; intended to be all-inclusive, but it should give you a great start to following some talented Rubyists using Sinatra.
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Aaron Quint &amp;#8211; &lt;a href=&#34;http://twitter.com/aq&#34;&gt;aq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Adeel Ahmad &amp;#8211; &lt;a href=&#34;http://twitter.com/_adeel&#34;&gt;_adeel&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andre Lewis &amp;#8211; &lt;a href=&#34;http://twitter.com/alewis&#34;&gt;alewis&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andrew Neil &amp;#8211; &lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;nelstrom&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Arjun Ram &amp;#8211; &lt;a href=&#34;http://twitter.com/arjunram&#34;&gt;arjunram&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      August Lilleaas &amp;#8211; &lt;a href=&#34;http://twitter.com/augustl&#34;&gt;augustl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Barry Hess &amp;#8211; &lt;a href=&#34;http://twitter.com/bjhess&#34;&gt;bjhess&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bill Siggelkow &amp;#8211; &lt;a href=&#34;http://twitter.com/bsiggelkow&#34;&gt;bsiggelkow&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Blake Mizerany &amp;#8211; &lt;a href=&#34;http://twitter.com/bmizerany&#34;&gt;bmizerany&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Brian Deterling &amp;#8211; &lt;a href=&#34;http://twitter.com/bdeter&#34;&gt;bdeter&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bruno Miranda &amp;#8211; &lt;a href=&#34;http://twitter.com/brupm&#34;&gt;brupm&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Carlos Gabaldon &amp;#8211; &lt;a href=&#34;http://twitter.com/carlosgabaldon&#34;&gt;carlosgabaldon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Charles Brian Quinn &amp;#8211; &lt;a href=&#34;http://twitter.com/seebq&#34;&gt;seebq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom &amp;#8211; &lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;eee_c&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Corey Donohoe &amp;#8211; &lt;a href=&#34;http://twitter.com/atmos&#34;&gt;atmos&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Damon Clinkscales &amp;#8211; &lt;a href=&#34;http://twitter.com/damon&#34;&gt;damon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Croak &amp;#8211; &lt;a href=&#34;http://twitter.com/dancroak&#34;&gt;dancroak&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Mayer &amp;#8211; &lt;a href=&#34;http://twitter.com/danmayer&#34;&gt;danmayer&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      David Balatero &amp;#8211; &lt;a href=&#34;http://twitter.com/dbalatero&#34;&gt;dbalatero&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Derek Haynes &amp;#8211; &lt;a href=&#34;http://twitter.com/dhaynes23&#34;&gt;dhaynes23&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Doug Sparling &amp;#8211; &lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;scriptrunner&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Foy Savas &amp;#8211; &lt;a href=&#34;http://twitter.com/foysavas&#34;&gt;foysavas&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Graham Ashton &amp;#8211; &lt;a href=&#34;http://twitter.com/grahamashton&#34;&gt;grahamashton&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Hasham Malik &amp;#8211; &lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;hasham2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      James Edward Gray II &amp;#8211; &lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;JEG2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jean-Daniel Tanguay &amp;#8211; &lt;a href=&#34;http://twitter.com/jeedee&#34;&gt;jeedee&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jeremy Raines &amp;#8211; &lt;a href=&#34;http://twitter.com/jraines&#34;&gt;jraines&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jordan Bracco &amp;#8211; &lt;a href=&#34;http://twitter.com/webs&#34;&gt;webs&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jesse Cooke &amp;#8211; &lt;a href=&#34;http://twitter.com/jc00ke&#34;&gt;jc00ke&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Joe Ferris &amp;#8211; &lt;a href=&#34;http://twitter.com/joeferris&#34;&gt;joeferris&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Julio Javier Cicchelli &amp;#8211; &lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;monsieur_rock&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Justin Britten &amp;#8211; &lt;a href=&#34;http://twitter.com/jbritten&#34;&gt;jbritten&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Karel Minarik &amp;#8211; &lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;karmiq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Logan Koester &amp;#8211; &lt;a href=&#34;http://twitter.com/logankoester&#34;&gt;logankoester&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Luke Francl &amp;#8211; &lt;a href=&#34;http://twitter.com/lof&#34;&gt;lof&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Marcin Kulik &amp;#8211; &lt;a href=&#34;http://twitter.com/sickill&#34;&gt;sickill&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Matt Todd &amp;#8211; &lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;mtodd&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Mike Demers &amp;#8211; &lt;a href=&#34;http://twitter.com/mikedemers&#34;&gt;mikedemers&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Plante &amp;#8211; &lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;zapnap&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Quaranto &amp;#8211; &lt;a href=&#34;http://twitter.com/qrush&#34;&gt;qrush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Peter Cooper &amp;#8211; &lt;a href=&#34;http://twitter.com/peterc&#34;&gt;peterc&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Piyush Gupta &amp;#8211; &lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;mba_piyush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Richard Taylor &amp;#8211; &lt;a href=&#34;http://twitter.com/moomerman&#34;&gt;moomerman&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Robert Lowe &amp;#8211; &lt;a href=&#34;http://twitter.com/__viral&#34;&gt;__viral&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Ryan Tomayko &amp;#8211; &lt;a href=&#34;http://twitter.com/rtomayko&#34;&gt;rtomayko&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sam Goebert &amp;#8211; &lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;bigcurl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sau Sheong Chang &amp;#8211; &lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;sausheong&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Saurabh Purnaye &amp;#8211; &lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;saurabhp&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Simon Rozet &amp;#8211; &lt;a href=&#34;http://twitter.com/srt&#34;&gt;srt&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sunny Ripert &amp;#8211; &lt;a href=&#34;http://twitter.com/sunfox&#34;&gt;sunfox&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Trevor Bramble &amp;#8211; &lt;a href=&#34;http://twitter.com/&#34;&gt;TrevorBramble&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Vishnu Gopal &amp;#8211; &lt;a href=&#34;http://twitter.com/vishnugopal&#34;&gt;vishnugopal&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p class=&#34;note&#34;&gt;
    The following list is &lt;strong&gt;Not &amp;#8220;Rubyists&amp;#8221; per-se, but should still be of interest&lt;/strong&gt;:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      FiveRuns &amp;#8211; &lt;a href=&#34;http://twitter.com/fiveruns&#34;&gt;fiveruns&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      taazza &amp;#8211; &lt;a href=&#34;http://twitter.com/taazza&#34;&gt;taazza&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      thoughtbot &amp;#8211; &lt;a href=&#34;http://twitter.com/thoughtbot&#34;&gt;thoughtbot&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:red;&#34;&gt;Note:&lt;/span&gt;&lt;/strong&gt; Keep the feedback coming in. We will update the list based on your recommendations.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;Have we missed out any &lt;em&gt;Rubyists who are using Sinatra&lt;/em&gt;?&lt;br /&gt;You can help&lt;/strong&gt;. Please feel free to add a link to a Rubyist&amp;#8217;s Twitter profile. We would love to hear why you think the particular Rubyist is important to Twitter with. Also, do add a link to your Twitter profile in the comments.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interview: Aaron Quint on Sinatra (Reprint)</title>
      <link>http://rubylearning.com/2015/01/07/interview-aaron-quint-on-sinatra-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/interview-aaron-quint-on-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 20th March 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    On the eve of the first ever online &amp;#8220;&lt;strong&gt;Introduction to Sinatra&lt;/strong&gt;&amp;#8221; course, Satish Talim of RubyLearning caught up with &lt;strong&gt;Aaron Quint&lt;/strong&gt; and talked to him on &lt;strong&gt;Sinatra&lt;/strong&gt;, in this interview.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/AaronQuint.jpg&#34; alt=&#34;Aaron Quint, USA&#34; title=&#34;Aaron Quint, USA&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish Talim&gt;&gt;&lt;/strong&gt; Welcome, Aaron and thanks for taking out time to share your thoughts. For the benefit of the readers, could you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron Quint&gt;&gt;&lt;/strong&gt; Thanks for having me! I&amp;#8217;m a freelance Ruby developer working in Brooklyn, NY. I&amp;#8217;ve been doing Ruby and Rails for a little over 3 years now, and full time for the last 2 and a half. Recently I&amp;#8217;ve been getting a lot more involved with the open source community. I really love coding in Ruby and at this point I don&amp;#8217;t think any other language has such a great community with such smart and interesting people. I blog (as much as I can) at &lt;a href=&#34;http://www.quirkey.com/blog/&#34;&gt;http://quirkey.com/blog/&lt;/a&gt;. My other passions are food and design and I work with a friend writing about this at &lt;a href=&#34;http://thescoutmag.com/&#34;&gt;http://thescoutmag.com&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra&amp;#8217;s greatest strength is its flexibility
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; You have worked a lot on Rails and Sinatra. How come you got involved with Sinatra? Tell us more about this.&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I heard about Sinatra when Blake Mizerany first released it. I thought it was a cool idea, but didn&amp;#8217;t really see the point. Then, in 2008 a number of people started working feverishly on making it a more elegant framework and I started to get involved. I had a sort of &amp;#8216;lightbulb&amp;#8217; moment and realized &amp;#8216;Ah! This can be really useful!&amp;#8217;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; So many Ruby-based web frameworks &amp;#8211; is this good for Ruby? Where does Sinatra fit in?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I&amp;#8217;d start off by saying, that Sinatra is really less then a framework. A framework implies a lot of constraints or conventions, however, Sinatra really doesn&amp;#8217;t limit you at all. An application in Sinatra can be a single file, multiple files, or multiple files across directories (more like Rails). There&amp;#8217;s a reason that so much of the Ruby community is focused on building web applications &amp;#8211; most applications and what any of us do on computers is moving towards the web. Ruby is such an elegant language it lends itself to different people having a lot of different ideas on the best way to write web apps. I don&amp;#8217;t think of all these frameworks as being in competition, as we saw with the Rails/Merb merge, everyone is really learning and building on each other&amp;#8217;s ideas and discoveries. Sinatra&amp;#8217;s role is the tool for building web applications when you don&amp;#8217;t need any of the features or overhead of one of the more robust frameworks.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; In your recent article for the &amp;#8220;Rubyist&amp;#8221; magazine, you mention that &amp;#8220;think of Sinatra as a library creating simple HTTP based user interfaces.&amp;#8221; Can you throw more light on this aspect?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; Sinatra&amp;#8217;s greatest strength is that its so flexible and requires so little to get an app running. This makes it super easy to use it in existing projects. My proposal is that the community should embrace it by including it in their gems or libraries and making simple web interfaces for their code. Everyone loves the command line for its simplicity and directness, but by using Sinatra to build a simple web app to interact with your code, you can make your library much easier (and more fun) to use.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; For a person new to web development, how can one go about learning Sinatra? &lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I think Sinatra is a great way to get in to Ruby web development. Its really simple so once you&amp;#8217;ve learned the basics, anything you learn beyond it is learning Ruby and is not Sinatra specific. Right now there aren&amp;#8217;t any dedicated blogs or community sites but the Sinatra homepage: &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;http://www.sinatrarb.com&lt;/a&gt; has good documentation. If you&amp;#8217;re interested or have questions, Sinatra also has an active mailing list and irc chat room. People are usually happy to answer questions. I would also suggest just searching github for Sinatra and checking out the source of other Sinatra projects &amp;#8211; there are a lot of good open source examples.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Any plans on writing a book on Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I wouldn&amp;#8217;t be against it If someone offered me the opportunity &amp;#8211; though it would be a pretty short book.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Do you have any suggestions for RubyLearning&amp;#8217;s &amp;#8220;Introduction to Sinatra&amp;#8221; course participants?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; Don&amp;#8217;t hesitate to ask questions on the mailing list or in irc. Also if you already have some understanding of Ruby, you should absolutely take a look at Sinatra&amp;#8217;s source. Most of it is contained in a single file and its one of the best open source examples of advanced Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Thanks Aaron for sharing your views with the &lt;strong&gt;Introduction to Sinatra&lt;sup class=&#39;footnote&#39;&gt;&lt;a href=&#39;#fn-8333-1&#39; id=&#39;fnref-8333-1&#39;&gt;1&lt;/a&gt;&lt;/sup&gt; &amp;#8221; and &amp;#8221; &lt;strong&gt;Introduction to Merb&lt;sup class=&#39;footnote&#39;&gt;&lt;a href=&#39;#fn-8333-2&#39; id=&#39;fnref-8333-2&#39;&gt;2&lt;/a&gt;&lt;/sup&gt; &amp;#8221; course participants.&lt;/span&gt;&lt;/p&gt; 
    
    &lt;p&gt;
      &lt;span style=&#34;font-size: 8pt; font-family: Arial;&#34;&gt;&lt;i&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 8pt; font-family: Arial;&#34;&gt;&lt;i&gt;The opinions expressed are those of Aaron Quint and do not necessarily reflect those of &lt;strong&gt;&lt;a href=&#34;http://rubylearning.org/&#34;&gt;RubyLearning.org&lt;/a&gt;&lt;/strong&gt;.&lt;/i&gt;&lt;/span&gt;
    &lt;/p&gt;
    
    &lt;p class=&#34;alert&#34;&gt;
      &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; &lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt; are keen to play an active role in encouraging the adoption of new development technologies, and are delighted to have been given the opportunity to support the work of Satish Talim and his team at RubyLearning. If you&amp;#8217;re a developer, or an alumni of RubyLearning and would like to test your own Sinatra apps or freshly acquired skills, you&amp;#8217;re welcome to take advantage of the free hosting trials that 1st Easy offer: simply visit the &lt;a href=&#34;http://www.1steasy.com/rubylearning.htm&#34;&gt;registration page&lt;/a&gt; and leave your details. The full-featured accounts are yours to do with as you please for one month, after which you can transfer your hard work to a paid account, or walk away with no questions asked!
    &lt;/p&gt;&lt;/div&gt; 
    

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#39;footnotes&#39;&amp;gt;
  &amp;lt;div class=&#39;footnotedivider&#39;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;ol&amp;gt;
    &amp;lt;li id=&#39;fn-8333-1&#39;&amp;gt;
      &amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;Introduction to Sinatra&amp;lt;/strong&amp;gt;: Here are the &amp;lt;a href=&amp;quot;http://rubylearning.com/blog/2009/02/25/introduction-to-sinatra-a-new-course/&amp;quot;&amp;gt;course details&amp;lt;/a&amp;gt;. &amp;lt;span class=&#39;footnotereverse&#39;&amp;gt;&amp;lt;a href=&#39;#fnref-8333-1&#39;&amp;gt;&amp;amp;#8617;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li id=&#39;fn-8333-2&#39;&amp;gt;
      &amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;Introduction to Merb&amp;lt;/strong&amp;gt;: Here are the &amp;lt;a href=&amp;quot;http://rubylearning.com/blog/2009/03/02/introduction-to-merb-3rd-batch/&amp;quot;&amp;gt;course details&amp;lt;/a&amp;gt;. &amp;lt;span class=&#39;footnotereverse&#39;&amp;gt;&amp;lt;a href=&#39;#fnref-8333-2&#39;&amp;gt;&amp;amp;#8617;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Karel Minarik: How do I learn and master Sinatra? (Reprint)</title>
      <link>http://rubylearning.com/2015/01/07/karel-minarik-how-do-i-learn-and-master-sinatra-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2015/01/07/karel-minarik-how-do-i-learn-and-master-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This is reprint of the blog post that appeared on 13th July 2009, as the original is not accessible.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Welcome to the &lt;b&gt;fourth&lt;/b&gt; installment on the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, of a mini series &amp;#8211; &amp;#8220;&lt;strong&gt;How do I learn and master Sinatra?&lt;/strong&gt;&amp;#8221; &amp;#8211; by top Rubyists using &lt;em&gt;Sinatra&lt;/em&gt;. The interview series will provide insight and commentary from these notable &lt;em&gt;Sinatra&lt;/em&gt; developers, with the goal of facilitating and providing answers to the questions Ruby beginners face on &lt;em&gt;how to learn and master Sinatra&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Karel Minarik, could you tell us something about yourself &amp;#8211; your background, where you are based?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Karel Minarik&#34; src=&#34;http://www.rubylearning.com/images/karmi_mugshot.jpg&#34; alt=&#34;Karel Minarik&#34; /&gt;&lt;strong&gt;Karel Minarik&gt;&gt;&lt;/strong&gt; I&amp;#8217;m Karel Minarik, web designer and developer living in Prague, Czech Republic. I have graduated in Philosophy, not Computer Science, which may explain why I love Ruby a lot, and why I prefer solving &amp;#8220;naming things&amp;#8221; over &amp;#8220;cache invalidation&amp;#8221; problems. I earn my bread by designing interfaces, writing Ruby, JavaScript, HTML/CSS and giving people advice or teaching them new tricks. I blog in undecipherable intervals on &lt;a href=&#34;http://www.restafari.org/&#34;&gt;Restafari.org&lt;/a&gt; and publish code regularly at &lt;a href=&#34;http://github.com/karmi/&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Are there any pre-requisites for a person to start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Very few: you just need to know Ruby a little bit. The rest you can and will learn along the way. In fact, &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Sinatra is wonderful teaching tool to deepen your knowledge of Ruby as a general programming language, web application architectures, HTTP and REST principles, concept of middlewares, and so on&lt;/span&gt;. As a wonderful teaching/learning tool it&amp;#8217;s truly on par with _why&amp;#8217;s Shoes.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; You should start with the &lt;a href=&#34;http://github.com/sinatra/sinatra/blob/master/README.rdoc&#34;&gt;README&lt;/a&gt;, which contains almost everything you need to know in its 500 or so lines. Then you should definitely glance over sourcecode of some Sinatra applications &amp;#8220;&lt;a href=&#34;http://www.sinatrarb.com/wild.html&#34;&gt;in the wild&lt;/a&gt;&amp;#8220;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Some of the noteworthy examples would be eg. simple website in waferbaby&amp;#8217;s &lt;a href=&#34;http://github.com/waferbaby/usesthis/tree/master&#34;&gt;usesthis&lt;/a&gt;, background processing tutorial in bmizerany&amp;#8217;s &lt;a href=&#34;http://github.com/bmizerany/sinatra-dj/tree/master&#34;&gt;sinatra-dj&lt;/a&gt;, clever use of Ruby&amp;#8217;s blocks/closures in pjhyett&amp;#8217;s &lt;a href=&#34;http://github.com/pjhyett/github-services/tree/master&#34;&gt;github-services&lt;/a&gt; or ultra minimal apps in ichverstehe&amp;#8217;s &lt;a href=&#34;http://github.com/ichverstehe/gaze/blob/master/bin/gaze&#34;&gt;gaze&lt;/a&gt; or gnugeek&amp;#8217;s &lt;a href=&#34;http://github.com/gnugeek/tophat/tree/master&#34;&gt;tophat&lt;/a&gt;. These examples really elucidate compact and minimal nature of Sinatra.
  &lt;/p&gt;
  
  &lt;p&gt;
    Then you should sketch something rather small and well defined: web frontend for some Ruby code you have, a web API for some of your services, &amp;#8230;
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra &amp;#8211; quickly create tiny web apps and services
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Which area of Sinatra should a beginner pay particular attention to?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Beginners should pay attention to Sinatra&amp;#8217;s DSL itself: helpers, filters, last_modified and etag support, etc, so they&amp;#8217;re not reinventing the mic and truly make use of it&amp;#8217;s API. More advanced programmers should focus on Rack integration, using Rack middlewares such as &lt;b&gt;Rack::Auth&lt;/b&gt; or &lt;b&gt;Rack::Mime&lt;/b&gt; in your Sinatra app and running Sinatra apps themselves as middlewares. This opens different possibilities of service integration &amp;#8211; have a look on Jon Crosby&amp;#8217;s wonderful explanation in his &lt;a href=&#34;http://mwrc2009.confreaks.com/13-mar-2009-11-05-in-a-world-of-middleware-who-needs-monolithic-applications-jon-crosby.html&#34;&gt;MWRC talk&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is the official documentation on Sinatra good enough for a beginner? Are there areas which need improvement or need to be re-written&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Sinatra&amp;#8217;s &lt;a href=&#34;http://www.sinatrarb.com/documentation.html&#34;&gt;documentation&lt;/a&gt; is pretty extensive at the moment, covering everything from basics to testing your applications and writing extensions. It&amp;#8217;s just a bit scattered at the moment, eg. deployment is covered in the &lt;a href=&#34;http://www.sinatrarb.com/book.html#deployment&#34;&gt;Sinatra Book&lt;/a&gt; started by Chris Schneider. There&amp;#8217;s still some lack of thorough documentation about Rack integration.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Sequel, DataMapper, ActiveRecord &amp;#8211; which one would you recommend to use with Sinatra and why?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; I prefer ActiveRecord for anything talking to a relational database, because of it&amp;#8217;s clever API, stability, general knowledge and large user base. Don&amp;#8217;t forget that Sinatra is nice playground for experiments with other ORM&amp;#8217;s, key/value stores, etc, though!
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is an understanding of Rack important while learning Sinatra? Why? Which area of Rack should one be really comfortable with?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; No, you could start learning Sinatra completely oblivious of something called &amp;#8220;Rack&amp;#8221;.
  &lt;/p&gt;
  
  &lt;p&gt;
    However, you can use plethora of various &lt;a href=&#34;http://rack.rubyforge.org/doc/Rack.html&#34;&gt;bundled&lt;/a&gt; or &lt;a href=&#34;http://github.com/rack/rack-contrib&#34;&gt;third-party&lt;/a&gt; Rack middlewares very easily by simple &amp;#8216;&lt;b&gt;use Rack::Utils&lt;/b&gt;&amp;#8216; or &amp;#8216;&lt;b&gt;use Rack::Locale&lt;/b&gt;&amp;#8216; declaration for adding some advanced functionality to your application.
  &lt;/p&gt;
  
  &lt;p&gt;
    And when you plan to plug Sinatra powered app into a Rails one, for instance, or want to &amp;#8220;mount&amp;#8221; various separated web applications at different endpoints, you should definitely have a detailed look on Rack itself.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one hone one&amp;#8217;s skills in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; By reading huge amounts of code available on Github. That&amp;#8217;s a sure way how to discover clever solutions and open your mind. (Be sure to include credits if you reuse some code and release your stuff, though.)
  &lt;/p&gt;
  
  &lt;p&gt;
    But the most important thing is to focus on Ruby as an expressive programming language, and to _not_ think about browser first. Think first about the domain of your application and how it translates to Ruby, not about how it should &amp;#8220;look&amp;#8221; or behave in a browser. That&amp;#8217;s very important, but comes next. And don&amp;#8217;t forget it&amp;#8217;s really easy to code test-first in Ruby and in Sinatra.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What type of projects should a beginner work on to gain more expertise in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Smallish apps, where Rails would force it&amp;#8217;s conventions on you or which are not primarily focused on database access. Something like cschneid&amp;#8217;s &lt;a href=&#34;http://irclogger.com/&#34;&gt;irclogger&lt;/a&gt;, quirkey&amp;#8217;s &lt;a href=&#34;http://log.quirkey.com/&#34;&gt;columnlog&lt;/a&gt; or entp&amp;#8217;s &lt;a href=&#34;http://calendaraboutnothing.com/&#34;&gt;Calendar About Nothing&lt;/a&gt; &amp;#8212; all very tight, minimal and very elegant apps.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you suggest some web services that a Sinatra beginner could develop himself / herself?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; The sweet spot for Sinatra is something along the lines of already mentioned apps. Some ideas I could throw in:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      An app to display metrics about your team activity in a Git repository: who commited most, who commited most lines of code, etc., leveraging power of &lt;a href=&#34;http://github.com/mojombo/grit&#34;&gt;Grit&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      A web frontend for some command-line tool like &amp;#8216;top&amp;#8217; or &amp;#8216;df&amp;#8217; for your servers.
    &lt;/li&gt;
    &lt;li&gt;
      Simple web hook for &lt;a href=&#34;http://github.com/guides/post-receive-hooks&#34;&gt;Github&amp;#8217;s post-receive hooks&lt;/a&gt;, notifiying your developer mailing-list, Jabber, deploying new code to staging server or playing a tune.
    &lt;/li&gt;
    &lt;li&gt;
      More advanced example could be an app to show currently deployed versions of your applications, using small Sinatra apps on each host to emit various metrics like deployed revision and it&amp;#8217;s age, system load, etc in JSON and a Sinatra app to gather the data &amp;#8212; &amp;#8220;emulating&amp;#8221; services like NewRelic, Scout or FiveRun&amp;#8217;s Dash.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Anything else you would like to add?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Do come to the #sinatra IRC channel on Freenode when you get stuck. There&amp;#8217;s usually lots of people from different timezones, so it&amp;#8217;s very likely that we&amp;#8217;ll get you out of trouble fast. Just please read the README first and don&amp;#8217;t name your application file &amp;#8220;sinatra.rb&amp;#8221; &lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34; class=&#34;wp-smiley&#34; /&gt; Have fun with Ruby and Sinatra!
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Karel. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Karel would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Others in this series:&lt;/b&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/&#34;&gt;Corey Donohoe&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/07/08/jeremy-evans-how-do-i-learn-and-master-sinatra/&#34;&gt;Jeremy Evans&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/07/10/graham-ashton-how-do-i-learn-and-master-sinatra/&#34;&gt;Graham Ashton&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited offer Sinatra and Rails hosting running on a Phusion Passenger (mod_rails) and LAMP stack. If you want to try your hand at developing with Sinatra, why not let them arrange a &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;trial hosting account&lt;/a&gt; for you? You&amp;#8217;ll get to deploy your app, with full technical support from their team!
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sinatra and Google Currency API - Part 2</title>
      <link>http://rubylearning.com/2013/09/13/sinatra-and-google-currency-api---part-2/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2013/09/13/sinatra-and-google-currency-api---part-2/</guid>
      <description>&lt;div&gt;
  &lt;h2&gt;
    Sinatra and Google Currency API &amp;#8211; Part 2
  &lt;/h2&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    This guest post is by &lt;b&gt;Girish Sonawane&lt;/b&gt;, a self-taught programmer. He came across Ruby in 2008 and has since been working full-time on Ruby. He worked as a Rails freelancer and later co-founded &lt;a href=&#34;http://cuberoot.in/&#34;&gt;Cube Root&lt;/a&gt;, an exclusive Ruby on Rails software boutique catering to outsourced work. His interests are everything related to technology or science. You can reach him at &lt;a href=&#34;mailto:girish@cuberoot.in&#34;&gt;girish@cuberoot.in&lt;/a&gt; or via twitter @girishso.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; alt=&#34;Girish Sonawane&#34; src=&#34;http://rubylearning.com/images/girishsonawane.png&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt; &lt;strong&gt;&lt;span class=&#34;drop_cap&#34;&gt;I&lt;/span&gt;&lt;/strong&gt;n this two-part series, I will show you how to use Google currency conversion API and use it in a small Sinatra app. In &lt;a href=&#34;http://rubylearning.com/blog/2013/09/04/sinatra-and-google-currency-api-part-1/&#34;&gt;Part 1&lt;/a&gt; we built a small function to access the Google API for currency conversion. This is Part 2, where we will build a small Sinatra app using the function we created in Part 1.
  &lt;/p&gt;
  
  &lt;p&gt;
    The source code for this series is available on &lt;a href=&#34;https://github.com/girishso/goog_currency_tutorial&#34;&gt;Github&lt;/a&gt;, with commits for each step. This little library is available as a Ruby Gem at &lt;a href=&#34;https://rubygems.org/gems/goog_currency&#34;&gt;GoogCurrency&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Wireframes
  &lt;/h3&gt;
  
  &lt;p&gt;
    We will have two screens, one with a form where a user can submit data and another showing the result.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Home page&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://rubylearning.com/images/bloghome.png&#34; width=&#34;600&#34; title=&#34;Home&#34; alt=&#34;Home&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Results page&lt;/code&gt;&lt;br /&gt; &lt;img src=&#34;http://rubylearning.com/images/blogresult.png&#34; width=&#34;600&#34; title=&#34;Result&#34; alt=&#34;Results&#34; /&gt;
  &lt;/p&gt;
  
  &lt;h3&gt;
    Sinatra
  &lt;/h3&gt;
  
  &lt;p&gt;
    Since this is a very basic app, we are going to use Sinatra in classic style. We need following files.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Gemfile&lt;/code&gt; for all the gem dependencies.
  &lt;/p&gt;
  
  &lt;pre&gt;1 source &#39;https://rubygems.org&#39;
2
3 gem &#34;rest-client&#34;, &#34;1.6.7&#34;
4 gem &#34;json&#34;, &#34;1.8.0&#34;
5 gem &#34;rspec&#34;, &#34;2.14.1&#34;
6 gem &#34;fakeweb&#34;, &#34;1.3.0&#34;
7 gem &#34;sinatra&#34;, &#34;1.4.3&#34;
8 gem &#34;capybara&#34;, &#34;2.1.0&#34;
9 gem &#34;haml&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;config.ru&lt;/code&gt; required to run the app on Rack servers like Passenger, Heroku etc.
  &lt;/p&gt;
  
  &lt;pre&gt;1 require &#39;bundler&#39;
2 Bundler.require
3 require &#39;./app&#39;
4 run Sinatra::Application
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;Bundler.require&lt;/code&gt; will require all the gems listed in our Gemfile and made available to our Sinatra app.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s create an empty &lt;code&gt;app.rb&lt;/code&gt;, the main Sinatra app file with &lt;code&gt;touch app.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Continuing with the same spirit as Part 1, we are going to test drive this app. We are going to use &lt;code&gt;capybara&lt;/code&gt; for acceptance tests.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;spec/acceptance_spec.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1  require &#39;bundler&#39;
2  Bundler.require
3
4  disable :run
5  set :root, File.dirname(__FILE__) + &#34;/..&#34;
6  require Sinatra::Application.root + &#39;/app&#39;
7
8  Capybara.app = Sinatra::Application
9
10 RSpec.configure do |config|
11   config.include Capybara::DSL
12 end
13
14 describe &#39;currency converter&#39; do
15   it &#34;loads currency converter form&#34;
16   it &#34;converts currencies&#34;
17   it &#34;handles errors&#34;
18 end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 4, disables the web server, we don&amp;#8217;t need a webserver for specs. Line 8, tells &lt;code&gt;capybara&lt;/code&gt; it&amp;#8217;s a Sinatra app. Line 11, makes &lt;code&gt;capybara&lt;/code&gt; DSL available to our specs.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 15, 16, 17, adds three pending specs.
  &lt;/p&gt;
  
  &lt;p&gt;
    If we execute our spec now with &lt;code&gt;rspec spec/acceptance_spec.rb&lt;/code&gt;, it says:
  &lt;/p&gt;
  
  &lt;pre&gt;1  ***
2
3  Pending:
4    currency converter loads currency converter form
5      # Not yet implemented
6      # ./spec/acceptance_spec.rb:15
7    currency converter converts currencies
8      # Not yet implemented
9      # ./spec/acceptance_spec.rb:16
10   currency converter handles errors
11     # Not yet implemented
12     # ./spec/acceptance_spec.rb:17
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s define the first spec and make it pass.
  &lt;/p&gt;
  
  &lt;pre&gt;1 it &#34;loads currency converter form&#34; do
2     visit &#34;/&#34;
3     page.should have_content(&#34;Currency Converter&#34;)
4     find(&#39;form&#39;).should have_button(&#39;Convert&#39;)
5   end
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;capybara&lt;/code&gt; simulates user interactions with the website. &lt;code&gt;visit &#34;/&#34;&lt;/code&gt; takes the user to the home page of the site as expected. Line 3, checks for existence of &amp;#8220;Currency Converter&amp;#8221; text on the page. Line 4, expects a &lt;code&gt;form&lt;/code&gt; with the &lt;code&gt;Convert&lt;/code&gt; button.
  &lt;/p&gt;
  
  &lt;p&gt;
    Typically, there is no need of such granular level testing, but this tells us if the test suite is working as expected.
  &lt;/p&gt;
  
  &lt;p&gt;
    Executing the spec fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 expected #has_content?(&#34;Currency Converter&#34;) to return true, got false
&lt;/pre&gt;
  
  &lt;p&gt;
    Now to make this spec pass, let&amp;#8217;s modify &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 get &#34;/&#34; do
2     haml :&#34;index&#34;
3   end
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;get &#34;/&#34;&lt;/code&gt; loads the home page. We are using &lt;code&gt;haml&lt;/code&gt; view templates instead of &lt;code&gt;erb&lt;/code&gt;. It expects &lt;code&gt;views/index.haml&lt;/code&gt; in views folder. Let&amp;#8217;s add it.
  &lt;/p&gt;
  
  &lt;pre&gt;1 %h1 Currency Converter
2
3   %form(action = &#34;/convert&#34; method = &#34;post&#34;)
4
5       %input#convert(type=&#34;submit&#34; value=&#34;Convert&#34;)
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s also add a layout &lt;code&gt;views/layout.haml&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 !!!
2   %html
3     %head
4       %title Currency Conversion Tutorial
5     %body
6       = yield
&lt;/pre&gt;
  
  &lt;p&gt;
    Executing specs with &lt;code&gt;rspec spec/acceptance_spec.rb&lt;/code&gt; passes the spec. We are good to go with the next pending spec.
  &lt;/p&gt;
  
  &lt;pre&gt;1  valid_response =&amp;lt;&amp;lt;-VALID
2    {lhs: &#34;1 U.S. dollar&#34;,rhs: &#34;54.836587 Indian rupees&#34;,error: &#34;&#34;,icc: true}
3    VALID
4    .
5    .
6    .
7    it &#34;converts currencies&#34; do
8      FakeWeb.register_uri(:get,
9                         &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?INR&#34;,
10                        :status =&gt; &#34;200&#34;,
11                        :body =&gt; valid_response)
12     visit &#39;/&#39;
13
14     fill_in &#34;amount&#34;, :with =&gt; 1
15     select &#34;USD&#34;, :from =&gt; &#34;from&#34;
16     select &#34;INR&#34;, :from =&gt; &#34;to&#34;
17     click_button &#39;Convert&#39;
18
19     find(&#34;#result&#34;).should have_content(&#39;54.836587&#39;)
20   end
&lt;/pre&gt;
  
  &lt;p&gt;
    We are again using &lt;code&gt;fakeweb&lt;/code&gt; gem to simulate the Google API interaction, Line 8.
  &lt;/p&gt;
  
  &lt;p&gt;
    We are simulating user converting 1 USD to INR, using &lt;code&gt;capyabara&lt;/code&gt; DSL to simulate the user interactions
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 12, visit home page.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 14, Fill &lt;code&gt;amount&lt;/code&gt; input field with 1.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 15, select &lt;code&gt;USD&lt;/code&gt; from &lt;code&gt;from&lt;/code&gt; currencies select box.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 16, select &lt;code&gt;INR&lt;/code&gt; from &lt;code&gt;to&lt;/code&gt; currencies select box.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 18, click button &amp;#8220;Convert&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 20, we expect to have &lt;code&gt;#result&lt;/code&gt; with the converted amount.
  &lt;/p&gt;
  
  &lt;p&gt;
    Executing spec fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find field &#34;amount&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s go ahead and add the &lt;code&gt;amount&lt;/code&gt; field and other fields as well in &lt;code&gt;index.haml&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;pre&gt;1  %h1 Currency Converter
2
3  %form(action = &#34;/convert&#34; method = &#34;post&#34;)
4    %fieldset
5      %legend
6      From
7      %input#amount(name=&#34;amount&#34;)
8
9      %select#from(name=&#34;from&#34;)
10       %option(value=&#34;inr&#34;) INR
11       %option(value=&#34;usd&#34;) USD
12       %option(value=&#34;eur&#34;) EUR
13
14     To
15     %select#to(name=&#34;to&#34;)
16       %option(value=&#34;inr&#34;) INR
17       %option(value=&#34;usd&#34;) USD
18       %option(value=&#34;eur&#34;) EUR
19
20     %input#convert(type=&#34;submit&#34; value=&#34;Convert&#34;)
&lt;/pre&gt;
  
  &lt;p&gt;
    Executing the spec now fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find css &#34;#result&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    To fix this, we need to add &lt;code&gt;post &#34;/convert&#34;&lt;/code&gt; handler in &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 post &#34;/convert&#34; do
2   @result = GoogCurrency.send(&#34;#{params[:from]}_to_#{params[:to]}&#34;.to_sym, params[:amount])
3   haml :&#34;convert&#34;
4 end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 2, we are generating the GoogCurrency method to call dynamically. &lt;code&gt;params[:form]&lt;/code&gt;, &lt;code&gt;params[:to]&lt;/code&gt; have the from and to currencies respectively. &lt;code&gt;params[:amount]&lt;/code&gt; has the amount to convert. &lt;code&gt;&#34;#{params[:from]}_to_#{params[:to]}&#34;&lt;/code&gt; gets converted to &lt;code&gt;usd_to_inr&lt;/code&gt; in our case. But how do we invoke this method? In Ruby, we don&amp;#8217;t invoke methods, we send a message to the object and the object responds to the message. To invoke this method we &lt;code&gt;send&lt;/code&gt; message &lt;code&gt;usd_to_inr&lt;/code&gt; to &lt;code&gt;GoogCurrency&lt;/code&gt;, along with the method parameter (&lt;code&gt;amount&lt;/code&gt;).
  &lt;/p&gt;
  
  &lt;p&gt;
    Then we render &lt;code&gt;haml&lt;/code&gt; template &lt;code&gt;convert&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;convert.haml&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1 %div
2   #{params[:amount]} #{params[:from]} =
3   %span#result= @result
4   #{params[:to]}
5
6 %a(href=&#34;/&#34;) Back
&lt;/pre&gt;
  
  &lt;p&gt;
    The spec now passes.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now, we only have one more spec left i.e. &amp;#8220;currency converter handles errors&amp;#8221;. Let&amp;#8217;s get at it.
  &lt;/p&gt;
  
  &lt;pre&gt;1  it &#34;handles errors&#34; do
2      invalid_response =&amp;lt;&amp;lt;-INVALID
3      {lhs: &#34;&#34;,rhs: &#34;&#34;,error: &#34;4&#34;,icc: false}
4      INVALID
5      FakeWeb.register_uri(:get,
6                           &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=xyzUSD=?INR&#34;,
7                           :status =&gt; &#34;200&#34;,
8                           :body =&gt; invalid_response)
9
10     visit &#39;/&#39;
11
12     fill_in &#34;amount&#34;, :with =&gt; &#34;xyz&#34;
13     select &#34;USD&#34;, :from =&gt; &#34;from&#34;
14     select &#34;INR&#34;, :from =&gt; &#34;to&#34;
15     click_button &#39;Convert&#39;
16
17     find(&#34;#error&#34;).should have_content(&#34;An error occurred: 4&#34;)
18   end
&lt;/pre&gt;
  
  &lt;p&gt;
    It&amp;#8217;s similar to the earlier spec, but &lt;code&gt;Fakeweb&lt;/code&gt; now returns an error response, because the &lt;code&gt;amount&lt;/code&gt; is invalid. Executing the spec now fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find css &#34;#error&#34;&lt;/pre&gt;
  
  &lt;p&gt;
    To make this spec pass, let&amp;#8217;s handle the exception raised by &lt;code&gt;GoogCurrency&lt;/code&gt; in &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 post &#34;/convert&#34; do
2     begin
3       @result = GoogCurrency.send(&#34;#{params[:from]}_to_#{params[:to]}&#34;.to_sym, params[:amount])
4     rescue Exception =&gt; ex
5       @error = ex.message
6     end
7     haml :&#34;convert&#34;
8   end
&lt;/pre&gt;
  
  &lt;p&gt;
    Here, we&amp;#8217;re rescuing the exception and setting &lt;code&gt;@error&lt;/code&gt; instance variable.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now in &lt;code&gt;convert.haml&lt;/code&gt;, let&amp;#8217;s display the error message.
  &lt;/p&gt;
  
  &lt;pre&gt;1 -if @error
2   #error= @error
3 -else
4   %div
5     #{params[:amount]} #{params[:from]} =
6     %span#result= @result
7     #{params[:to]}
8
9 %a(href=&#34;/&#34;) Back
&lt;/pre&gt;
  
  &lt;p&gt;
    All the specs now pass. Note, we haven&amp;#8217;t opened the browser manually even once! Let&amp;#8217;s do it and &lt;em&gt;hope&lt;/em&gt; everything is fine and dandy! Execute the command &lt;code&gt;rackup -p 4567&lt;/code&gt; and visit &lt;code&gt;localhost:4567&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it!
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;&lt;b&gt;Feel free to ask questions and give feedback in the comments section of this post&lt;/b&gt;. Thanks!&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sinatra and Google currency API - Part 1</title>
      <link>http://rubylearning.com/2013/09/04/sinatra-and-google-currency-api---part-1/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2013/09/04/sinatra-and-google-currency-api---part-1/</guid>
      <description>&lt;div&gt;
  &lt;h2&gt;
    Sinatra and Google currency API &amp;#8211; Part 1
  &lt;/h2&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    This guest post is contributed by &lt;b&gt;Girish Sonawane&lt;/b&gt;, a self-taught programmer. He came across Ruby in 2008 and has since been working full-time on Ruby. He worked as a Rails freelancer and later co-founded &lt;a href=&#34;http://cuberoot.in/&#34;&gt;Cube Root&lt;/a&gt;, an exclusive Ruby on Rails software boutique catering to outsourced work. His interests are everything related to technology or science. You can reach him at &lt;a href=&#34;mailto:girish@cuberoot.in&#34;&gt;girish@cuberoot.in&lt;/a&gt; or via twitter @girishso.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; alt=&#34;Girish Sonawane&#34; src=&#34;http://rubylearning.com/images/girishsonawane.png&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt; &lt;strong&gt;&lt;span class=&#34;drop_cap&#34;&gt;I&lt;/span&gt;&lt;/strong&gt;n this two-part series, I will show you how to use the Google currency conversion API and use it in a small Sinatra app. This is Part 1, where&lt;br /&gt; we focus on using the API in Ruby. The source code for this series is available on &lt;a href=&#34;https://github.com/girishso/goog_currency_tutorial&#34;&gt;Github&lt;/a&gt;, with commits for each step. This little library is available as a Ruby Gem at &lt;a href=&#34;https://rubygems.org/gems/goog_currency&#34;&gt;GoogCurrency&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    The common need for e-commerce websites is to show the &lt;em&gt;price&lt;/em&gt; of items in &lt;strong&gt;local&lt;/strong&gt; currency rather than showing it up in US Dollars. It&amp;#8217;s a very tedious job to convert price from one currency to another in this volatile market. To make your price up to date you need a &lt;em&gt;tool&lt;/em&gt; to convert amount in realtime. Google has provided the currency conversion API. In this post I will show you how easy it is to use the Google&amp;#8217;s API for this purpose. Here, we will develop a small function to use this API and then use it in a small Sinatra app in Part 2.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The API
  &lt;/h3&gt;
  
  &lt;p&gt;
    We are going to use following Google API for currency conversion.
  &lt;/p&gt;
  
  &lt;pre&gt;1 curl &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?INR&#34;&lt;/pre&gt;
  
  &lt;p&gt;
    The API accepts &lt;code&gt;q&lt;/code&gt; the amount from the currency symbol &lt;code&gt;USD&lt;/code&gt; and to the currency symbol prefixed with a question mark &lt;code&gt;?INR&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    It returns the following, resembling the JSON format
  &lt;/p&gt;
  
  &lt;pre&gt;1 {lhs: &#34;1 U.S. dollar&#34;,rhs: &#34;54.836587 Indian rupees&#34;,error: &#34;&#34;,icc: true}&lt;/pre&gt;
  
  &lt;p&gt;
    To make it easy for our users, we are going to make our method names very simple for users to remember. For example, to convert currency from US Dollars (USD) to Indian Rupees (INR), we will have a &lt;code&gt;usd_to_inr&lt;/code&gt; method, similarly to convert from Euros (EUR) to Japanese Yen (JPY), we will have a &lt;code&gt;eur_to_jpy&lt;/code&gt; method, and so on.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Converting US Dollars To Indian Rupees
  &lt;/h3&gt;
  
  &lt;p&gt;
    Before we get started with the coding, like all good developers we will write some specs which the code needs to pass before we say it is complete.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;spec/goog_currency_spec.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1 $LOAD_PATH.unshift(File.join(File.dirname(__FILE__), &#39;..&#39;, &#39;lib&#39;))

3 require &#39;fakeweb&#39;

5 valid_response =&amp;lt;&amp;lt;-VALID
6   {lhs: &#34;1 U.S. dollar&#34;,rhs: &#34;54.836587 Indian rupees&#34;,error: &#34;&#34;,icc: true}
7 VALID

9 describe &#34;GoogCurrency&#34; do
10  describe &#34;valid currencies&#34; do
11    it &#34;converts USD to INR&#34; do
12      FakeWeb.register_uri(:get,
13                           &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?INR&#34;,
14                           :status =&gt; &#34;200&#34;,
15                           :body =&gt; valid_response)
16      usd = GoogCurrency.usd_to_inr(1)
17      usd.should == 54.836587
18    end
19   end
20 end
&lt;/pre&gt;
  
  &lt;p&gt;
    We are going to use the &lt;code&gt;fakeweb&lt;/code&gt; gem to simulate the Google API calls.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 1, adds the lib path in Load path, so the spec can find it. Line 5, 6 and 7, stores the Google API return string as it is in valid_response variable.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 9, &lt;code&gt;describe &#34;GoogCurrency&#34;&lt;/code&gt; block, is used to group related specs. Nested &lt;code&gt;describe &#34;valid currencies&#34;&lt;/code&gt; block contains the valid currency specs.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 11, spec for converting USD to INR.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 12, uses Fakeweb to simulate the API in the spec, it returns the valid_response string on calling the API.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 16, calls our actual method (that we are supposed to write).
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 17, tests if our method returns the actual value returned by the API.
  &lt;/p&gt;
  
  &lt;p&gt;
    If we execute our spec now with &lt;code&gt;rspec spec/goog_currency_spec.rb&lt;/code&gt;, it fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 uninitialized constant GoogCurrency&lt;/pre&gt;
  
  &lt;p&gt;
    Since we don&amp;#8217;t have the &lt;code&gt;goog_currency.rb&lt;/code&gt; file yet. Let&amp;#8217;s add it and define an empty GoogCurrency module.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;lib/goog_currency.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1 module GoogCurrency

3 end
&lt;/pre&gt;
  
  &lt;p&gt;
    Also, add &lt;code&gt;require &#39;goog_currency&#39;&lt;/code&gt; in &lt;code&gt;goog_currency_spec.rb&lt;/code&gt; on Line 2. Executing spec now, fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 undefined method &#39;usd_to_inr&#39; for GoogCurrency:Module&lt;/pre&gt;
  
  &lt;p&gt;
    Let’s add the method &lt;code&gt;usd_to_inr&lt;/code&gt; in &lt;code&gt;module GoogCurrency&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 require &#34;rest_client&#34;
2 require &#34;json&#34;

4 module GoogCurrency
5   def self.usd_to_inr(amount)
6     response = RestClient.get(&#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=#{amount}USD=?INR&#34;).body

8     # hack to convert API response to valid JSON
9     response.gsub!(/(lhs|rhs|error|icc)/, &#39;&#34;\1&#34;&#39;)
10    response_hash = JSON.parse(response)
11    response_hash[&#39;rhs&#39;].to_f
12  end
13end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 6, uses &lt;code&gt;rest_client&lt;/code&gt; gem to call the API passing appropriate parameters.
  &lt;/p&gt;
  
  &lt;p&gt;
    The API unfortunately returns an invalid JSON. Line 9, converts it to a valid JSON. &lt;code&gt;String#gsub!&lt;/code&gt; method in-place surrounds lhs, rhs, error and icc keys in response, with double quotes &lt;code&gt;&#34;&lt;/code&gt;, making it a valid JSON.
  &lt;/p&gt;
  
  &lt;p&gt;
    We then parse it using parse method using &lt;code&gt;json&lt;/code&gt; gem&amp;#8217;s &lt;code&gt;JSON#parse&lt;/code&gt; method. It returns us a ruby hash &lt;code&gt;response_hash&lt;/code&gt;, Line 10.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 11, simply picks the value of key &lt;code&gt;rhs&lt;/code&gt; and converts it to float using &lt;code&gt;String#to_f&lt;/code&gt; method to return converted currency value.
  &lt;/p&gt;
  
  &lt;p&gt;
    We execute our spec with &lt;code&gt;rspec spec/goog_currency_spec.rb&lt;/code&gt; and bravo our spec is passing! You can pat yourself on the back now.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Converting from any currency to any other currency
  &lt;/h3&gt;
  
  &lt;p&gt;
    So we successfully used Google API to convert USD to INR. But, how do we convert USD to JPY? Let’s start with writing the spec for it.
  &lt;/p&gt;
  
  &lt;pre&gt;1 it &#34;converts USD to JPY&#34; do
2   FakeWeb.register_uri(:get,
3                        &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?JPY&#34;,
4                        :status =&gt; &#34;200&#34;,
5                        :body =&gt; valid_response_jpy)
6   jpy = GoogCurrency.usd_to_jpy(1)
7   jpy.should == 98.5124618
8 end
&lt;/pre&gt;
  
  &lt;p&gt;
    It needs a corresponding valid API response string defined &lt;code&gt;valid_response_jpy&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 valid_response_jpy =&amp;lt;&amp;lt;-VALID
2 {lhs: &#34;1 U.S. dollar&#34;,rhs: &#34;98.5124618 Japanese yen&#34;,error: &#34;&#34;,icc: true}
3 VALID
&lt;/pre&gt;
  
  &lt;p&gt;
    Running the spec, fails with &lt;code&gt;undefined method &#39;usd_to_jpy&#39;&lt;/code&gt;. Now, we can write a method similar to usd_to_inr, but since we will have to write many such methods for each currency pair, it&#39;s not a DRY approach.
  &lt;/p&gt;
  
  &lt;p&gt;
    Thanks to Ruby&#39;s metaprogramming support. We can use &lt;code&gt;method_missing&lt;/code&gt; to dynamically create methods for any currency pair, that our users might need.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let&#39;s go ahead and write the &lt;code&gt;method_missing&lt;/code&gt; in &lt;code&gt;GoogCurrency&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 def self.method_missing(meth, *args)
2   from, to = meth.to_s.split(&#34;_to_&#34;)

4   super(meth, *args) and return if from.nil? or from == &#34;&#34; or to.nil? or to == &#34;&#34;

6   response = RestClient.get(&#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=#{args.first}#{from.upcase}=?#{to.upcase}&#34;).body

8   # response is not valid json
9   response.gsub!(/(lhs|rhs|error|icc)/, &#39;&#34;\1&#34;&#39;)
10  response_hash = JSON.parse(response)

12  response_hash[&#39;rhs&#39;].to_f
13end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 1, &lt;code&gt;method_missing&lt;/code&gt; accepts two parameters. First &lt;code&gt;meth&lt;/code&gt; is a symbol the method name that is called (&lt;code&gt;usd_to_jpy&lt;/code&gt; in our case) and second &lt;code&gt;args&lt;/code&gt; is an array of the arguments passed to the method &lt;code&gt;meth&lt;/code&gt; (&lt;code&gt;[1]&lt;/code&gt; in our spec).
  &lt;/p&gt;
  
  &lt;p&gt;
    We need to extract &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; currencies from the method name.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 2, &lt;code&gt;meth.to_s&lt;/code&gt; converts the method name symbol to string, then we call &lt;code&gt;String#split(&#34;_to_&#34;)&lt;/code&gt; to convert it to an array &lt;code&gt;[&#34;usd&#34;, &#34;jpy&#34;]&lt;/code&gt;. We then assign &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;&#34;usd&#34;&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; to &lt;code&gt;&#34;jpy&#34;&lt;/code&gt;. We now have our &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; currencies.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 4, in case &lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; are &lt;code&gt;nil&lt;/code&gt; or empty, because the user called it in a wrong way, like a good Ruby citizen we call &lt;code&gt;super&lt;/code&gt; and let the parent class &lt;code&gt;method_missing&lt;/code&gt; take over (which in our case raises &lt;code&gt;undefined method&lt;/code&gt; error).
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 6, calls the API substituting the appropriate values. Since our method accepts only one parameter &lt;code&gt;args.first&lt;/code&gt; returns it (&lt;code&gt;1&lt;/code&gt;). &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; currencies are in lowercase but the API accepts it in uppercase, so we call &lt;code&gt;String#upcase&lt;/code&gt; to convert these to uppercase.
  &lt;/p&gt;
  
  &lt;p&gt;
    Rest of the lines are same as our &lt;code&gt;usd_to_inr&lt;/code&gt; method.
  &lt;/p&gt;
  
  &lt;p&gt;
    If we execute our specs with &lt;code&gt;rspec spec/goog_currency_spec.rb&lt;/code&gt;, it passes. Now, we can convert from any currency to any other currency!
  &lt;/p&gt;
  
  &lt;p&gt;
    Wait, we still have the old &lt;code&gt;usd_to_inr&lt;/code&gt; method in &lt;code&gt;GoogCurrency&lt;/code&gt; module. We can safely remove it, and let &lt;code&gt;method_missing&lt;/code&gt; take over it. Let&#39;s go ahead and remove it, and see if the spec still passes.
  &lt;/p&gt;
  
  &lt;h3&gt;
    respond_to?
  &lt;/h3&gt;
  
  &lt;p&gt;
    As pointed out by Hao Liu in the comments, every &lt;code&gt;method_missing&lt;/code&gt; should be accompanied with a &lt;code&gt;respond_to?&lt;/code&gt; method.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;respond_to?&lt;/code&gt; method is used to determine if an object responds to a method before actually calling the method. Useful for avoiding runtime method not found errors.
  &lt;/p&gt;
  
  &lt;pre&gt;def self.respond_to?(meth)
  from, to = meth.to_s.split(&#34;_to_&#34;)

  if from.nil? or from == &#34;&#34; or to.nil? or to == &#34;&#34;
    super
  else
    true
  end
end
&lt;/pre&gt;
  
  &lt;p&gt;
    Here if we cannot handle a method we call &lt;code&gt;super&lt;/code&gt; to let the parent class handle it.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Error handling
  &lt;/h3&gt;
  
  &lt;p&gt;
    What good is a library if it does not handle errors graciously? What happens if the user submits a non-existent currency symbol? In that case the API returns the following, with &lt;code&gt;error&lt;/code&gt; number.
  &lt;/p&gt;
  
  &lt;pre&gt;1 {lhs: &#34;&#34;,rhs: &#34;&#34;,error: &#34;4&#34;,icc: false}&lt;/pre&gt;
  
  &lt;p&gt;
    Let&#39;s write a spec for the error condition, we also need to store the invalid error API response in a ruby variable:
  &lt;/p&gt;
  
  &lt;pre&gt;1 invalid_response =&amp;lt;&amp;lt;-INVALID
2 {lhs: &#34;&#34;,rhs: &#34;&#34;,error: &#34;4&#34;,icc: false}
3 INVALID

5 describe &#34;GoogCurrency&#34; do
6   .
7   .
8   [code omitted]
9   .
10  .
11  describe &#34;invalid currencies&#34; do
12    it &#34;throws exception for USD to INX&#34; do
13      FakeWeb.register_uri(:get,
14                           &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?INX&#34;,
15                           :status =&gt; &#34;200&#34;,
16                           :body =&gt; invalid_response)
17      expect { GoogCurrency.usd_to_inx(1) }.to raise_error
18    end
19  end
20  .
21  .
22end
&lt;/pre&gt;
  
  &lt;p&gt;
    Note we are calling method &lt;code&gt;usd_to_inx&lt;/code&gt; with &lt;code&gt;INX&lt;/code&gt; an invalid currency symbol. We have added a &lt;code&gt;describe&lt;/code&gt; block, to group the error conditions. At Line 17, we are expecting an exception being raised. At this point, the specs fail with:
  &lt;/p&gt;
  
  &lt;pre&gt;1expected Exception but nothing was raised&lt;/pre&gt;
  
  &lt;p&gt;
    Now, let&#39;s go ahead and make this spec pass. Let&#39;s modify the &lt;code&gt;method_missing&lt;/code&gt; to check for errors.
  &lt;/p&gt;
  
  &lt;pre&gt;1 if response_hash[&#39;error&#39;].nil? or response_hash[&#39;error&#39;] == &#34;&#34;
2   response_hash[&#39;rhs&#39;].to_f
3 else
4   raise &#34;An error occurred: #{response_hash[&#39;error&#39;]}&#34;
5 end
&lt;/pre&gt;
  
  &lt;p&gt;
    If &lt;code&gt;response_hash[&#39;error&#39;]&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; or it is blank, we return the converted amount, otherwise we raise an error, returning the error code. At this point all the specs should pass.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now, we are almost done with the currency conversion library, except for one little problem. So far we are only converting only small amounts, problems arise when the converted amount runs into thousands (e.g. calling &lt;code&gt;usd_to_inr(1000)&lt;/code&gt;). The API at this point adds a thousands separator, and our little function fails to return the correct value. I will leave handling this special case, as an &lt;em&gt;assignment&lt;/em&gt; for the readers.
  &lt;/p&gt;
  
  &lt;p&gt;
    That&#39;s it for now. In &lt;a href=&#34;http://rubylearning.com/blog/2013/09/13/sinatra-and-google-currency-api-part-2/&#34;&gt;Part 2&lt;/a&gt; of the blog post, we will use what we have developed so far in a small Sinatra app.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;&lt;b&gt;Feel free to ask questions and give feedback in the comments section of this post&lt;/b&gt;. Thanks!&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sinatra: Some Questions from Ruby Newbies</title>
      <link>http://rubylearning.com/2013/08/14/sinatra-some-questions-from-ruby-newbies/</link>
      <pubDate>Wed, 14 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2013/08/14/sinatra-some-questions-from-ruby-newbies/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    Darren Jones in his excellent book &lt;a href=&#34;http://www.amazon.com/gp/product/0987332147/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0987332147&amp;linkCode=as2&amp;tag=satishtalimsw-20&#34;&gt;Jump Start Sinatra&lt;/a&gt; says &amp;#8220;&lt;em&gt;Since its release in 2007, Sinatra has quickly gained in popularity in the Ruby web community due to its elegant simplicity and classy syntax. Everybody who uses it falls in love with its elegant simplicity and classy syntax&lt;/em&gt;.&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    RubyLearning will be conducting a &amp;#8220;free&amp;#8221; (i.e. pay if you like) &lt;a href=&#34;http://rubylearning.com/blog/2013/08/14/a-free-online-course-on-sinatra/&#34;&gt;online course on Sinatra&lt;/a&gt; from 7th Sept. 2013 and many of the would-be participants (mostly Ruby newbies) would have a plethora of questions related to Sinatra.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Satish Talim&lt;/strong&gt; of RubyLearning.org talked to Ruby Gurus Andy Lindeman, Carlo Pecchia, Dan Mayer, Darren Jones, Nathan Esquenazi and Sudarshan Shubakar to answer some of the would-be participant&amp;#8217;s questions.
  &lt;/p&gt;
  
  &lt;hr align=&#34;center&#34; width=&#34;70%&#34; /&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; A warm welcome to you all. For the benefit of the would-be Sinatra course participants, could each one of you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Andy Lindeman&#34; src=&#34;http://rubylearning.com/images/andylindeman.jpg&#34; alt=&#34;Andy Lindeman&#34; /&gt;&lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I am a software generalist focused on web and mobile. I like open source and work primarily on RSpec. I work at Big Nerd Ranch, primarily writing web application backends in Ruby and Rails. I dabble a good bit: currently Objective C/iOS, Clojure, Erlang, and client-side JavaScript frameworks are on my radar. I like working on open source and meeting new folks in the community.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Carlo Pecchia&#34; src=&#34;http://rubylearning.com/images/carlopecchia.jpg&#34; alt=&#34;Carlo Pecchia&#34; /&gt;&lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; &lt;a href=&#34;http://carlopecchia.eu/&#34;&gt;I am&lt;/a&gt; an IT engineer mainly interested on agile methodologies and &amp;#8220;good practices&amp;#8221; for developing large and complex systems. I am also interested in web architectures and emerging programming languages.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Dan Mayer&#34; src=&#34;http://www.rubylearning.com/images/danmayer.jpg&#34; alt=&#34;Dan Mayer&#34; /&gt;&lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I am a tech lead on the LivingSocial consumer web team. I have been developing Ruby applications since 2007 and often work with both Rails and Sinatra. I believe in trying to keep code small, and breaking applications up into logical components and services. My thoughts on development can be found on &lt;a href=&#34;http://mayerdan.com/&#34;&gt;http://mayerdan.com&lt;/a&gt;. I am on twitter as &lt;a href=&#34;https://twitter.com/danmayer&#34;&gt;@danmayer&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Darren Jones&#34; src=&#34;http://www.rubylearning.com/images/darrenjones.jpg&#34; alt=&#34;Darren Jones&#34; /&gt;&lt;b&gt;Darren&lt;/b&gt;&gt;&gt; &lt;a href=&#34;http://daz4126.com/&#34;&gt;I am&lt;/a&gt; the author of &lt;a href=&#34;http://www.amazon.com/gp/product/0987332147/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0987332147&amp;linkCode=as2&amp;tag=satishtalimsw-20&#34;&gt;Jump Start Sinatra&lt;/a&gt;, a short book that helps you to get up to speed with Sinatra over a weekend, published by Sitepoint. I have been using Sinatra since 2009 and used it to build the &lt;a href=&#34;http://cardsinthecloud.com/&#34;&gt;Cards in the Cloud&lt;/a&gt; website. I live in Manchester in the UK where I teach Mathematics and enjoy playing water polo.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Nathan Esquenazi&#34; src=&#34;http://www.rubylearning.com/images/nathanesquenazi.jpg&#34; alt=&#34;Nathan Esquenazi&#34; /&gt;&lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; I am one of the creators of the &lt;a href=&#34;http://www.padrinorb.com/&#34;&gt;Padrino framework&lt;/a&gt;, enabling powerful extensions to the Sinatra core and the co-founder of &lt;a href=&#34;http://thecodepath.com/&#34;&gt;CodePath&lt;/a&gt;, providing practical training to engineers interested in learning mobile development.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Sudarshan Shubakar&#34; src=&#34;http://www.rubylearning.com/images/sudarshanshubakar.jpg&#34; alt=&#34;Sudarshan Shubakar&#34; width=&#34;115&#34; height=&#34;115&#34; /&gt;&lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; I am a software developer based out of Pune, India. I enjoy working with design principles and patterns, learning new programming languages and a bit of open source development. I am majorly a Java developer for the past 11 years and have recently started working on Ruby out of interest.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; What is Sinatra best suited for?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; Simple web apps, especially those that are mostly APIs or only have a few views.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Sinatra is an &amp;#8220;essential&amp;#8221; framework for Ruby based web application. Talking about &amp;#8220;web app&amp;#8221; the point of reference is &amp;#8211; without any doubt &amp;#8211; RubyOnRails (RoR): Sinatra is lightweight compared to it. You have less features, but also less stuff to digest to start with. Personally I&amp;#8217;ve used Sinatra (and I was really satisfied by it) for apps where data complexity and user interactions are not critical points (in my case: internal enterprise app).
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; Sinatra is great for smaller applications and apis. Sinatra fits really well when there is a limited front end which uses a lot less of the standard view layer helpers and other features common in Rails. I have personally found that Sinatra is best for APIs and micro sites. If an application with a significant front end is going to be developed, it is often best to start with rails as you will start to home grow and try to replace many common features of rails with your own bad implementations. Finally people often forget how much rails helps in terms of basic security precautions, making it harder to make common mistakes. There is a well known Ruby community quote that I can&amp;#8217;t find attribution for, &amp;#8220;every Ruby web framework eventually becomes a horrible bad and buggy implementation of rails&amp;#8221;.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; Putting your Ruby code onto the web! At its heart Sinatra is essentially just a wrapper for making it easy to deal with HTTP requests and responses by providing some very nice helper methods. This means that it is suited for anything that you can write in Ruby. It can handle small projects brilliantly but is also great for larger projects too.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is incredibly well-suited for building REST APIs for mobile clients as well as web back-end services that are paired with modern javascript frameworks like Backbone, AngularJS, Ember, et al.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; The Sinatra book &lt;a href=&#34;http://sinatra-book.gittr.com/#introduction&#34;&gt;introduction&lt;/a&gt; says it best by these statements:&lt;br /&gt;* In Sinatra, you can write short ad hoc applications or mature, larger application with the same easiness.&lt;br /&gt;* Sinatra really shines when used for experiments and application mock-ups or for creating a quick interface for your code.&lt;br /&gt;My take on this is that Sinatra gets you started quickly on whatever problem you are trying to solve (with a web/URL based solution) quickly. There is hardly a learning curve and you can have a meaningful implementation of your solution within no time.
  &lt;/p&gt;
  
  &lt;p&gt;
    Another point where Sinatra is most useful is when you would like finer control over how your application is organized. This &lt;a href=&#34;http://stackoverflow.com/questions/3068114/what-is-the-limit-of-sinatra&#34;&gt;discussion on stackoverflow.com&lt;/a&gt; provides some good inputs on how Sinatra compares to Rails. As one person says in this discussion, there is no limit to what you can do with it.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; I am a Ruby newbie and if I learn Sinatra, does that help me with Ruby on Rails?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think it depends on exactly how much you know.
  &lt;/p&gt;
  
  &lt;p&gt;
    For folks with little background on programming or web application development at all, I think it&amp;#8217;s a great fit. There&amp;#8217;s not very much &amp;#8220;magic&amp;#8221; and it&amp;#8217;s easy to get up and running quickly.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Sure! Learning Sinatra gives you all the details about how HTTP protocol is handled; how routing works; how to manage your models; how to talk with a Data Base (noSQL are welcome too); how a template system has to be used; and so on. My suggestion is: start with Sinatra, and *then* consider RoR for &amp;#8220;not small&amp;#8221; projects.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; Learning Sinatra is a great way to begin to learn Rails. It will definitely help you learn Rails as it helps you learn Ruby basics as well as common Ruby web development practices. In many ways it is a smaller and simpler way to learn to work with a web framework, which is excellent. I find while this is great for learning, it leads to a less natural project structure and uncommon patterns for larger applications. Actually learning some of the basic web development concepts first in Sinatra would help one to understand why these concepts exist and why they are bit more complicated in Rails.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; A little, but it is more useful for improving your Ruby. I think that it would help you understand some of the &amp;#8216;magic&amp;#8217; that Rails does in the background as you have a lot more control with Sinatra.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is an excellent introduction to the Ruby language and to web development. Sinatra has a remarkably short learning curve and as such allows for new developers to tinkering with web apps of all sorts with minimal overhead or confusion. The distinct advantage of learning Sinatra while you are developing your Ruby acumen is that Sinatra is very explicit and simple allowing the expressiveness of Ruby itself to shine through.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; Hmm, will Sinatra help one learn Ruby on Rails&amp;#8230; probably not in an obvious manner. However my understanding is that if one tries to build a well-structured MVC application with Sinatra, one would find it easier to appreciate what Rails offers out of the box and why it mandates what it does.
  &lt;/p&gt;
  
  &lt;p&gt;
    With Sinatra there is almost no mandate apart from the dsl syntax itself. So you are free to organize your application any way you like.
  &lt;/p&gt;
  
  &lt;p&gt;
    If you are trying to learn Rails while you are developing your pet application, my understanding is that you may find it slightly difficult because you may need to deviate from your problem domain to understand the framework. This probably isn&amp;#8217;t true if you are just trying to learn Rails with just a mock application.
  &lt;/p&gt;
  
  &lt;p&gt;
    With Sinatra, like I&amp;#8217;ve already mentioned, there is hardly a learning curve and you stay focused on your problem domain.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; How much Ruby do I have to cover in order to start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think it again depends on what an individual developer&amp;#8217;s background is.
  &lt;/p&gt;
  
  &lt;p&gt;
    Developers who are new to Ruby but know other object-oriented languages will likely pick up enough Ruby to be proficient very quickly.
  &lt;/p&gt;
  
  &lt;p&gt;
    Other developers may need more basics about the structure and basic syntax and semantics of programming languages first.
  &lt;/p&gt;
  
  &lt;p&gt;
    That said, I think you could pair a lot of the learning: while introducing a Sinatra concept, also introduce some Ruby concepts.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; At the very beginning &amp;#8220;not too much&amp;#8221;, but if and when you want to code seriously you have to dirty your hands. There is no escape! &lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I would make sure to cover some Ruby basics firsts:
  &lt;/p&gt;
  
  &lt;p&gt;
    * Running a ruby script&lt;br /&gt;* variables&lt;br /&gt;* method calls&lt;br /&gt;* basic data structures (array, hashes, strings, and numericals)
  &lt;/p&gt;
  
  &lt;p&gt;
    After making sure those basics are understood, I think you could get into Sinatra specifics. It would also likely help to have a basic knowledge of html, CSS, and possibly JSON, if you are planning to cover api endpoints.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; Not much at all to get started. But the more Ruby you know, the better your Sinatra applications will be. As I mentioned in my answer to question 1, Sinatra apps are basically just Ruby apps put on the web, so the standard of your Sinatra app will be directly linked to how much Ruby you know. The Sinatra source code is written in Ruby and a great exercise is to read through it (it&amp;#8217;s only around 2000 lines and very well commented). This will help to improve your Ruby skills and help you to understand how Sinatra works.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is entirely built using idiomatic ruby constructs and patterns. That said you can start tinkering with Sinatra well before you have a strong grasp on Ruby. I would recommend taking the time to first familiarize yourself with the basic ruby constructs and then you can quickly dive in and learn by doing.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; Have you seen &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;http://www.sinatrarb.com/&lt;/a&gt; !!:)
  &lt;/p&gt;
  
  &lt;p&gt;
    I needed a beginner&amp;#8217;s level knowledge of Ruby to start using Sinatra.
  &lt;/p&gt;
  
  &lt;p&gt;
    However, when you are learning a new language like Ruby and using something like Sinatra to do so, it is important to understand where the domain of the framework starts blurring and your problem domain begins to shine.
  &lt;/p&gt;
  
  &lt;p&gt;
    So you may need to understand Ruby much deeper to efficiently solve the actual problem that you are working on.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; How important is it for me to know Rack while learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think Rack is pretty simple for experienced developers to understand, but understanding why it&amp;#8217;s needed and how it fits is a bit more abstract and difficult. I don&amp;#8217;t think new developers need to understand Rack while learning Sinatra.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Rack is a very basic and important component, don&amp;#8217;t be afraid by it. I strongly encourage you to take half a day to study it: it&amp;#8217;s time well invested.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; While Rack is great, I think it could likely be skipped over at the beginning to allow new users to just think in terms of a Sinatra request and response cycle. It might be a good thing to cover a bit further into the lessons, but to help users get to the first goal to dynamically add information to a page, I don&amp;#8217;t believe knowledge of Rack is really necessary.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; I don&amp;#8217;t think you need to know much about Rack, except that Sinatra (and most other Ruby frameworks) uses it extensively in the background. Once you get more confident with Sinatra then you can start to dig a bit deeper into how Rack runs the show in the background, but it isn&amp;#8217;t essential when you first start.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Rack is the web-server interface that underlies web development in Ruby. Learning about Rack and Rack middleware development will give the developer an insightful look under the hood at how the request/response model of the web interacts in ruby-based web libraries.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; It is possible to write simple Sinatra apps in the classic style without using Rack. However as your app begins to gather a bit of complexity, you will want to shift to the Modular style. Here&amp;#8217;s where Rack will help you organize your app better. This is of course apart from the benefit of web server abstraction Rack inherently provides.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; While developing Sinatra apps which style (Modular or Classic) should I use?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; If the audience is beginners, I&amp;#8217;d start with classic because you have to keep very little context in your head. As the audience becomes more experienced, move toward a more modular approach.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; It depends roughly on your application &amp;#8220;size&amp;#8221;. Modular style gives you more maintainable and readable code. Anyway start with Classic and then when your app grows up, consider switching to Modular style.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I think for teaching beginners, the Classic style is simpler to understand and would be quicker to get students to the learn / reward cycle. Sinatra apps that grow large, is where the modular approach has many advantages. For larger apis, the modular approach is definitely the way to go, but often I find when you are really utilizing that approach it would make sense to just have a full Rails app. I haven&amp;#8217;t ended up building out to many very large Sinatra applications so there might be other advice on this point.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; It doesn&amp;#8217;t matter at all. I really like the fact that the Classic style allows you to get started really quickly and build apps with all the code in just a single file. The modular style makes it easier to organize large applications and is a good approach if you are working in teams as each module can be developed independently of the other. Modular apps also make it easier to reuse and share code in other projects.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; While tinkering around learning Sinatra or for extremely simple apps, use classic. For writing middle-wares and production applications, I recommend using Modular. Modular is more explicit and I prefer having my Sinatra apps contained within an explicit class of my choosing. I don&amp;#8217;t see many benefits to using the classic style.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; When you are starting to learn Sinatra, I would recommend using the classic style to get a feel of how things work. If you are building a meaningful application of even moderate complexity, the Modular style will help you keep your code organized. Once you are familiar with the Modular style of organizing your Sinatra app, you may be able to work with the Modular style with ease from the word go.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Well, we have set the ball rolling. &lt;b&gt;What&amp;#8217;s your take on this?&lt;/b&gt; Kindly post your thoughts as comments to this blog post. Looking forward to some interesting read.&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How do I use Sinatra to access the Google&#43; API?</title>
      <link>http://rubylearning.com/2011/09/20/how-do-i-use-sinatra-to-access-the-google-api/</link>
      <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2011/09/20/how-do-i-use-sinatra-to-access-the-google-api/</guid>
      <description>&lt;div&gt;
  &lt;h2&gt;
    How do I use Sinatra to access the Google+ API?
  &lt;/h2&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    RubyLearning is conducting &lt;a href=&#34;http://goo.gl/he9ao&#34;&gt;many free, online courses on Google+&lt;/a&gt;. Some participants wanted an answer to their question &amp;#8220;&lt;strong&gt;How do I use Sinatra to access the Google+ API?&lt;/strong&gt;&amp;#8221; This blog post explains the same. Read on.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Pre-requisite
  &lt;/h3&gt;
  
  &lt;h4&gt;
    Install Sinatra, Git, Heroku, Bundler
  &lt;/h4&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://goo.gl/Wr51F&#34;&gt;Refer RubyLearning&amp;#8217;s article on Google+&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Create a folder on your hard disk
  &lt;/h3&gt;
  
  &lt;p&gt;
    Create a folder &lt;code&gt;sinatragplus&lt;/code&gt;. This is where we will store our Sinatra app. Open a Bash shell in this folder.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Create the following folders also
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://rubylearning.com/blog/wp-content/uploads/folder_gplus.jpg&#34; alt=&#34;Folder for app&#34; /&gt;
  &lt;/p&gt;
  
  &lt;h3&gt;
    Organize your application
  &lt;/h3&gt;
  
  &lt;h4&gt;
    Static Files
  &lt;/h4&gt;
  
  &lt;p&gt;
    Static files are served from the &lt;code&gt;public&lt;/code&gt; folder. Note that the &lt;code&gt;public&lt;/code&gt; folder name will not be included in the URL. A file ./public/stylesheets/style.css is made available as rubylearning.org/stylesheets/style.css. Do note that we can have &lt;em&gt;any&lt;/em&gt; directory layout under the &lt;code&gt;public&lt;/code&gt; folder.
  &lt;/p&gt;
  
  &lt;h4&gt;
    Layout
  &lt;/h4&gt;
  
  &lt;p&gt;
    We will soon create &lt;code&gt;layout.erb&lt;/code&gt; file in the &lt;code&gt;views&lt;/code&gt; folder. This allows the basic layout of our site headers, footers and navigation panes to be controlled independently. A change in &lt;code&gt;layout.erb&lt;/code&gt; is instantly applied across our whole site.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s look at a sample file:
  &lt;/p&gt;
  
  &lt;pre&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;..&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;p&gt;
    In the above file, note the usage of &lt;code&gt;yield&lt;/code&gt;. The file calls &lt;code&gt;yield&lt;/code&gt; at the point you want the content to be included i.e. it refers to some .erb in the &lt;code&gt;views&lt;/code&gt; folder and the results of that .erb are stuck at the place, where you called &lt;code&gt;yield&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now, let&amp;#8217;s write our app&amp;#8217;s &lt;code&gt;layout.erb&lt;/code&gt; file:
  &lt;/p&gt;
  
  &lt;pre&gt;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;
&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;A Sinatra app to access Google+&amp;lt;/title&amp;gt;
    &amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34; /&amp;gt;
    &amp;lt;meta name=&#34;description&#34; content=&#34;RubyLearning.org&#34; /&amp;gt;
    &amp;lt;meta name=&#34;keywords&#34; content=&#34;rubylearning,ruby,ruby programming,ruby course,sinatra course&#34; /&amp;gt;
    &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;http://rubylearning.com/stylesheets/style.css&#34; /&amp;gt;
    &amp;lt;link rel=&#34;icon&#34; type=&#34;image/ico&#34; href=&#34;http://rubylearning.com/images/favicon.ico&#34; /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h4&gt;
    Image
  &lt;/h4&gt;
  
  &lt;p&gt;
    I am using a favicon (&lt;a href=&#34;http://rubylearning.com/images/favicon.ico&#34;&gt;favicon.ico&lt;/a&gt;) for my app, which is stored in the &lt;code&gt;public/images&lt;/code&gt; folder.
  &lt;/p&gt;
  
  &lt;h4&gt;
    Stylesheet
  &lt;/h4&gt;
  
  &lt;p&gt;
    We have our stylesheet namely &lt;code&gt;style.css&lt;/code&gt; in the folder &lt;code&gt;public/stylesheets&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;pre&gt;body
{
  line-height: 1.6em;
}

h1 {
  color: #2A1959;
  border-bottom: 2px solid #2A1959;
}

h2 {
  color: #474B94;
  font-size: 1.2 em;
}

#footer {
  clear: both;
  border-top: 1px solid #2A1959;
  text-align: left; 
  height: 50px; 
  font-size: 70%;
  width: 100%;
}

#hor-minimalist-a
{
  font-family: &#34;Lucida Sans Unicode&#34;, &#34;Lucida Grande&#34;, Sans-Serif;
  font-size: 12px;
  background: #fff;
  margin: 45px;
  width: 480px;
  border-collapse: collapse;
  text-align: left;
}
#hor-minimalist-a th
{
  font-size: 14px;
  font-weight: normal;
  color: #039;
  padding: 10px 8px;
  border-bottom: 2px solid #6678b1;
}
#hor-minimalist-a td
{
  color: #669;
  padding: 9px 8px 0px 8px;
}
#hor-minimalist-a tbody tr:hover td
{
  color: #009;
}
&lt;/pre&gt;
  
  &lt;h4&gt;
    View
  &lt;/h4&gt;
  
  &lt;p&gt;
    A view is responsible for generating a user interface, normally based on data. For example, an online store will have a list of products to be displayed on a catalogue screen. The view accesses the data and formats it for the end-user.
  &lt;/p&gt;
  
  &lt;p&gt;
    All file-based views are looked up in the &lt;code&gt;views&lt;/code&gt; folder.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Using ERB
  &lt;/h3&gt;
  
  &lt;p&gt;
    ERB is written in pure Ruby and is included with the standard Sinatra distribution. ERB allows you to embed Ruby statements in an HTML page.
  &lt;/p&gt;
  
  &lt;p&gt;
    The important things to know about an &lt;code&gt;.erb&lt;/code&gt; file is that &lt;code&gt;&amp;lt;%= ruby_code %&amp;gt;&lt;/code&gt; evaluates the ruby code and outputs the result, and &lt;code&gt;&amp;lt;% ruby_code %&amp;gt;&lt;/code&gt; evaluates the code, but doesn&amp;#8217;t output anything.
  &lt;/p&gt;
  
  &lt;p&gt;
    We will use ERB for our app.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: If we write:
  &lt;/p&gt;
  
  &lt;pre&gt;get &#39;/&#39; do
  erb :index
end
&lt;/pre&gt;
  
  &lt;p&gt;
    This tells Sinatra that when a &lt;code&gt;GET&lt;/code&gt; request for &amp;#8216;/&amp;#8217; comes in, that we should use the ERB helper to render the &lt;code&gt;index.erb&lt;/code&gt; template, which is stored in the &lt;code&gt;views&lt;/code&gt; sub-folder by convention and marked up with embedded Ruby (ERB).
  &lt;/p&gt;
  
  &lt;h3&gt;
    Write the sinatragplus.rb app
  &lt;/h3&gt;
  
  &lt;p&gt;
    Store &lt;code&gt;sinatragplus.rb&lt;/code&gt; in the folder &lt;code&gt;sinatragplus&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;# sinatragplus.rb
require &#39;sinatra&#39;
require &#39;google_plus&#39;

error do
  erb :&#39;500&#39;
end

#class
class GPlus
  def initialize(apikey, gid)
    @apikey = apikey
    @gid = gid
    get_info
  end
  attr_reader :row0, :row1, :row2
  private
    #Get info about specific G+ ID
    def get_info
      # GooglePlus.api_key = &#39;Your API Key&#39;
      begin
        GooglePlus.api_key = @apikey
        person = GooglePlus::Person.get(@gid.to_i)
        @row0 = person.display_name
        @row1 = person.tagline
        @row2 = person.url
      rescue Exception =&gt; msg  
        # display the system generated error message  
        puts msg  
      end  
    end
end
 
get &#39;/&#39; do
  erb :index
end

# Display Google+ details
post &#39;/show&#39; do
  @gplus = GPlus.new(params[:apikey], params[:gid])
  erb :show
end
&lt;/pre&gt;
  
  &lt;h4&gt;
    Explanation
  &lt;/h4&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Install: &lt;code&gt;gem install google_plus&lt;/code&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      We are going to use the above installed &lt;a href=&#34;https://github.com/seejohnrun/google_plus&#34;&gt;google_plus&lt;/a&gt; gem.
    &lt;/li&gt;
    &lt;li&gt;
      To access the Google+ API, &lt;a href=&#34;https://code.google.com/apis/console#access&#34;&gt;get your own Google API key&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Note down the Google+ ID of the person whose Google+ profile you want to display using this app. For example, here&amp;#8217;s my &lt;a href=&#34;https://plus.google.com/107809992818057105754/&#34;&gt;Google+ URL&lt;/a&gt; and the number in the URL namely &lt;b&gt;107809992818057105754&lt;/b&gt; is my Google+ ID.
    &lt;/li&gt;
    &lt;li&gt;
      When a GET request for &amp;#8216;/&amp;#8217; comes in, we are going to render the &lt;code&gt;index.erb&lt;/code&gt; template in the &lt;code&gt;public/views&lt;/code&gt; folder.
    &lt;/li&gt;
    &lt;li&gt;
      The file &lt;a href=&#34;https://gist.github.com/1228369#file_index.erb&#34;&gt;index.erb&lt;/a&gt; has a HTML form that accepts the Google+ API key and ID for the user profile that you want to display. &lt;b&gt;Note&lt;/b&gt; that even if you do not give any value to these fields, the app will not crash. &lt;em&gt;Handler&lt;/em&gt; is the generic term that Sinatra uses for the &amp;#8220;controllers&amp;#8221;. A handler is the initial point of entry for new HTTP requests into your application. In handlers you can reach submitted form parameters directly via the &lt;code&gt;params&lt;/code&gt; hash. Also note, that when you click on the submit button of the form a &lt;code&gt;POST&lt;/code&gt; request is being sent.
    &lt;/li&gt;
    &lt;li&gt;
      The &lt;code&gt;post &#39;/show&#39; do&lt;/code&gt; creates an object of our class &lt;code&gt;GPlus&lt;/code&gt; passing to the &lt;code&gt;initialize&lt;/code&gt; method the apikey and google id that your entered on the screen (via &lt;code&gt;params&lt;/code&gt;). The &lt;code&gt;initialize&lt;/code&gt; method in-turn calls a private method &lt;code&gt;get_info&lt;/code&gt; that accesses the Google+ API and returns a &lt;a href=&#34;http://developers.google.com/+/api/latest/people&#34;&gt;person&lt;/a&gt; object We call the method &lt;code&gt;display_name&lt;/code&gt;, &lt;code&gt;tagline&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; on the &lt;code&gt;person&lt;/code&gt; object and populate instance variables &lt;code&gt;@row0&lt;/code&gt;, &lt;code&gt;@row1&lt;/code&gt; and &lt;code&gt;@row2&lt;/code&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The &lt;a href=&#34;https://gist.github.com/1228369#file_show.erb&#34;&gt;show.erb&lt;/a&gt; displays these values in a HTML table.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Error Handling
  &lt;/h3&gt;
  
  &lt;p&gt;
    When someone comes to a page on your domain that is no longer there (either because it’s been deleted, because they’ve typed something in wrong or because the link that they followed was wrong) they are shown the dreaded 404 ‘page not found’ error page.
  &lt;/p&gt;
  
  &lt;p&gt;
    This error simply means that the person was able to communicate with your server but that the server couldn&amp;#8217;t find the page that they were after.
  &lt;/p&gt;
  
  &lt;p&gt;
    404 errors should not be confused with &amp;#8220;server not found&amp;#8221; or similar errors, in which a connection to the destination server could not be made at all.
  &lt;/p&gt;
  
  &lt;p&gt;
    When a &lt;code&gt;Sinatra::NotFound&lt;/code&gt; exception is raised, or the response&amp;#8217;s status code is 404, the &lt;code&gt;not_found&lt;/code&gt; handler is invoked:
  &lt;/p&gt;
  
  &lt;p&gt;
    Write &lt;a href=&#34;https://gist.github.com/1228369#file_404.erb&#34;&gt;404.erb&lt;/a&gt; in the &lt;code&gt;public/views&lt;/code&gt; folder. Note that I had to surround the &lt;code&gt;erb :&#39;404&#39;&lt;/code&gt; in single quotes. This is because Ruby syntax doesn&amp;#8217;t let symbol&amp;#8217;s first character be a number. By quoting it, it gets around that issue.
  &lt;/p&gt;
  
  &lt;p&gt;
    A 500 error page will be thrown to the client when the Web server (running the Web Site) encounters an unexpected condition that prevents it from fulfilling the request by the client (e.g. your Web browser) for access to the requested URL.
  &lt;/p&gt;
  
  &lt;p&gt;
    By default error will catch &lt;code&gt;Sinatra::ServerError&lt;/code&gt;. Sinatra will pass you the error via the &amp;#8216;sinatra.error&amp;#8217; in &lt;code&gt;request.env&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Write &lt;a href=&#34;https://gist.github.com/1228369#file_500.erb&#34;&gt;500.erb&lt;/a&gt; in the &lt;code&gt;public/views&lt;/code&gt; folder.
  &lt;/p&gt;
  
  &lt;p&gt;
    Our app is ready! Let&amp;#8217;s deploy it to Heroku.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Create config.ru file in the folder sinatragplus
  &lt;/h3&gt;
  
  &lt;p&gt;
    This file contains:
  &lt;/p&gt;
  
  &lt;pre&gt;require &#39;./sinatragplus&#39;
run Sinatra::Application
&lt;/pre&gt;
  
  &lt;h3&gt;
    Install required gems for our app
  &lt;/h3&gt;
  
  &lt;p&gt;
    In the Bash shell type:
  &lt;/p&gt;
  
  &lt;pre&gt;$ bundle init
&lt;/pre&gt;
  
  &lt;p&gt;
    Edit the created &lt;code&gt;Gemfile&lt;/code&gt; with your preferred text editor to let it look like this:
  &lt;/p&gt;
  
  &lt;pre&gt;source &#34;http://rubygems.org&#34;
gem &#39;sinatra&#39;
gem &#39;google_plus&#39;
&lt;/pre&gt;
  
  &lt;p&gt;
    In the Bash shell type:
  &lt;/p&gt;
  
  &lt;pre&gt;$ bundle check
&lt;/pre&gt;
  
  &lt;p&gt;
    Finally in the open Bash shell, type:
  &lt;/p&gt;
  
  &lt;pre&gt;$ bundle install
&lt;/pre&gt;
  
  &lt;h3&gt;
    Create a Procfile
  &lt;/h3&gt;
  
  &lt;p&gt;
    Use a &lt;code&gt;Procfile&lt;/code&gt;, a text file in the root directory of your application, to explicitly declare what command should be executed to start a web dyno. In this case, you simply need to execute the sinatragplus.rb using Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    Here&amp;#8217;s our &lt;code&gt;Procfile&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;web: bundle exec ruby sinatragplus.rb -p $PORT&lt;/pre&gt;
  
  &lt;h3&gt;
    Setup your local app to use Git
  &lt;/h3&gt;
  
  &lt;p&gt;
    I have the &lt;code&gt;sinatragplus.rb&lt;/code&gt;, &lt;code&gt;Procfile&lt;/code&gt; and &lt;code&gt;config.ru&lt;/code&gt; files already in the folder &lt;code&gt;sinatragplus&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    In the already open Bash shell, type:
  &lt;/p&gt;
  
  &lt;pre&gt;$ git init
$ git add .
$ git commit -m &#34;sinatragplus first commit&#34;
&lt;/pre&gt;
  
  &lt;h3&gt;
    Create the app on Heroku
  &lt;/h3&gt;
  
  &lt;p&gt;
    In the bash shell, type:
  &lt;/p&gt;
  
  &lt;pre&gt;$ heroku create sinatragplus
&lt;/pre&gt;
  
  &lt;h3&gt;
    Push your application to Heroku
  &lt;/h3&gt;
  
  &lt;pre&gt;$ git push heroku master
&lt;/pre&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it, the app is now running on Heroku! You can take a look at it, in your browser type: &lt;a href=&#34;http://sinatragplus.herokuapp.com/&#34;&gt;http://sinatragplus.herokuapp.com/&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What next?
  &lt;/h3&gt;
  
  &lt;p&gt;
    On the &lt;code&gt;person&lt;/code&gt; object use the &lt;code&gt;attributes&lt;/code&gt; method to get all the &lt;code&gt;person&lt;/code&gt; fields back as a Hash:
  &lt;/p&gt;
  
  &lt;pre&gt;properties = person.attributes
properties.each { |key, value| puts &#34;#{key} equals #{value}&#34; }
&lt;/pre&gt;
  
  &lt;h3&gt;
    Exercise
  &lt;/h3&gt;
  
  &lt;p&gt;
    In &lt;code&gt;show.erb&lt;/code&gt; I have populated only the &lt;code&gt;display_name&lt;/code&gt;, &lt;code&gt;tagline&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; fields of &lt;code&gt;person&lt;/code&gt;. Populate all the other &lt;code&gt;person&lt;/code&gt; fields in the HTML table that is generated by &lt;code&gt;show.erb&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Have fun!
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Do post a link to your version of this program. Feel free to ask questions and give feedback in the comments section of this post.&lt;/em&gt; Fellow Rubyists, if you would like to write a guest blog post for RubyLearning email me at &lt;b&gt;satish [at] rubylearning.org&lt;/b&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How do I run a Sinatra app using JRuby?</title>
      <link>http://rubylearning.com/2011/09/03/how-do-i-run-a-sinatra-app-using-jruby/</link>
      <pubDate>Sat, 03 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2011/09/03/how-do-i-run-a-sinatra-app-using-jruby/</guid>
      <description>&lt;div&gt;
  &lt;h2&gt;
    How do I run a Sinatra app using JRuby?
  &lt;/h2&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    RubyLearning is conducting a &lt;a href=&#34;http://goo.gl/WZDl8&#34;&gt;free, online JRuby 101 course&lt;/a&gt; &amp;#8211; the first of its kind, on Google+ Some participants wanted an answer to their question &amp;#8220;&lt;strong&gt;How do I run a Sinatra app using JRuby?&lt;/strong&gt;&amp;#8221; This blog post explains the same. Read on.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Pre-requisite
  &lt;/h3&gt;
  
  &lt;p&gt;
    I have a Windows XP box but the following should work on Mac and Linux-based computers too.
  &lt;/p&gt;
  
  &lt;p&gt;
    Ensure that you have already installed JDK 6, JRuby and set the relevant system environment variables &lt;b&gt;path&lt;/b&gt;, &lt;b&gt;classpath&lt;/b&gt;, &lt;b&gt;JAVA_HOME&lt;/b&gt; and &lt;b&gt;JRUBY_HOME&lt;/b&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Install Bundler
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;a href=&#34;http://gembundler.com/&#34;&gt;Bundler&lt;/a&gt;&lt;/strong&gt; helps prevent conflicting or missing gems and shines when it&amp;#8217;s time to configure those dependencies at install time and runtime.
  &lt;/p&gt;
  
  &lt;p&gt;
    JRuby comes with a fairly loaded standard library from scratch but that does not mean there aren&amp;#8217;t other things you&amp;#8217;ll need. Almost all of them are installable as Gems. RubyGems is the premier package management tool for Ruby. It works fine with JRuby and JRuby ships with it. You use it through the gem command. We will need to run the JRuby version of the gem command and to ensure that, we use the &lt;code&gt;-S&lt;/code&gt; flag to the interpreter.
  &lt;/p&gt;
  
  &lt;p&gt;
    Create a project folder (say c:\jrubysinatra) on your hard-disk. Ensure that your internet connection is active. Now, open a command window in this project folder and type:
  &lt;/p&gt;
  
  &lt;pre&gt;jruby -S gem install bundler
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This approach (&lt;code&gt;jruby -S&lt;/code&gt;) works for any Ruby command-line tool, including gem, rake, spec, and others.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Create a Gemfile
  &lt;/h3&gt;
  
  &lt;p&gt;
    Next, in your project folder, create a &lt;b&gt;Gemfile&lt;/b&gt;. It looks something like this:
  &lt;/p&gt;
  
  &lt;pre&gt;source &#34;http://rubygems.org&#34;
gem &#39;sinatra&#39;
&lt;/pre&gt;
  
  &lt;p&gt;
    This Gemfile says a few things. First, it says that bundler should look for gems declared in the Gemfile at &lt;a href=&#34;http://rubygems.org/&#34;&gt;http://rubygems.org&lt;/a&gt;. You can declare multiple Rubygems sources, and bundler will look for gems in the order you declared the sources. Next, you will have to list all your applications dependencies in there. Sinatra&amp;#8217;s direct dependencies (Rack and Tilt) will, however, be automatically fetched and added by Bundler.
  &lt;/p&gt;
  
  &lt;p&gt;
    To make bundler install the dependencies, in the already open command window, type:
  &lt;/p&gt;
  
  &lt;pre&gt;jruby -S bundle install
&lt;/pre&gt;
  
  &lt;p&gt;
    Because all the gems in your Gemfile have dependencies of their own (and some of those have their own dependencies), running &lt;code&gt;jruby -S bundle install&lt;/code&gt; on the Gemfile above, will install quite a few gems. If any of the needed gems are already installed, Bundler will use them. After installing any needed gems to your system, bundler writes a snapshot of all the gems and versions that it installed to &lt;b&gt;Gemfile.lock&lt;/b&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Write your Sinatra app
  &lt;/h3&gt;
  
  &lt;p&gt;
    Create the file &lt;b&gt;&lt;a href=&#34;https://gist.github.com/1190382&#34;&gt;hellojruby.rb&lt;/a&gt;&lt;/b&gt; in the folder c:\jrubysinatra.
  &lt;/p&gt;
  
  &lt;pre&gt;require &#34;rubygems&#34;
require &#34;bundler/setup&#34;

require &#34;sinatra&#34;

get &#39;/hi&#39; do
    &#34;Hello JRuby World!&#34;
end
&lt;/pre&gt;
  
  &lt;h3&gt;
    Set up your Sinatra application to use Bundler
  &lt;/h3&gt;
  
  &lt;p&gt;
    For your Sinatra application, you will need to set up bundler before trying to require any gems. At the top of the first file that your application loads (for Sinatra, the file that calls &lt;code&gt;require &#34;sinatra&#34;&lt;/code&gt;), put the following code:
  &lt;/p&gt;
  
  &lt;pre&gt;require &#34;rubygems&#34;
require &#34;bundler/setup&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    This will automatically discover your Gemfile, and make all the gems in your Gemfile available to Ruby (in technical terms, it puts the gems &amp;#8220;on the load path&amp;#8221;). You can think of it as an adding some extra powers to require &amp;#8220;rubygems&amp;#8221;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now that your code is available to Ruby, you can require the gems that you need. For instance, you can &lt;code&gt;require &#34;sinatra&#34;&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Run your Sinatra application
  &lt;/h3&gt;
  
  &lt;p&gt;
    In the already open command window, type:
  &lt;/p&gt;
  
  &lt;pre&gt;jruby -S bundle exec jruby hellojruby.rb
&lt;/pre&gt;
  
  &lt;p&gt;
    In the command window, you will see:
  &lt;/p&gt;
  
  &lt;pre&gt;== Sinatra/1.2.6 has taken the stage on 4567 for development with backup from WEBrick
[2011-09-03 07:21:17] INFO  WEBrick 1.3.1
[2011-09-03 07:21:17] INFO  ruby 1.8.7 (2011-08-23) [java]
[2011-09-03 07:21:17] INFO  WEBrick::HTTPServer#start: pid=5128 port=4567
&lt;/pre&gt;
  
  &lt;h3&gt;
    Access the Sinatra application
  &lt;/h3&gt;
  
  &lt;p&gt;
    In your browser, visit the URL: &lt;a href=&#34;http://localhost:4567/hi&#34;&gt;http://localhost:4567/hi&lt;/a&gt; &amp;#8211; the browser shall display &amp;#8220;&lt;b&gt;Hello JRuby World!&lt;/b&gt;&amp;#8220;
  &lt;/p&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it for now.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Feel free to ask questions and give feedback in the comments section of this post.&lt;/em&gt; Fellow Rubyists, if you would like to write a guest blog post for RubyLearning email me at &lt;b&gt;satish [at] rubylearning.org&lt;/b&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>20&#43; Rubyists to Follow on Google&#43;</title>
      <link>http://rubylearning.com/2011/07/01/20-rubyists-to-follow-on-google/</link>
      <pubDate>Fri, 01 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2011/07/01/20-rubyists-to-follow-on-google/</guid>
      <description>&lt;div style=&#34;width:image 560 px; font-size:80%; text-align:center;&#34;&gt;
  &lt;img src=&#34;http://rubylearning.com/data/googleplus.jpg&#34; alt=&#34;Google+&#34; width=&#34;560&#34; style=&#34;padding-bottom:0.5em;&#34; /&gt;&lt;br /&gt;Google+
&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;
    What&amp;#8217;s Google+ ?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Google+, pronounced “Google plus” is a new social network from Google. The service, which is initially available to a select group of Google users who will soon be able to invite others, will let people share and discuss status updates, photos and links, much as they do on Facebook.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;
    A list of Rubyists Using Google+
  &lt;/h3&gt;
  
  &lt;p&gt;
    RubyLearning has compiled this list of over 20 Rubyists, in alphabetical order, with a link to their Google+ profile. The following list is &lt;em&gt;not&lt;/em&gt; intended to be all-inclusive, but it should give you a great start to following some talented Rubyists.
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/117847179642773850013/&#34;&gt;Aaron Patterson&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/116451060191319294942/&#34;&gt;Abhishek Nalwaya&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://profiles.google.com/akshatpaul&#34;&gt;Akshat Paul&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/111066376566187161786/&#34;&gt;Aman Gupta&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/115825001471738837822/&#34;&gt;Amr Tamimi&lt;/a&gt;, Palestine
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/113033351044606475016/&#34;&gt;Andy Hunt&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/110770173484142874973/&#34;&gt;Alan Skorkin&lt;/a&gt;, Australia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/100698161235046113452/&#34;&gt;Aleksey Gureiev&lt;/a&gt;, Ukraine
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104050277687024235417/&#34;&gt;Allen Wei&lt;/a&gt;, China
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/110479317892816342574/&#34;&gt;Agustin Vinao&lt;/a&gt;, Argentina
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104757475552569715504/&#34;&gt;Avdi Grimm&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/118367341343645724682/&#34;&gt;Ben Scofield&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105758962966211996971&#34;&gt;Blake Mizerany&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105980335768716605600/&#34;&gt;Borey Lim&lt;/a&gt;, Cambodia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/111316112772515684571/&#34;&gt;Brian Hogan&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/100079930151075734677/&#34;&gt;Bruce Williams&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/110487088671321837494/&#34;&gt;Dan Mayer&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110308012753237149122/&#34;&gt;Dave Thomas&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/107697280864922633571/&#34;&gt;David Bock&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://profiles.google.com/dhruvasagar&#34;&gt;Dhruva Sagar&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106772870754515508879/&#34;&gt;Dimas Cyriaco&lt;/a&gt;, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/116807208912177719748/&#34;&gt;Dmytrii Nagirniak&lt;/a&gt;, Australia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105360278337596630880/&#34;&gt;Dr Nic Williams&lt;/a&gt;, Australia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/116534609714089460447/&#34;&gt;Eliza Brock&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/103252859252010623168/&#34;&gt;Erik Andrejko&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105352401804019307748/&#34;&gt;Evan Light&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/118300515725944988548/&#34;&gt;Fabio Akita&lt;/a&gt;, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/115917976281281359106/&#34;&gt;Gautam Rege&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/116840987351098949146/&#34;&gt;Govind Naroji&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/109243559017966529429/&#34;&gt;Gregg Pollack&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105796763399766963515/&#34;&gt;Hampton Catlin&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/113914940623275837320/&#34;&gt;Haifeng Cao&lt;/a&gt;, Canada
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://profiles.google.com/hasham2&#34;&gt;Hasham Malik&lt;/a&gt;, Pakistan
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/113183117071087473510/&#34;&gt;Hayri Cicek&lt;/a&gt;, Sweden
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/102413220039537966680/&#34;&gt;Ian Dees&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110539688704906393019/&#34;&gt;Jackielene Camomot&lt;/a&gt;, Singapore
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/100287220138756628137/&#34;&gt;James Thompson&lt;/a&gt;, South Africa
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104425900681649382355/&#34;&gt;Jason Ong&lt;/a&gt;, Singapore
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/118072436236916691530/&#34;&gt;Javier Cicchelli&lt;/a&gt;, Netherlands
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/103635693588232781692/&#34;&gt;jeljer te Wies&lt;/a&gt;, Netherlands
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/116610068566278723979/&#34;&gt;Jeweller Tsai&lt;/a&gt;, China
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110460163480277199414/&#34;&gt;Jim Weirich&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106379557566067969972/&#34;&gt;Joe Fiorini&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://profiles.google.com/jdcrisostomo&#34;&gt;John Crisostomo&lt;/a&gt;, Philippines
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106292395164331565735/&#34;&gt;John Ford&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/102317575925880340917/&#34;&gt;John Nunemaker&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/109751223708080113493/&#34;&gt;Jose Valim&lt;/a&gt;, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/108173693719801278064/&#34;&gt;Joseph Ku&lt;/a&gt;, Taiwan
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/115988868303334032459/&#34;&gt;Karmen Blake&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/113681351545224546005/&#34;&gt;Krzysztof B. Wicher&lt;/a&gt;, Poland
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/115808229722008532502/&#34;&gt;Lance Vaughn&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106019319306171347874/&#34;&gt;Les Hill&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105804969015666481511/&#34;&gt;Marlon Andrade&lt;/a&gt;, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/101114877505962271216/&#34;&gt;Matt Aimonetti&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/110846278457256366685/&#34;&gt;Max G.&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/100660544095714416357/&#34;&gt;Michael Bleigh&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/101046237539584353961/&#34;&gt;Michael Kohl&lt;/a&gt;, Austria
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/113848551541749836464/&#34;&gt;Michael Raidel&lt;/a&gt;, Austria
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104847315595160783022/&#34;&gt;Milan Dobrota&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/108838450592153452847/&#34;&gt;Mike Hatfield&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/116435142221450741002/&#34;&gt;Miles Forrest&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/107863321925532230456/&#34;&gt;Naum Trifanoff&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/114778382851799581398/&#34;&gt;Neil Smith&lt;/a&gt;, UK
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/101325875707009715338/&#34;&gt;Nick Plante&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/102876020754850448034/&#34;&gt;Nithin Bekal&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/110785633128718603885/&#34;&gt;Niyazi Ates&lt;/a&gt;, Turkey
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/105872753784981779186/&#34;&gt;Noel Rappin&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/114074881908559776602/&#34;&gt;Obie Fernandez&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/107641712682980723555/&#34;&gt;Oto Brglez&lt;/a&gt;, Slovenia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110194210730584019935/&#34;&gt;Paolo Perrotta&lt;/a&gt;, Italy
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104593473419876783839/&#34;&gt;Paul Barry&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/108611183113592675783/&#34;&gt;Phillip Gawlowski&lt;/a&gt;, Germany
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106237749300100697648/&#34;&gt;Piotr Solnica&lt;/a&gt;, Poland
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://profiles.google.com/rajeevsharma86/&#34;&gt;Rajeev Kannav Sharma&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/101416170084233498931/&#34;&gt;Ratnadeep Deshmane&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/102430791616108275923/&#34;&gt;Ray Rogers&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/102541178931067955550/&#34;&gt;Rick DeNatale&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110832836392911946970/&#34;&gt;Rida Al Barazi&lt;/a&gt;, Canada
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/105873031723912044493/&#34;&gt;Remi Vigan&lt;/a&gt;, France
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/111120648832264994700/&#34;&gt;Ryan Bates&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/109275598957470298466/&#34;&gt;Ryan Bigg&lt;/a&gt;, Australia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/116442345306213583461/&#34;&gt;Saager Mhatre&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/110098011164271096597/&#34;&gt;Santiago Pastorino&lt;/a&gt;, Uruguay
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/101917665442915766859/&#34;&gt;Saroj Maharjan&lt;/a&gt;, Nepal
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/105136417144363639670/&#34;&gt;Samnang Chhun&lt;/a&gt;, Cambodia
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106773510080628336104/&#34;&gt;Seyhun Akyurek&lt;/a&gt;, Turkey
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://profiles.google.com/satish.talim&#34;&gt;Satish Talim&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/114610362086938873953/&#34;&gt;Sau Sheong Chang&lt;/a&gt;, Singapore
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/100022825626273154038/&#34;&gt;Steven Haddox&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/103333530166033012324/&#34;&gt;Swanand Pagnis&lt;/a&gt;, India
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/107609355855799969529/&#34;&gt;Umit Kayac?k&lt;/a&gt;, Turkey
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/116568773932133159290/&#34;&gt;Victor Goff&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/106300407679257154689/&#34;&gt;Yehuda Katz&lt;/a&gt;, USA
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/104511308184997405918/&#34;&gt;Yukihiro Matsumoto&lt;/a&gt;, Japan
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://plus.google.com/u/0/116179390821577518903/&#34;&gt;Zaur Amikishiyev&lt;/a&gt;, Azerbaijan
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;Have we missed out any Rubyists?&lt;br /&gt;You can help&lt;/strong&gt;. Please feel free to add a link to a Rubyist&amp;#8217;s Google+ profile. We would love to hear why you think the particular Rubyist is important to Google+. Also, do add a link to your Google+ profile in the comments.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RubyLearning Associates and Participants on Twitter and Facebook</title>
      <link>http://rubylearning.com/2010/07/09/rubylearning-associates-and-participants-on-twitter-and-facebook/</link>
      <pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/07/09/rubylearning-associates-and-participants-on-twitter-and-facebook/</guid>
      <description>

&lt;h2 id=&#34;rubylearning-associates-and-participants-on-twitter-and-facebook:c8429096bb847ee20e9d305b4b011f86&#34;&gt;RubyLearning Associates and Participants on Twitter and Facebook&lt;/h2&gt;

&lt;p&gt;RubyLearning is associated with some amazing, talented people these last
5 years. I am compiling a list (in alphabetical order) showcasing them;
people who have either undergone some of the courses at RubyLearning or
have been instrumental in taking RubyLearning to the next level.&lt;/p&gt;

&lt;h3 id=&#34;argentina:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Argentina&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Gustavo A. Courault on &lt;a href=&#34;http://twitter.com/Courault&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/gcourault&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;australia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Australia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dr Nic Williams on &lt;a href=&#34;http://twitter.com/drnic&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Rhys Powell on &lt;a href=&#34;http://twitter.com/FrogBawt&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;austria:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Austria&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Michael Kohl on &lt;a href=&#34;http://twitter.com/citizen428&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;https://plus.google.com/u/0/101046237539584353961/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;bangladesh:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Bangladesh&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Samiron Paul on &lt;a href=&#34;http://twitter.com/samironpaul&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;brazil:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Brazil&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Andre Lima Silva on &lt;a href=&#34;http://twitter.com/vixlima&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/vixlima&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;https://github.com/vixlima&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cassiano Faria on &lt;a href=&#34;http://twitter.com/cassianofaria&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/cassianofaria&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Christopher Moura on &lt;a href=&#34;http://twitter.com/christopher78&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/christopher.moura&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Daniel Freire on &lt;a href=&#34;http://twitter.com/danfoxz&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Daniel Kühl Lima on &lt;a href=&#34;http://twitter.com/dklima&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://pt-br.facebook.com/people/Daniel-Kuhl-Lima/1051337048&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Diógenes Fernandes on &lt;a href=&#34;http://twitter.com/diofeher&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/people/Diogenes-Herminio/100000328087335&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Elomar Franca on &lt;a href=&#34;http://twitter.com/elomar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/elomar.f&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Eric Fer on &lt;a href=&#34;http://twitter.com/ericfer&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/ericferz&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Felipe Elias Philipp on &lt;a href=&#34;http://twitter.com/felipeelias&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Felipe Sewaybricker Lombardi on
&lt;a href=&#34;http://twitter.com/felipe_kiros&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Fabio Akita on &lt;a href=&#34;http://twitter.com/akitaonrails&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/akitaonrails&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Herminio Torres on &lt;a href=&#34;http://twitter.com/herminiotorres&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/herminiocesar&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jefferson Jean Martins Girão on
&lt;a href=&#34;http://twitter.com/jeffersongirao&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://pt-br.facebook.com/people/Jefferson-Jean-Martins-Girao/100000634363833&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Joao Vitor Lacerda Guimaraes on
&lt;a href=&#34;http://twitter.com/joaovitor&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/joaovitor&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kleber Virgilio Correia on
&lt;a href=&#34;http://twitter.com/klebervirgilio&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Lucas Allan Cardoso on &lt;a href=&#34;http://twitter.com/lucasallan&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Marcio Giaxa Marinheiro on &lt;a href=&#34;http://twitter.com/marciogm&#34;&gt;Twitter&lt;/a&gt;
and &lt;a href=&#34;http://www.facebook.com/marciogiaxa&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Marcos Ricardo on &lt;a href=&#34;http://twitter.com/marcric&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/profile.php?id=100000351446343&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mariana M. Ribeiro on &lt;a href=&#34;http://twitter.com/MARIRIB1&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Michel Brito on &lt;a href=&#34;Michel%20Brito&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/michelbrito&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nícolas Faccin Iensen on &lt;a href=&#34;http://twitter.com/nicolasiensen&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Rafael Caetano Pinto on &lt;a href=&#34;http://twitter.com/barenko&#34;&gt;Twitter&lt;/a&gt;,
Facebook and &lt;a href=&#34;https://github.com/barenko&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Raphael Ivan on &lt;a href=&#34;http://twitter.com/raphaelivan&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;https://github.com/raphaelivan&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodolfo Luiz on &lt;a href=&#34;http://twitter.com/rodolfols&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rodolfols&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodrigo Flores on &lt;a href=&#34;http://twitter.com/rlmflores&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rodrigolmflores&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodrigo Machad on &lt;a href=&#34;http://twitter.com/rcmachado&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://facebook.com/rcmachado&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;http://github.com/rcmachado&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rudak Duarte Mendonça on &lt;a href=&#34;http://twitter.com/rudak&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Saulo Arruda on &lt;a href=&#34;http://twitter.com/sauloarruda&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/sauloarruda&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sergio Lima on &lt;a href=&#34;http://twitter.com/sergiosouzalima&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/sergiosouzalima&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Willian Molinari on &lt;a href=&#34;http://twitter.com/WillianMolinari&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cambodia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Cambodia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Samnang Chhun on &lt;a href=&#34;http://twitter.com/samnangchhun&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://github.com/samnang&#34;&gt;Facebook&lt;/a&gt;,
&lt;a href=&#34;https://github.com/samnang&#34;&gt;GitHUb&lt;/a&gt; and
&lt;a href=&#34;https://plus.google.com/u/0/105136417144363639670/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prum Sambath on &lt;a href=&#34;http://twitter.com/Sambath&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;canada:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Canada&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alvaro Tejada Galindo on &lt;a href=&#34;http://twitter.com/Blag&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Antonio Cangiano on &lt;a href=&#34;http://twitter.com/acangiano&#34;&gt;Twitter&lt;/a&gt;,
Facebook and
&lt;a href=&#34;https://plus.google.com/104323476891214773710/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dennis Misener on &lt;a href=&#34;http://twitter.com/DMisener&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dennis Theisen on &lt;a href=&#34;http://twitter.com/soleone&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/dennistheisen&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeff Savin on &lt;a href=&#34;http://twitter.com/JeffSavin&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jeff.l.savin&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Matthew Boehlig on &lt;a href=&#34;http://twitter.com/thetamind&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Paul Carvalho on &lt;a href=&#34;http://twitter.com/can_test&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;china:c8429096bb847ee20e9d305b4b011f86&#34;&gt;China&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;David Ruan on &lt;a href=&#34;http://twitter.com/ruanwz&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;denmark:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Denmark&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Roy Simon on &lt;a href=&#34;http://twitter.com/roydealsimon&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ecuador:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Ecuador&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Marcelo Bonilla on Twitter and
&lt;a href=&#34;http://www.facebook.com/chelobonilla&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;egypt:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Egypt&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Ahmad Al-Ajmi on &lt;a href=&#34;http://twitter.com/cssah&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/cssah&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;estonia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Estonia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jevgeni Holodkov on Twitter and
&lt;a href=&#34;http://www.facebook.com/jevgeni.holodkov&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;finland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Finland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abel B. Terefe on &lt;a href=&#34;http://twitter.com/abel_ter&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;france:c8429096bb847ee20e9d305b4b011f86&#34;&gt;France&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Michèle Garoche on &lt;a href=&#34;http://twitter.com/migatine&#34;&gt;Twitter&lt;/a&gt;, Facebook,
&lt;a href=&#34;http://github.com/migane&#34;&gt;GitHub&lt;/a&gt; and
&lt;a href=&#34;http://gplus.to/migatine&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thibaut Barrère on &lt;a href=&#34;http://twitter.com/thibaut_barrere&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;germany:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Germany&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dennis Theisen on &lt;a href=&#34;http://twitter.com/soleone&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://facebook.com/dennistheisen&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;http://github.com/Soleone&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;greece:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Greece&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;John Deliyiannis on &lt;a href=&#34;http://twitter.com/johndel&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/istoselidas&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;india:c8429096bb847ee20e9d305b4b011f86&#34;&gt;India&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abhinav Saxena on &lt;a href=&#34;http://twitter.com/abhinav&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/abhinavs&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Abhinav Upadhyay on &lt;a href=&#34;http://twitter.com/iamabhi9&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/abhinav.jacksparrow&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Akshat Paul on &lt;a href=&#34;http://twitter.com/paulakshat&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ambanna Yatnal on &lt;a href=&#34;http://twitter.com/ambanna&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/Ambanna&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Amol Londhe on Twitter and
&lt;a href=&#34;http://www.facebook.com/profile.php?id=100001645362511&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Anil Wadghule on &lt;a href=&#34;http://twitter.com/anildigital&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ankita Mathur on &lt;a href=&#34;http://twitter.com/anksangel&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://en-gb.facebook.com/people/Ankita-Mathur/1634648937&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Baishampayan Ghose on &lt;a href=&#34;http://twitter.com/ghoseb&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Balaji Alagusundaram on &lt;a href=&#34;http://twitter.com/aviniyan&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Bhushan G Ahire on &lt;a href=&#34;http://twitter.com/bhushangahire&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/bhushangahire&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dhanesh Purohit on &lt;a href=&#34;http://twitter.com/dhaneshpurohit&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/dhanesh.purohit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dhruva Sagar on &lt;a href=&#34;http://twitter.com/dhruvasagar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/people/Dhruva-Sagar/100001257499345&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gautam Rege on &lt;a href=&#34;http://twitter.com/gautamrege&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/gautam.rege&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gokula Murthy on &lt;a href=&#34;http://twitter.com/gokulamurthy&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/gokulamurthy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jigar Gosar on &lt;a href=&#34;http://twitter.com/jigargosar&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ketan Doshi on &lt;a href=&#34;http://twitter.com/ketandoshi&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/ketandoshi81&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Manik Juneja on &lt;a href=&#34;http://twitter.com/mjuneja&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Manimaran Malaichamy on &lt;a href=&#34;http://twitter.com/manimaranm&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/people/Manimaran-Malaichamy/100000858117720&#34;&gt;Facebook&lt;/a&gt;,
&lt;a href=&#34;http://github.com/maniempire&#34;&gt;GitHub&lt;/a&gt; and
&lt;a href=&#34;http://gplus.to/manimaran&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manoj Mathai on &lt;a href=&#34;http://twitter.com/letronje&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Mohammed Aslam on &lt;a href=&#34;http://twitter.com/tweeslam&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/mohammed.aslam&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nithin Bekal on &lt;a href=&#34;http://twitter.com/nithinbekal&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/nithinbekal&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Piyush Gupta on &lt;a href=&#34;https://twitter.com/mba_piyush&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/mba.piyushgupta&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prakash Sejwani on &lt;a href=&#34;http://twitter.com/peter_sejwani&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Rajarshi Das on Twitter and
&lt;a href=&#34;http://www.facebook.com/rajarshi2576&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rajeev Sharma on Twitter and
&lt;a href=&#34;http://www.facebook.com/rajeevkannav&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ramakrishnan Muthukrishnan on &lt;a href=&#34;http://twitter.com/vu3rdd&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Ravikumar N on &lt;a href=&#34;http://twitter.com/HappyRavi&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Rohan R Arora on &lt;a href=&#34;http://twitter.com/rohan071290&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Rohit Arondekar on &lt;a href=&#34;http://twitter.com/rohitarondekar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rohit.arondekar&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rohit Pal on &lt;a href=&#34;http://twitter.com/rohitpal&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/palrohit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;S K Prasad on &lt;a href=&#34;http://twitter.com/skprasad&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://facebook.com/skprasad&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sandip Ransing on &lt;a href=&#34;http://twitter.com/sandipransing&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://github.com/sandipransing&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Santosh Gokak on &lt;a href=&#34;http://twitter.com/santoshgokak&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Satish Talim on &lt;a href=&#34;http://twitter.com/IndianGuru&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/satishtalim&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;https://plus.google.com/107809992818057105754/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Saurabh Bhatia on &lt;a href=&#34;http://twitter.com/safew&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/saurabh.a.bhatia&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Saurabh Purnaye on &lt;a href=&#34;http://twitter.com/saurabhp/&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Shyammohan Kanojia on &lt;a href=&#34;http://twitter.com/_shyam&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/Shyammohankanojia&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sheetal Prasad Goyal on &lt;a href=&#34;http://twitter.com/spgoyalmnit&#34;&gt;Twitter&lt;/a&gt;
and &lt;a href=&#34;http://www.facebook.com/spgoyalmnit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Siva Gollapalli on &lt;a href=&#34;http://twitter.com/sivagollapalli&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;SoftMind Technology on &lt;a href=&#34;http://twitter.com/SoftMind&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Sreelakshmi Sridharan on Twitter and
&lt;a href=&#34;http://www.facebook.com/sree.lakshmi1&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Suman Mukherjee on &lt;a href=&#34;http://twitter.com/mukherjeesuman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Surya Raj Tripathi on &lt;a href=&#34;http://twitter.com/surya_raj&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/tripathi.surya&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vamsi Krishna on &lt;a href=&#34;https://twitter.com/VAMccrishna&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Vinay Seshadri on &lt;a href=&#34;http://twitter.com/ytvinay&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;japan:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Japan&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Kenneth Burling on &lt;a href=&#34;http://twitter.com/burlingk&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Satoshi Asakawa on &lt;a href=&#34;http://twitter.com/ashbb&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;malaysia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Malaysia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Yuvan Kumar Danabalan on &lt;a href=&#34;http://twitter.com/yuvankumar&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;macedonia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Macedonia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dalibor Nasevic on &lt;a href=&#34;http://twitter.com/blackflasher&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mexico:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Mexico&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alonso Delgado on &lt;a href=&#34;http://twitter.com/adam_9_dz&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Emmanuel Delgado on &lt;a href=&#34;http://twitter.com/chischaschos&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/chischaschos&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hector Sansores on &lt;a href=&#34;http://twitter.com/hectorsq&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jose Castaneyra on &lt;a href=&#34;http://twitter.com/jcastaneyra&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jcastaneyra&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;netherlands:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Netherlands&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Julio Javier Cicchelli on
&lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;pakistan:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Pakistan&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Ahmed Mubbashir Khan on &lt;a href=&#34;http://twitter.com/mubbashir&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Hasham Malik on &lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/hasham2&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;peru:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Peru&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alvaro Pereyra on &lt;a href=&#34;http://twitter.com/yaraher&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;José Corcuera Z. on &lt;a href=&#34;http://twitter.com/jcorcuera&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jzcorcuera&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;philippines:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Philippines&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dennis Carique on Twitter and
&lt;a href=&#34;http://www.facebook.com/dcarique&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;poland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Poland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Daniel Kotowski on &lt;a href=&#34;http://twitter.com/kotosha&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/kotosha&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Grzegorz Smajdor on &lt;a href=&#34;http://twitter.com/sfistak&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;http://github.com/gs&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Michal Kuklis on &lt;a href=&#34;http://twitter.com/mkuklis&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;portugal:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Portugal&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jorge Mendes on &lt;a href=&#34;http://twitter.com/jorgemendes&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jorge.mendes75&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;romania:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Romania&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cristi Ispas on &lt;a href=&#34;http://twitter.com/cispas2000&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;serbia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Serbia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Milan Dobrota on &lt;a href=&#34;http://twitter.com/milandobrota&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;singapore:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Singapore&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Sau Sheong on &lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;Twitter&lt;/a&gt;, Facebook and
&lt;a href=&#34;https://plus.google.com/u/0/114610362086938873953/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;slovenia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Slovenia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jure Srsen on &lt;a href=&#34;http://twitter.com/Hoornet&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/hoornet&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;spain:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Spain&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Javier Neira on &lt;a href=&#34;http://twitter.com/jneira&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Juanjo Bazan on &lt;a href=&#34;http://twitter.com/xuanxu&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Lorenzo Planas on &lt;a href=&#34;http://twitter.com/lorenzoplanas&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;switzerland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Switzerland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Vincent Jacquel on &lt;a href=&#34;http://twitter.com/minikermit&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;thailand:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Thailand&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Twin Panichsombat on &lt;a href=&#34;http://twitter.com/roofimon&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/roofimon&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;turkey:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Turkey&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Burc Yildirim on &lt;a href=&#34;http://twitter.com/phrewww&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/burc.yildirim&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Niyazi Ates on &lt;a href=&#34;http://twitter.com/hazal1&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://tr-tr.facebook.com/people/Niyazi-Ates/615514520&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;uk:c8429096bb847ee20e9d305b4b011f86&#34;&gt;UK&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bruce Scharlau on &lt;a href=&#34;http://twitter.com/scharlau&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jamie van Dyke on &lt;a href=&#34;http://twitter.com/fearoffish&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Maris Orbidans on &lt;a href=&#34;http://twitter.com/Marutks&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Peter Cooper on &lt;a href=&#34;http://twitter.com/peterc&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Richard Taylor on &lt;a href=&#34;http://twitter.com/moomerman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Sam Aaron on &lt;a href=&#34;http://twitter.com/samaaron&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Sami Bashraheel on &lt;a href=&#34;http://twitter.com/#!/samib_&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ukraine:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Ukraine&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Vladyslav Sumskyi on &lt;a href=&#34;http://twitter.com/sumskyi&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://tr-tr.facebook.com/people/Niyazi-Ates/615514520&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;uruguay:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Uruguay&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bernhard Üllenberg on &lt;a href=&#34;http://twitter.com/Fotoretusche&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/bernhard.uellenberg&#34;&gt;http://www.facebook.com/#!/bernhard.uellenberg&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;usa:c8429096bb847ee20e9d305b4b011f86&#34;&gt;USA&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Aaron Quint on &lt;a href=&#34;http://twitter.com/aq&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Al Snow on &lt;a href=&#34;http://twitter.com/jasnow&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/al.snow&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Amit Rathore on &lt;a href=&#34;http://twitter.com/amitrathore&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ashish Dixit on &lt;a href=&#34;http://twitter.com/tundal45&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Braxton Gregory Smith on &lt;a href=&#34;http://twitter.com/braxtongsmith&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Bruce Williams on &lt;a href=&#34;http://twitter.com/wbruce&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Charles Nutter on &lt;a href=&#34;http://twitter.com/headius&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Chris Strom on &lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Dan Wanek on &lt;a href=&#34;http://twitter.com/zentourist&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Daniel Solano Gómez on &lt;a href=&#34;http://twitter.com/deepbluelambda&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Darren Shafae on &lt;a href=&#34;http://twitter.com/Papercheck&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dave Thomas on &lt;a href=&#34;http://twitter.com/pragdave&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;David A Black on &lt;a href=&#34;http://twitter.com/david_a_black&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;David Loeffler on &lt;a href=&#34;http://twitter.com/#!/loeffler&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Doug Sparling on &lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dustin Shafae on &lt;a href=&#34;http://twitter.com/#!/DustinShafae&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Eric Lavigne on &lt;a href=&#34;http://twitter.com/ericlavigne&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Fletcher Fowler on &lt;a href=&#34;http://twitter.com/fzf&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;George Thompson on &lt;a href=&#34;http://twitter.com/millionmonkey&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Greg Newman on &lt;a href=&#34;http://twitter.com/gregnewman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ian Dees on &lt;a href=&#34;http://twitter.com/undees&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;James Edward Gray II on &lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jerry Anning on &lt;a href=&#34;http://twitter.com/anatman&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;John Trupiano on &lt;a href=&#34;http://twitter.com/jtrupiano&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Juan Gomez on &lt;a href=&#34;http://twitter.com/#!/_juandg&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/juandg&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lea Caldwell on Twitter and
&lt;a href=&#34;http://www.facebook.com/Sienta414&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mark Fayngersh on &lt;a href=&#34;http://twitter.com/gmaster1440&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Mark Champine on &lt;a href=&#34;http://twitter.com/mchampine&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/mchampine&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mark Nyon on &lt;a href=&#34;http://twitter.com/scorintha&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Mark Volkmann on &lt;a href=&#34;http://twitter.com/mark_volkmann&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Michael Fogus on &lt;a href=&#34;http://twitter.com/fogus&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Narayan Iyer on &lt;a href=&#34;http://twitter.com/iyerland&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Naum Trifanoff on &lt;a href=&#34;http://twitter.com/naum&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Nick Hird on &lt;a href=&#34;http://twitter.com/boondox&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Noel Rappin on &lt;a href=&#34;http://twitter.com/noelrap&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Prakash N Murthy on &lt;a href=&#34;http://twitter.com/#!/_prakash&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/prakash.murthy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Raghava Nellaturu on &lt;a href=&#34;http://twitter.com/rnella01&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Raj Kandati on &lt;a href=&#34;http://twitter.com/raj421&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Ricardo J Sanchez on &lt;a href=&#34;http://twitter.com/ricardojsanchez&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Ryan Bates on &lt;a href=&#34;http://twitter.com/rbates&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Solomon White on &lt;a href=&#34;http://twitter.com/rubysolo&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Spencer Poplin on &lt;a href=&#34;http://twitter.com/slpoplin&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Spencer Roach on &lt;a href=&#34;http://twitter.com/spncrgr&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/spncrgr&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Steve Kim on &lt;a href=&#34;http://twitter.com/skim&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Stuart Halloway on &lt;a href=&#34;http://twitter.com/stuarthalloway&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Thomas Thornton on &lt;a href=&#34;http://twitter.com/tltjr&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Tom Marrs on &lt;a href=&#34;http://twitter.com/TomMarrs&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/thomasamarrs&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tom Mulcahy on Twitter and
&lt;a href=&#34;http://www.facebook.com/tom.mulcahy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Victor Goff III on &lt;a href=&#34;http://twitter.com/kotp&#34;&gt;Twitter&lt;/a&gt;, Facebook and
&lt;a href=&#34;http://gplus.to/vhgiii&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Winston Lawrence on &lt;a href=&#34;http://twitter.com/winstonlawrence&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;vietnam:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Vietnam&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bui Dinh Ngoc on Twitter and
&lt;a href=&#34;http://www.facebook.com/bdngoc&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tinh T. Dinh on Twitter, Facebook and
&lt;a href=&#34;https://plus.google.com/u/0/104618807642305066883/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;update:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;I’ll be updating this page from time to time. If you have been
associated with RubyLearning in some way or the other and would like
your information (Full name, Country of Residence, Twitter Id and / or
Facebook Profile URL and / or GitHub URL) displayed here, please post
the information here as a comment or email me at satish [dot] talim [at]
gmail.com.&lt;/p&gt;

&lt;p&gt;Thank you for your time and help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Happynerds - Programming Links for Kids</title>
      <link>http://rubylearning.com/2009/12/21/happynerds---programming-links-for-kids/</link>
      <pubDate>Mon, 21 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2009/12/21/happynerds---programming-links-for-kids/</guid>
      <description>&lt;p&gt;&lt;strong&gt;A guest post by &lt;a href=&#34;http://citizen428.net&#34;&gt;Michael Kohl&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/michael_kohl.jpg&#34; alt=&#34;Michael Kohl&#34; title=&#34;Michael Kohl&#34; /&gt;

For quite some time I was planning to create an online resource of
programming tools for kids, because I think developing software is a
beautiful and rewarding experience which is a perfect fit for children’s
natural curiosity. Alas time is always short, so up until recently all I
did was to collect links on &lt;a href=&#34;http://delicious.com&#34;&gt;delicious&lt;/a&gt; and wait.&lt;/p&gt;

&lt;p&gt;Then two weeks ago I went through my personal todo list and realized
that this idea has been sitting around for way too long, so I decided to
finally do something about it. Thanks to the wonderful tools the Ruby
community provides us with, all it took was this initial spark of
motivation and an afternoon of free time to finally create &lt;strong&gt;&lt;a href=&#34;http://www.happynerds.net&#34;&gt;Happy
Nerds&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Happy Nerds is a very small and simple site, so it seemed like a perfect
match for the wonderfully elegant
&lt;strong&gt;&lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;&lt;/strong&gt; DSL for web applications. I’m
constantly amazed by how productive and &lt;em&gt;fun&lt;/em&gt; development with Sinatra
can be, especially when used together with the right tools like
&lt;strong&gt;&lt;a href=&#34;http://github.com/rtomayko/shotgun&#34;&gt;Shotgun&lt;/a&gt;&lt;/strong&gt; and
&lt;strong&gt;&lt;a href=&#34;http://haml-lang.com/&#34;&gt;Haml&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before starting to code I obviously also had to decide where to host the
site once it’s finally done, and &lt;strong&gt;&lt;a href=&#34;http://heroku.com/&#34;&gt;Heroku&lt;/a&gt;&lt;/strong&gt; just
seemed like the most natural choice, due to its excellent support for
everything related to Ruby web frameworks (Need gems? &lt;a href=&#34;http://docs.heroku.com/gems&#34;&gt;No
problem!&lt;/a&gt;), a very streamlined
&lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;-based workflow and excellent command line
tools. I also wrote a patch to add the –heroku option to
&lt;a href=&#34;http://github.com/quirkey/sinatra-gen&#34;&gt;sinatra-gen&lt;/a&gt; a while back, so I
was literally up and running within seconds.&lt;/p&gt;

&lt;p&gt;Now all that was left to decide was the data store.
&lt;strong&gt;&lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; had been on my radar for a long
time and I got myself an invite to &lt;a href=&#34;http://www.mongohq.com/&#34;&gt;MongoHQ&lt;/a&gt;‘s
beta program some weeks back, so this seemed like a good opportunity to
finally give both of them a try. As it turned out, they are as fun to
work with all the other projects mentioned so far!&lt;/p&gt;

&lt;p&gt;Once I decided which exact tools to use, creating the actual application
was almost too easy. I started by writing a small Ruby script which
fetched the appropriately tagged bookmarks from delicious (where I
stored name, URL and description) and fed them into MongoDB. After that
all it took was a couple of very simple Sinatra “controllers” and the
actual views, which thanks to Haml also were breeze to create.&lt;/p&gt;

&lt;p&gt;So even as somebody who usually doesn’t do web application development,
I had a first functioning version within an afternoon and a finished
site within two. Granted, &lt;a href=&#34;http://www.happynerds.net&#34;&gt;Happy Nerds&lt;/a&gt; is
very simple at the moment, but I just wanted to finally get the idea out
into the open. I do have a couple of ideas for the future though and
thanks to the used technologies I feel confident that implementing them
will be easy and fun once I get around to do it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cookie-based Sessions in Sinatra</title>
      <link>http://rubylearning.com/2009/09/30/cookie-based-sessions-in-sinatra/</link>
      <pubDate>Wed, 30 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2009/09/30/cookie-based-sessions-in-sinatra/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://www.rubylearning.com/images/jjcicchelli.jpg&#34; alt=&#34;Julio Javier
Cicchelli&#34; title=&#34;Julio Javier Cicchelli&#34; /&gt;

This is a guest post from &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/07/20/julio-javier-cicchelli-how-do-i-learn-and-master-sinatra/&#34;&gt;Julio Javier
Cicchelli&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cookie-based-sessions-in-sinatra:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;Cookie-based Sessions in Sinatra&lt;/h2&gt;

&lt;p&gt;Hi there everybody! My name is &lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Javier
Cicchelli&lt;/a&gt; and I am the Software
Engineer of the technological pride and joy of the Red Light District in
Amsterdam, the Netherlands: &lt;a href=&#34;http://rock-n-code.com&#34;&gt;Rock &amp;amp; Code&lt;/a&gt;. I
have been vested with the distinct authority to shed some light on the
concept of &lt;em&gt;Cookie&lt;/em&gt;. The purpose of this article is to teach you how to
concoct the explosive digital mixture that would enable you to use
cookies for sessions within your &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;
applications. Piece of cake, right? Before I move to the nitty-gritty of
cookies in Sinatra, I want to cover the mandatory theoretical basics.
So, I invite you to sit back and enjoy this slow and easy software ride.
By the end of that piece, you will be asking for cookies at the nearest
bakery!&lt;/p&gt;

&lt;h2 id=&#34;what-are-cookies:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;What are Cookies?&lt;/h2&gt;

&lt;p&gt;According to the Computer Science definition, a &lt;em&gt;cookie&lt;/em&gt;, which is also
known as an &lt;em&gt;HTTP cookie&lt;/em&gt;, a &lt;em&gt;tracking cookie&lt;/em&gt;, or a &lt;em&gt;browser cookie&lt;/em&gt;,
is a piece of text, no bigger than 4 kilobytes, which is stored on the
user&amp;rsquo;s computer by a web server via a web browser. It is a key-value
pair structure, which is designed to retain specific information such as
user preferences, user authentication, shopping carts, demographics,
sessions, or any other data used by a website. This mechanism, which was
developed by &lt;a href=&#34;http://netscape.aol.com/&#34;&gt;Netscape&lt;/a&gt; in the distant 1994,
provides a way to receive information from a web server and to send it
back from the web browser absolutely unchanged. This system complements
the stateless nature of the HTTP protocol as it provides enough memory
to store pieces of information during HTTP transactions.&lt;/p&gt;

&lt;p&gt;When you try to access a web site, your web browser connects to a web
server and it sends a request for the respective page. Then the web
server replies by sending the requested content and it simultaneously
stores a new cookie on your computer. Every time the web browser
requests web pages from the web server, it always sends the respective
cookies back to the web server. The process takes place as described, if
the web browser supports cookies and the user allows their usage. Only
the web server can modify one or more of the cookie values. Then it
sends them to the web browser upon replying to a specific request.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;http://rfc.dotsrc.org/rfc/rfc2965.html&#34;&gt;RFC2965
specification&lt;/a&gt;, cookies are case
insensitive. A set of defined properties is inherent to the cookie
structure. Those properties include an expiration date, a path and a
domain. The first attribute requires a date defined in &lt;em&gt;Wdy, DD-Mon-YYYY
HH:MM:SS GMT&lt;/em&gt; format. The rest of the cookie characteristics require a
path and/or a domain defined as a string. Let&amp;rsquo;s take a look at this
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cookie: key0=value0; ...; keyX=valueX; expires=Wed, 23-Sep-2009 23:59:59 GMT; path=/; domain=.yoursite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the expiration date is defined, your cookie will be &amp;ldquo;persistent&amp;rdquo; as
it will reoccur in different sessions until the set expiration date has
been reached. If the expiration date has not been defined in the cookie,
it will occur until the end of your current session or when you close
your web browser. If the path and/or the domain attributes have been
defined in your cookie, then the web server limits the scope of the
cookie to that specific domain, sub-domain or path.&lt;/p&gt;

&lt;h2 id=&#34;cookies-and-sinatra:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;Cookies and Sinatra&lt;/h2&gt;

&lt;p&gt;Having clarified the basics, we can proceed to the next level. Prepare
to learn how to implement cookie-based sessions in the Sinatra web
framework. You do not have to install any extra Ruby gem.&lt;/p&gt;

&lt;p&gt;Get ready to rumble! First and foremost, you have to decide on the
session strategy your Sinatra application will use in order to send to
the web browser only those relevant pieces of information that your
application requires. As I have already explained, this information
depends on the kind of application you want to develop and on the
functionalities you want to offer to your users. Then you have to enable
the cookie based session function in Sinatra. Finally, after enabling
the cookie-based support, you have to implement the designed session
strategy in your application. Regardless of how you want to develop your
application, you must always test your code in order to verify that it
works as expected and validate that it satisfies all the given
requirements. Throughout the remainder of this article, I will look at
the existing methods that provides Sinatra for using sessions based on
cookies.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Simple Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take it slow and easy. I will commence with a very simple example.
I will write a cookie version of the famous &amp;ldquo;Hello World&amp;rdquo; example. Here
I will use the cookie functions included in the Sinatra framework in
order to demonstrate how to use them. In the following example, I will
explain how to enable the session support in your Sinatra application
and I will show you how to create a key-value pair inside the session.
So, let&amp;rsquo;s rock &amp;amp; code!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;

enable :sessions

get &#39;/&#39; do
  session[&amp;quot;value&amp;quot;] ||= &amp;quot;Hello world!&amp;quot;
  &amp;quot;The cookie you&#39;ve created contains the value: #{session[&amp;quot;value&amp;quot;]}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-slightly-bigger-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Slightly Bigger Example&lt;/h2&gt;

&lt;p&gt;Now that you have a basic idea of how cookies work in Sinatra, you are
ready to move to the next level. I will write a more complex example,
which will consist of a tiny web application, which will ask the user to
identify. In this example, I will use the session support provided by
Sinatra in order to implement non-persistent cookies. Note that I am
using the technique I resorted to in the previous example. I simply
tuned it to the logic of this application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;
require &#39;haml&#39;

enable :sessions

get &#39;/&#39; do
  session[&amp;quot;user&amp;quot;] ||= nil
  haml :index
end

get &#39;/introduction&#39; do
  haml :introduction
end

post &#39;/introduction&#39; do
  session[&amp;quot;user&amp;quot;] = params[:name]
  redirect &#39;/&#39;
end

get &#39;/bye&#39; do
  session[&amp;quot;user&amp;quot;] = nil
  haml :bye
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-final-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Final Example&lt;/h2&gt;

&lt;p&gt;The last example will demonstrate how to directly manage cookies through
the &lt;em&gt;request&lt;/em&gt; and &lt;em&gt;response&lt;/em&gt; singletons provided by Sinatra. You will
see in the following example that the previously described process
involving the use cookies is clearly implemented. This technique is
recommended when your application requires to use persistent and/or
scoped cookies. In this example, the application uses two persistent
cookies, which expire at the same time, in order to store and manage
different configuration data. Unfortunately, due to a bug on the cookie
management that I still have to investigate, I cannot test how the
application responds to the scope of the different cookies it has
created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;
require &#39;haml&#39;

get &#39;/&#39; do
  @@expiration_date = Time.now + (60 * 2) \
  unless request.cookies.key?(&#39;some_options&#39;) &amp;amp;&amp;amp; request.cookies.key?(&#39;other_options&#39;)
  haml :index
end

get &#39;/some_options&#39; do
  @some_cookie = request.cookies[&amp;quot;some_options&amp;quot;]
  haml :some_options
end

post &#39;/some_options&#39; do  
  response.set_cookie(&#39;some_options&#39;, :value =&amp;gt; cookie_values(params), :expires =&amp;gt; @@expiration_date)
  redirect &#39;/&#39;
end

get &#39;/other_options&#39; do
  @other_cookie = request.cookies[&amp;quot;other_options&amp;quot;]
  haml :other_options
end

post &#39;/other_options&#39; do
  response.set_cookie(&#39;other_options&#39;, :value =&amp;gt; cookie_values(params),:expires =&amp;gt; @@expiration_date)
  redirect &#39;/&#39;
end

helpers do
  def cookie_values(parameters)
    values = {}
    parameters.each do |key, value|
      case key
      when &#39;options&#39;
        values[value] = true
      else
        values[key] = true
      end
    end
    values
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would like to stress that Sinatra does allow developers to use
directly &lt;a href=&#34;http://rack.rubyforge.org/&#34;&gt;Rack&lt;/a&gt; to manage cookie through the
&lt;em&gt;Rack::Session::Cookie&lt;/em&gt; middleware. Yet, I desisted from discussing this
method because of its complexity. Furthermore, I have not elaborated on
the existence of other alternatives to this storage mechanism. After
all, I have to leave some room for upcoming articles I can present you
with. Do not allow my deliberate slips to limit your curiosity! Be
inquisitive! You can see the source code on
&lt;a href=&#34;http://gist.github.com/205962&#34;&gt;Github&lt;/a&gt;, of all the relevant examples.
So go ahead and rock &amp;amp; code!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>