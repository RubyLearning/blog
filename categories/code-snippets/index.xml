<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Snippets on RubyLearning Blog</title>
    <link>http://localhost:1313/blog/categories/code-snippets/</link>
    <description>Recent content in Code Snippets on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Oct 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/categories/code-snippets/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RPCFN: Average Arrival Time For A Flight - 2 repost</title>
      <link>http://localhost:1313/blog/2009/10/08/rpcfn-average-arrival-time-for-a-flight---2-repost/</link>
      <pubDate>Thu, 08 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2009/10/08/rpcfn-average-arrival-time-for-a-flight---2-repost/</guid>
      <description>

&lt;h2 id=&#34;ruby-programming-challenge-for-newbies:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Ruby Programming Challenge For Newbies&lt;/h2&gt;

&lt;h3 id=&#34;rpcfn-average-arrival-time-for-a-flight-2:f21d0dccff3cef355e2212eafc89f107&#34;&gt;RPCFN: Average Arrival Time For A Flight (#2)&lt;/h3&gt;

&lt;p&gt;&amp;ndash; By Chris Strom&lt;/p&gt;

&lt;p&gt;Thank you for the very encouraging response to the
&lt;a href=&#34;http://rubylearning.com/blog/2009/09/24/rpcfn-shift-subtitle-1/&#34;&gt;first-ever&lt;/a&gt;
“&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;“. The second Ruby
challenge is from Chris Strom.&lt;/p&gt;

&lt;h2 id=&#34;about-chris-strom:f21d0dccff3cef355e2212eafc89f107&#34;&gt;About Chris Strom&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris
Strom&#34; title=&#34;Chris Strom&#34; /&gt;
Chris
Strom (&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt; /
&lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;blog&lt;/a&gt;) in his day job, is the Director of
Software Engineering for mdlogix, a small company in Baltimore,
Maryland. They develop software that manages clinical research trials
and associated data. They primarily code with Ruby on Rails. His
background is in web development, mostly in Perl until ~2005 when he
made the switch to Ruby.&lt;/p&gt;

&lt;p&gt;Chris has this to say about the challenge:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;RPCFN is a good idea as reading books and documentation can only take
you so far when learning a new language. To really learn, you need to
use the language. RPCFN provides a fabulous forum for using Ruby in
the form of regular, engaging (but not arcanely difficult) challenges.
Better yet, it provides feedback on how to use Ruby well, as each
fortnight the best solution to a challenge is chosen. RPCFN is a
wonderful introduction to the Ruby language and to the Ruby community.
Welcome newbies!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;sponsor:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Sponsor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.railsware.com/&#34;&gt;&lt;img src=&#34;http://rubylearning.com/images/Railsware125x125.png&#34; alt=&#34;Railsware for premium-quality web
applications&#34; title=&#34;Railsware for premium-quality web applications&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This fortnights programming challenge is sponsored by
&lt;strong&gt;&lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;&lt;/strong&gt;. Railsware is glad to support
the Ruby Programming Challenge and help the Ruby community grow and get
stronger.&lt;/p&gt;

&lt;p&gt;Railsware is a product development company specializing in Ruby on Rails
and UI design creating premium-quality web applications. The company
works with startups and established businesses looking to build
ecommerce, social networking, specialized business applications and many
other products.&lt;/p&gt;

&lt;h2 id=&#34;prizes:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Prizes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The person with the best Ruby solution (if there is a tie between
answers, then the one who posted first will be the winner) will be
awarded any &lt;strong&gt;one&lt;/strong&gt; of PeepCode’s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails
screencasts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The other prize, selected randomly amongst the remaining working
Ruby solutions, will be awarded any &lt;strong&gt;one&lt;/strong&gt; of BDDCasts’
&lt;a href=&#34;http://bddcasts.com/&#34;&gt;screencasts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two persons who win, can’t win again in the next immediate challenge
but can still participate.&lt;/p&gt;

&lt;h2 id=&#34;the-ruby-challenge:f21d0dccff3cef355e2212eafc89f107&#34;&gt;The Ruby Challenge&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/rubypc.jpg&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You owe a big favor and have agreed to pick up a friend at the airport
every Friday night. The airline on which your friend flies is cheap, but
terrible with reporting delays and departure/arrival times. You soon
realize that the 10pm flight is never on time and is usually late by
more than an hour. If the plane has arrived at 11:15pm, 12:03am,
11:30pm, 11:23pm and 11:48pm, what is the average arrival time?&lt;/p&gt;

&lt;p&gt;Does the solution still work if your friend changes to a flight arriving
6 hours later? What about 12 hours later?&lt;/p&gt;

&lt;h3 id=&#34;program-output:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Program Output&lt;/h3&gt;

&lt;p&gt;The output should look something like this when run from the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; average_time_of_day([&amp;quot;11:51pm&amp;quot;, &amp;quot;11:56pm&amp;quot;, &amp;quot;12:01am&amp;quot;, &amp;quot;12:06am&amp;quot;, &amp;quot;12:11am&amp;quot;])
=&amp;gt; &amp;quot;12:01am&amp;quot;

&amp;gt;&amp;gt; average_time_of_day([&amp;quot;6:41am&amp;quot;, &amp;quot;6:51am&amp;quot;, &amp;quot;7:01am&amp;quot;])
=&amp;gt; &amp;quot;6:51am&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hint:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Hint&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your digital ways will not help you, time of day is cyclical.&lt;/li&gt;
&lt;li&gt;You may need to use the &lt;strong&gt;Math&lt;/strong&gt; and &lt;strong&gt;Time&lt;/strong&gt; classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: This has to be a pure Ruby script, using only the Ruby
Standard Libraries (meaning, no external Gems). You &lt;strong&gt;do not&lt;/strong&gt; need to
build a gem for this. Pure Ruby code is all that is needed.&lt;/p&gt;

&lt;h2 id=&#34;how-to-enter-the-challenge:f21d0dccff3cef355e2212eafc89f107&#34;&gt;How to Enter the Challenge&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge
Rules&lt;/a&gt;.
By participating in this challenge, you agree to be bound by these
Challenge Rules. &lt;strong&gt;It’s free and
&lt;a href=&#34;http://rubylearning.com/blog/wp-login.php?action=register&#34;&gt;registration&lt;/a&gt;
is optional&lt;/strong&gt;. You can enter the challenge just by posting the following
as a comment to this blog post:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your name:&lt;/li&gt;
&lt;li&gt;Email address (will not be published):&lt;/li&gt;
&lt;li&gt;Brief description of what you do (will not be published):&lt;/li&gt;
&lt;li&gt;Country of Residence:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/#rpc5&#34;&gt;GIST URL of your
Solution&lt;/a&gt;
(i.e. Ruby code) with explanation and / or test cases:&lt;/li&gt;
&lt;li&gt;Code works with Ruby 1.8 / 1.9 / Both:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As soon as we receive your GIST URL, we will fork your submission.
This means that your solution is frozen and accepted. Please be sure
that is the solution you want, as it is now recorded in time and is
the version that will be evaluated.&lt;/li&gt;
&lt;li&gt;All solutions posted would be hidden to allow participants to come
up with their own solutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You should post your entries before midnight of 18th Oct. 2009
(Indian Standard Time). No new solutions will be accepted from 19th
to 22nd Oct. 2009.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;On Monday, 19th Oct. 2009 all the solutions will be thrown open for
everyone to see and comment upon.&lt;/li&gt;
&lt;li&gt;The winning entries will be announced on this blog on 22nd Oct. The
winners will be sent their prizes by email.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-details-on-the-rpcfn:f21d0dccff3cef355e2212eafc89f107&#34;&gt;More details on the RPCFN?&lt;/h2&gt;

&lt;p&gt;Please refer to the &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN
FAQ&lt;/a&gt;&lt;/strong&gt; for
answers to the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies
(RPCFN)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit
you?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge
Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best
Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge
Topic?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;donations:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Donations&lt;/h2&gt;

&lt;p&gt;RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if
you enjoy solving Ruby problems and would like to give something back by
helping with the running costs then any donations are gratefully
received.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pledgie.com/campaigns/415&#34;&gt;&lt;img src=&#34;http://www.pledgie.com/campaigns/415.png?skin_name=chrome&#34; alt=&#34;Click here to lend your support to: Support RubyLearning With Some
Love and make a donation at www.pledgie.com
!&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Special thanks to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;Chris Strom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sponsor &lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeff Schoolcraft of &lt;a href=&#34;http://bddcasts.com/&#34;&gt;BDDCasts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The RubyLearning team, namely Dave Lilley (New Zealand), Jeff Savin
(Canada), &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter
Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://giordano.scalzo.biz/2009/10/10/entering-rpcfn-2/&#34;&gt;Giordano
Scalzo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jonathanjulian.com/2009/10/i-just-entered-rpcfn-2/&#34;&gt;Jonathan
Julian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.loicpaillotin.com/2009/10/getting-back-in-shape.html&#34;&gt;Loïc
Paillotin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;questions:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;Contact Satish Talim at
&lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have
any doubts / questions about the challenge (the current problem
statement), please post them as comments to this post and the author
will reply asap.&lt;/p&gt;

&lt;h2 id=&#34;the-participants:f21d0dccff3cef355e2212eafc89f107&#34;&gt;The Participants&lt;/h2&gt;

&lt;p&gt;There are two categories of participants. Some are vying for the prizes
and some are participating for the fun of it.&lt;/p&gt;

&lt;h3 id=&#34;in-the-competition:f21d0dccff3cef355e2212eafc89f107&#34;&gt;In the competition&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Othmane Benkirane, Morocco – declared winner&lt;/li&gt;
&lt;li&gt;Tisho Georgiev, Bulgaria&lt;/li&gt;
&lt;li&gt;Pete Campbell, USA&lt;/li&gt;
&lt;li&gt;Jonathan Julian, USA&lt;/li&gt;
&lt;li&gt;Antonio, Canada&lt;/li&gt;
&lt;li&gt;Robison WR Santos, Brazil&lt;/li&gt;
&lt;li&gt;Ricardo Duarte, Brazil&lt;/li&gt;
&lt;li&gt;Paul Barry, USA&lt;/li&gt;
&lt;li&gt;Haris Amin, USA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/10/22/charles-feduke-winner-rpcfn-2/&#34;&gt;Charles
Feduke&lt;/a&gt;,
USA – declared winner&lt;/li&gt;
&lt;li&gt;Oliver, UK&lt;/li&gt;
&lt;li&gt;Bryan Liles, USA&lt;/li&gt;
&lt;li&gt;Gunther Diemant, Germany&lt;/li&gt;
&lt;li&gt;Valério Farias, Brazil&lt;/li&gt;
&lt;li&gt;Vikas Maskeri, India&lt;/li&gt;
&lt;li&gt;Jiren Patel, India&lt;/li&gt;
&lt;li&gt;Stefan, Germany&lt;/li&gt;
&lt;li&gt;Ahmed Al Hafoudh, Slovakia&lt;/li&gt;
&lt;li&gt;Tom Voltz, USA&lt;/li&gt;
&lt;li&gt;David Jenkins, USA&lt;/li&gt;
&lt;li&gt;Michael Lang, USA&lt;/li&gt;
&lt;li&gt;Thiago Fernandes Massa, Brazil&lt;/li&gt;
&lt;li&gt;Tim Rand, USA&lt;/li&gt;
&lt;li&gt;Milan Dobrota, Serbia&lt;/li&gt;
&lt;li&gt;Mike Hodgson, Canada&lt;/li&gt;
&lt;li&gt;Brad O’Connor, Australia&lt;/li&gt;
&lt;li&gt;Giordano Scalzo, Italy&lt;/li&gt;
&lt;li&gt;Rainer Thiel, New Zealand&lt;/li&gt;
&lt;li&gt;Todd Huss, USA&lt;/li&gt;
&lt;li&gt;Pankaj Sisodiya, India&lt;/li&gt;
&lt;li&gt;Loïc Paillotin, USA&lt;/li&gt;
&lt;li&gt;Chuck Ha, USA&lt;/li&gt;
&lt;li&gt;Josh Baxley, USA&lt;/li&gt;
&lt;li&gt;Javier Blanco Gutiérrez, Spain&lt;/li&gt;
&lt;li&gt;Sogo Ohta, Japan&lt;/li&gt;
&lt;li&gt;Daniel Wanek, USA&lt;/li&gt;
&lt;li&gt;Himansu Desai, USA&lt;/li&gt;
&lt;li&gt;John McDonald, USA&lt;/li&gt;
&lt;li&gt;Ben Miller, UK&lt;/li&gt;
&lt;li&gt;Sriram Varahan, India&lt;/li&gt;
&lt;li&gt;Conner Peirce, USA&lt;/li&gt;
&lt;li&gt;Ben Marini, USA&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;just-for-fun:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Just for Fun&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Michael Kohl, Austria&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper, UK&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-winners:f21d0dccff3cef355e2212eafc89f107&#34;&gt;The Winners&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/winner_icon_1.png&#34; alt=&#34;Winners&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Congratulations to the winners of this Ruby Challenge. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Charles Feduke&lt;/strong&gt; from USA (his &lt;a href=&#34;https://gist.github.com/5b371226faf83af50d7e&#34;&gt;Ruby Challenge
solution&lt;/a&gt;) – the
person with the best Ruby solution. He wins any &lt;strong&gt;one&lt;/strong&gt; of
PeepCode’s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails
screencasts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Othmane Benkirane&lt;/strong&gt; from Morocco (his &lt;a href=&#34;http://gist.github.com/205002&#34;&gt;Ruby Challenge
solution&lt;/a&gt;) – selected randomly
amongst the remaining working Ruby solutions. He wins any &lt;strong&gt;one&lt;/strong&gt; of
BDDCasts’ &lt;a href=&#34;http://bddcasts.com/&#34;&gt;screencasts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;previous-challenge:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Previous Challenge&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/09/24/rpcfn-shift-subtitle-1/&#34;&gt;RPCFN: Shift Subtitle (#1)&lt;/a&gt;
by Fabio Akita.&lt;/p&gt;

&lt;h2 id=&#34;next-challenge:f21d0dccff3cef355e2212eafc89f107&#34;&gt;Next Challenge&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/10/30/rpcfn-short-circuit-3/&#34;&gt;RPCFN: Short Circuit (#3)&lt;/a&gt;
by Gautam Rege.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/update.jpg&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;This Challenge is now closed&lt;/strong&gt;. &lt;strong&gt;Chris Strom&lt;/strong&gt; has a &lt;a href=&#34;https://gist.github.com/4f6807eef49064027a3c&#34;&gt;working
solution to this
problem&lt;/a&gt;. This is not
a “perfect” or the sole “correct” solution, but just one way of
doing it.&lt;/li&gt;
&lt;li&gt;Chris Strom has written a blog post that talks about the &lt;a href=&#34;http://japhr.blogspot.com/2009/10/newbie-feedback.html&#34;&gt;most
common “issues” faced by Ruby
beginners&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The (#3) challenge by &lt;strong&gt;Gautam Rege, India&lt;/strong&gt; is scheduled for 1st
Nov. 2009.&lt;/li&gt;
&lt;li&gt;The (#4) challenge by &lt;strong&gt;Michael Kohl, Austria&lt;/strong&gt; is scheduled for
1st Dec. 2009.&lt;/li&gt;
&lt;li&gt;The (#5) challenge by &lt;strong&gt;&lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper&lt;/a&gt;,
UK&lt;/strong&gt; is scheduled for 1st Jan. 2010.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cookie-based Sessions in Sinatra</title>
      <link>http://localhost:1313/blog/2009/09/30/cookie-based-sessions-in-sinatra/</link>
      <pubDate>Wed, 30 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2009/09/30/cookie-based-sessions-in-sinatra/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/jjcicchelli.jpg&#34; alt=&#34;Julio Javier
Cicchelli&#34; title=&#34;Julio Javier Cicchelli&#34; /&gt;

This is a guest post from &lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2009/07/20/julio-javier-cicchelli-how-do-i-learn-and-master-sinatra/&#34;&gt;Julio Javier
Cicchelli&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cookie-based-sessions-in-sinatra:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;Cookie-based Sessions in Sinatra&lt;/h2&gt;

&lt;p&gt;Hi there everybody! My name is &lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Javier
Cicchelli&lt;/a&gt; and I am the Software
Engineer of the technological pride and joy of the Red Light District in
Amsterdam, the Netherlands: &lt;a href=&#34;http://rock-n-code.com&#34;&gt;Rock &amp;amp; Code&lt;/a&gt;. I
have been vested with the distinct authority to shed some light on the
concept of &lt;em&gt;Cookie&lt;/em&gt;. The purpose of this article is to teach you how to
concoct the explosive digital mixture that would enable you to use
cookies for sessions within your &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;
applications. Piece of cake, right? Before I move to the nitty-gritty of
cookies in Sinatra, I want to cover the mandatory theoretical basics.
So, I invite you to sit back and enjoy this slow and easy software ride.
By the end of that piece, you will be asking for cookies at the nearest
bakery!&lt;/p&gt;

&lt;h2 id=&#34;what-are-cookies:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;What are Cookies?&lt;/h2&gt;

&lt;p&gt;According to the Computer Science definition, a &lt;em&gt;cookie&lt;/em&gt;, which is also
known as an &lt;em&gt;HTTP cookie&lt;/em&gt;, a &lt;em&gt;tracking cookie&lt;/em&gt;, or a &lt;em&gt;browser cookie&lt;/em&gt;,
is a piece of text, no bigger than 4 kilobytes, which is stored on the
user&amp;rsquo;s computer by a web server via a web browser. It is a key-value
pair structure, which is designed to retain specific information such as
user preferences, user authentication, shopping carts, demographics,
sessions, or any other data used by a website. This mechanism, which was
developed by &lt;a href=&#34;http://netscape.aol.com/&#34;&gt;Netscape&lt;/a&gt; in the distant 1994,
provides a way to receive information from a web server and to send it
back from the web browser absolutely unchanged. This system complements
the stateless nature of the HTTP protocol as it provides enough memory
to store pieces of information during HTTP transactions.&lt;/p&gt;

&lt;p&gt;When you try to access a web site, your web browser connects to a web
server and it sends a request for the respective page. Then the web
server replies by sending the requested content and it simultaneously
stores a new cookie on your computer. Every time the web browser
requests web pages from the web server, it always sends the respective
cookies back to the web server. The process takes place as described, if
the web browser supports cookies and the user allows their usage. Only
the web server can modify one or more of the cookie values. Then it
sends them to the web browser upon replying to a specific request.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;http://rfc.dotsrc.org/rfc/rfc2965.html&#34;&gt;RFC2965
specification&lt;/a&gt;, cookies are case
insensitive. A set of defined properties is inherent to the cookie
structure. Those properties include an expiration date, a path and a
domain. The first attribute requires a date defined in &lt;em&gt;Wdy, DD-Mon-YYYY
HH:MM:SS GMT&lt;/em&gt; format. The rest of the cookie characteristics require a
path and/or a domain defined as a string. Let&amp;rsquo;s take a look at this
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cookie: key0=value0; ...; keyX=valueX; expires=Wed, 23-Sep-2009 23:59:59 GMT; path=/; domain=.yoursite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the expiration date is defined, your cookie will be &amp;ldquo;persistent&amp;rdquo; as
it will reoccur in different sessions until the set expiration date has
been reached. If the expiration date has not been defined in the cookie,
it will occur until the end of your current session or when you close
your web browser. If the path and/or the domain attributes have been
defined in your cookie, then the web server limits the scope of the
cookie to that specific domain, sub-domain or path.&lt;/p&gt;

&lt;h2 id=&#34;cookies-and-sinatra:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;Cookies and Sinatra&lt;/h2&gt;

&lt;p&gt;Having clarified the basics, we can proceed to the next level. Prepare
to learn how to implement cookie-based sessions in the Sinatra web
framework. You do not have to install any extra Ruby gem.&lt;/p&gt;

&lt;p&gt;Get ready to rumble! First and foremost, you have to decide on the
session strategy your Sinatra application will use in order to send to
the web browser only those relevant pieces of information that your
application requires. As I have already explained, this information
depends on the kind of application you want to develop and on the
functionalities you want to offer to your users. Then you have to enable
the cookie based session function in Sinatra. Finally, after enabling
the cookie-based support, you have to implement the designed session
strategy in your application. Regardless of how you want to develop your
application, you must always test your code in order to verify that it
works as expected and validate that it satisfies all the given
requirements. Throughout the remainder of this article, I will look at
the existing methods that provides Sinatra for using sessions based on
cookies.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Simple Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take it slow and easy. I will commence with a very simple example.
I will write a cookie version of the famous &amp;ldquo;Hello World&amp;rdquo; example. Here
I will use the cookie functions included in the Sinatra framework in
order to demonstrate how to use them. In the following example, I will
explain how to enable the session support in your Sinatra application
and I will show you how to create a key-value pair inside the session.
So, let&amp;rsquo;s rock &amp;amp; code!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;

enable :sessions

get &#39;/&#39; do
  session[&amp;quot;value&amp;quot;] ||= &amp;quot;Hello world!&amp;quot;
  &amp;quot;The cookie you&#39;ve created contains the value: #{session[&amp;quot;value&amp;quot;]}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-slightly-bigger-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Slightly Bigger Example&lt;/h2&gt;

&lt;p&gt;Now that you have a basic idea of how cookies work in Sinatra, you are
ready to move to the next level. I will write a more complex example,
which will consist of a tiny web application, which will ask the user to
identify. In this example, I will use the session support provided by
Sinatra in order to implement non-persistent cookies. Note that I am
using the technique I resorted to in the previous example. I simply
tuned it to the logic of this application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;
require &#39;haml&#39;

enable :sessions

get &#39;/&#39; do
  session[&amp;quot;user&amp;quot;] ||= nil
  haml :index
end

get &#39;/introduction&#39; do
  haml :introduction
end

post &#39;/introduction&#39; do
  session[&amp;quot;user&amp;quot;] = params[:name]
  redirect &#39;/&#39;
end

get &#39;/bye&#39; do
  session[&amp;quot;user&amp;quot;] = nil
  haml :bye
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-final-example:50fe63ccfb779c42b11d499d9f56357c&#34;&gt;A Final Example&lt;/h2&gt;

&lt;p&gt;The last example will demonstrate how to directly manage cookies through
the &lt;em&gt;request&lt;/em&gt; and &lt;em&gt;response&lt;/em&gt; singletons provided by Sinatra. You will
see in the following example that the previously described process
involving the use cookies is clearly implemented. This technique is
recommended when your application requires to use persistent and/or
scoped cookies. In this example, the application uses two persistent
cookies, which expire at the same time, in order to store and manage
different configuration data. Unfortunately, due to a bug on the cookie
management that I still have to investigate, I cannot test how the
application responds to the scope of the different cookies it has
created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;sinatra&#39;
require &#39;haml&#39;

get &#39;/&#39; do
  @@expiration_date = Time.now + (60 * 2) \
  unless request.cookies.key?(&#39;some_options&#39;) &amp;amp;&amp;amp; request.cookies.key?(&#39;other_options&#39;)
  haml :index
end

get &#39;/some_options&#39; do
  @some_cookie = request.cookies[&amp;quot;some_options&amp;quot;]
  haml :some_options
end

post &#39;/some_options&#39; do  
  response.set_cookie(&#39;some_options&#39;, :value =&amp;gt; cookie_values(params), :expires =&amp;gt; @@expiration_date)
  redirect &#39;/&#39;
end

get &#39;/other_options&#39; do
  @other_cookie = request.cookies[&amp;quot;other_options&amp;quot;]
  haml :other_options
end

post &#39;/other_options&#39; do
  response.set_cookie(&#39;other_options&#39;, :value =&amp;gt; cookie_values(params),:expires =&amp;gt; @@expiration_date)
  redirect &#39;/&#39;
end

helpers do
  def cookie_values(parameters)
    values = {}
    parameters.each do |key, value|
      case key
      when &#39;options&#39;
        values[value] = true
      else
        values[key] = true
      end
    end
    values
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would like to stress that Sinatra does allow developers to use
directly &lt;a href=&#34;http://rack.rubyforge.org/&#34;&gt;Rack&lt;/a&gt; to manage cookie through the
&lt;em&gt;Rack::Session::Cookie&lt;/em&gt; middleware. Yet, I desisted from discussing this
method because of its complexity. Furthermore, I have not elaborated on
the existence of other alternatives to this storage mechanism. After
all, I have to leave some room for upcoming articles I can present you
with. Do not allow my deliberate slips to limit your curiosity! Be
inquisitive! You can see the source code on
&lt;a href=&#34;http://gist.github.com/205962&#34;&gt;Github&lt;/a&gt;, of all the relevant examples.
So go ahead and rock &amp;amp; code!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Poll: Ruby Problems for Beginners and Prizes</title>
      <link>http://localhost:1313/blog/2009/09/13/poll-ruby-problems-for-beginners-and-prizes/</link>
      <pubDate>Sun, 13 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2009/09/13/poll-ruby-problems-for-beginners-and-prizes/</guid>
      <description>&lt;p&gt;Many RubyLearning participants wrote in asking RubyLearning to start a
weekly post containing a problem to be solved using Ruby. A problem will
be posted here every week / fortnight and anyone is free to offer their
solution (the solution should be clear-cut, follow Ruby conventions and
still be easy to understand) as a comment to the blog post. A small
panel will evaluate the solutions received and decide the best amongst
them all. The person with the best solution will be awarded a token
prize which could be a &lt;a href=&#34;http://peepcode.com/&#34;&gt;Peepcode&lt;/a&gt; or a
&lt;a href=&#34;http://www.pragprog.com/screencasts&#34;&gt;Pragmatic&lt;/a&gt; screencast or something
equivalent. Maybe some sponsors could chip in with some prizes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/ruby_challenge3.jpg&#34; alt=&#34;RPCFN&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;RubyLearning is open to this idea and will start the same provided there
is a good response to this. There’s a single question poll below which
please answer and what’s more important is to post your thoughts,
suggestions etc. as comments to this blog post.&lt;/p&gt;

&lt;p&gt;We do have the &lt;a href=&#34;http://rubyquiz.com/&#34;&gt;Ruby Quiz&lt;/a&gt;, a weekly programming
challenge for Ruby programmers. What’s also needed is something for
programmers starting off with Ruby. Maybe RubyLearning could provide
this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We look forward to your response(s) and thoughts, suggestions (thoughts
on the nature of the Ruby problem to be asked, evaluation criteria etc.)
as comments below&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Should we start a weekly Ruby programming challenge for beginners?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes (96%, 339 Votes)&lt;/li&gt;
&lt;li&gt;No (4%, 14 Votes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total Voters: &lt;strong&gt;353&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/blog/wp-content/plugins/wp-polls/images/loading.gif&#34; alt=&#34;Loading
...&#34; title=&#34;Loading ...&#34; /&gt;
 Loading
&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Thank you for the over-whelming response to the poll. The
poll is now closed. As the poll results suggest, RubyLearning is going
ahead and starting off the “Ruby Programming Challenge For Newbies
(RPCFN)” from Friday, 25th Sept. 2009. We are also getting a very
positive response from many Ruby Gurus and Sponsors. Work on the
&lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN
FAQ&lt;/a&gt;&lt;/strong&gt; is
underway. In the meantime, we still look forward to your response(s) and
thoughts, suggestions (thoughts on the nature of the Ruby problem to be
asked, evaluation criteria etc.) as comments below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TMail: Sending email</title>
      <link>http://localhost:1313/blog/2008/08/21/tmail-sending-email/</link>
      <pubDate>Thu, 21 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2008/08/21/tmail-sending-email/</guid>
      <description>&lt;div&gt;
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      TMail is a commonly used library by the ActionMailer component of Ruby
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span class=&#34;drop_cap&#34;&gt;T&lt;/span&gt;he students of the &lt;a href=&#34;http://rubylearning.org/class/&#34;&gt;FORPC101&lt;/a&gt; batch wanted to know how they could &lt;strong&gt;send an email in Ruby&lt;/strong&gt;. Today, out of the various options available, we will have a quick look at &lt;strong&gt;&lt;a href=&#34;http://tmail.rubyforge.org/index.html&#34;&gt;TMail&lt;/a&gt;&lt;/strong&gt; &amp;#8211; a library used for composing and manipulating email messages for Ruby.
  &lt;/p&gt;
  
  &lt;p class=&#34;note&#34;&gt;
    &lt;em&gt;&lt;strong&gt;TMail&lt;/strong&gt; is designed to be an Request For Comments (RFC) compatible library. The goal of TMail is to allow you to create emails programatically without having to know about the RFCs or how they work, or what their standards are&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Installation
  &lt;/h3&gt;
  
  &lt;p&gt;
    On a Windows box, we can install the TMail gem as follows:
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;c:\&gt;gem install tmail&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h3&gt;
    Sending an email
  &lt;/h3&gt;
  
  &lt;p&gt;
    You first put at the top of your class:
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;require &#39;tmail&#39;&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    Accessing a TMail object is done via the &lt;strong&gt;TMail::Mail&lt;/strong&gt; class. As email can be fairly complex creatures, you will find a large amount of accessor and setter methods in this class!
  &lt;/p&gt;
  
  &lt;p&gt;
    You then create an empty mail object by calling &lt;strong&gt;TMail::Mail.new&lt;/strong&gt;. This creates a completely blank email message. To be a valid email message, you&amp;#8217;ll need to modify the headers by simply accessing them using the accessor methods. Some of the public instance methods we use are: from, to, subject, date and body (for full details, please refer to the &lt;a href=&#34;http://tmail.rubyforge.org/rdoc/index.html&#34;&gt;TMail documentation&lt;/a&gt;). For example, the documentation for the instance method subject is:&lt;br /&gt;&lt;strong&gt;subject( default = nil )&lt;/strong&gt;&lt;br /&gt;Returns the subject of the mail instance. If the subject field does not exist, returns nil by default or you can pass in as the parameter for what you want the default value to be. Example:
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;mail = TMail::Mail.new
mail.subject #=&gt; nil
mail.subject(&#34;&#34;) #=&gt; &#34;&#34;
mail.subject = &#34;Hello&#34;
mail.subject #=&gt; &#34;Hello&#34;&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    Once the email message is created, you can call the to_s method to convert it back into a string. Then it can be sent with the &lt;strong&gt;&lt;a href=&#34;http://www.ruby-doc.org/stdlib/libdoc/net/smtp/rdoc/index.html&#34;&gt;Net::SMTP&lt;/a&gt;&lt;/strong&gt; library. The Net::SMTP library provides functionality to send internet mail via SMTP, the Simple Mail Transfer Protocol. The Net::SMTP.start method creates a new Net::SMTP object, opens a TCP connection and connects to the server. &amp;#8216;localhost&amp;#8217; is the IP address of your SMTP server and the port used is 25. Since we have called with a block, the newly-opened Net::SMTP object is yielded to the block, and automatically closed when the block finishes.
  &lt;/p&gt;
  
  &lt;p&gt;
    Before you run the program (full code below), you need to start the SMTP server. On Windows, I prefer to download and use the &lt;a href=&#34;http://www.softstack.com/freesmtp.html&#34;&gt;Free SMTP Server&lt;/a&gt; for testing. Connect your PC to the Internet, then start the Free SMTP Server program. The program will try to detect your provider&amp;#8217;s DNS server. If a DNS server is available and the standard SMTP port #25 is free, the program will become ready to process your mail. If it is not possible to detect provider&amp;#8217;s DNS server, the program will prompt you to enter any DNS server you know, after that if the server exists the program will become ready to process mail. If the port #25 is busy by another local SMTP server/service, the program will show you an error message. You can specify any DNS server or SMTP port by using the button Options, which is situated on the Toolbar. You should use the word &amp;#8220;localhost&amp;#8221; as the SMTP server host in your mail program.
  &lt;/p&gt;
  
  &lt;p&gt;
    Here&amp;#8217;s the complete program code:
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;tmail&#39;
require &#39;net/smtp&#39;

tomail = &#39;satishtalim@gmail.com&#39;
frommail = &#39;superman@world.com&#39;
mail = TMail::Mail.new
mail.to = tomail
mail.from = frommail
mail.subject = &#39;Test message&#39;
mail.date = Time.now
mail.body = &#39;Thanks to Locaweb for making this possible.&#39;


Net::SMTP.start( &#39;localhost&#39;, 25 ) do|smtpclient|
  smtpclient.send_message(
    mail.to_s,
    frommail,
    tomail
  )
end&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    It is to be noted that TMail is a commonly used library by the ActionMailer component of Ruby on Rails, the Nitro web framework, the Ruby-Talk mail gateway and many others.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/ActionMailer&#34; rel=&#34;tag&#34;&gt;ActionMailer&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby&#34; rel=&#34;tag&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Sending+Email&#34; rel=&#34;tag&#34;&gt;Sending Email&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/TMail&#34; rel=&#34;tag&#34;&gt;TMail&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby and Twitter</title>
      <link>http://localhost:1313/blog/2008/03/24/ruby-and-twitter/</link>
      <pubDate>Mon, 24 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2008/03/24/ruby-and-twitter/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;strong&gt;&lt;a href=&#34;http://twitter.com/home&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; is a service for friends, family, and coâ€“workers to communicate and stay connected through the exchange of quick, frequent answers to one simple question: What are you doing?
  &lt;/p&gt;
  
  &lt;p&gt;
    They say that Twitter is on its way to becoming the next killer app.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubyforge.org/projects/twitter/&#34;&gt;RubyForge&lt;/a&gt; has a command line interface and &lt;a href=&#34;http://twitter.rubyforge.org/twitter/&#34;&gt;Ruby api wrapper&lt;/a&gt; for twitter.
  &lt;/p&gt;
  
  &lt;p&gt;
    I got hooked on to Twitter just today, when I came across this api. The documentation is not all that complete, given the fact that only John Nunemaker is working on this project. Nevertheless, let us see how this works.
  &lt;/p&gt;
  
  &lt;p&gt;
    To get started:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      First install the twitter gem by typing the following at the command prompt: &lt;strong&gt;gem install twitter&lt;/strong&gt;
    &lt;/li&gt;
    &lt;li&gt;
      The sample program mytwitter.rb below, is self explanatory
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;pre&gt;&lt;code&gt;# mytwitter.rb
require &#39;twitter&#39;

twitter = Twitter::Base.new(&#39;your_username&#39;, &#39;your_password&#39;)

# to make a post
twitter.post(&#39;Posting this message from a Ruby program!&#39;)

# returns an array of users who are in your friends list
puts &#39;&#39;, &#34;Your Friends&#34;, &#34;=&#34; * 50
twitter.friends.each do |u|
  puts u.name, u.status.text
  puts
end

&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    Have fun!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Ruby&#34; rel=&#34;tag&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Twitter&#34; rel=&#34;tag&#34;&gt; Twitter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;AkitaOnRails&#34; On Ruby Symbols</title>
      <link>http://localhost:1313/blog/2007/11/26/akitaonrails-on-ruby-symbols/</link>
      <pubDate>Mon, 26 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/11/26/akitaonrails-on-ruby-symbols/</guid>
      <description>&lt;p&gt;&lt;em&gt;RubyLearning recently caught with &lt;strong&gt;Fabio Akita&lt;/strong&gt; from Brazil and got
his viewpoint on one of the vexing areas for beginners in Ruby –
&lt;strong&gt;Symbols&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/akita.jpg&#34; alt=&#34;Fabio
Akita&#34; title=&#34;Fabio Akita&#34; /&gt;
&lt;strong&gt;Fabio
Akita&lt;/strong&gt; is a Brazilian Rails enthusiast, also known online as
“AkitaOnRails”. He regularly write posts on his own
&lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;blog&lt;/a&gt; and had published the very first
book tailored for the Brazilian audience called “Repensando a Web com
Rails”. He is now a full-time Ruby on Rails developer working as Brazil
Rails Practice Manager for the Utah company Surgeworks LLC.&lt;/p&gt;

&lt;p&gt;Ruby is very similar to many other object oriented languages. You can
find similar constructs from non-dynamic languages as Java or C#. On
the other hand, to start grasping all the possibilities of Ruby one has
to invest some time learning what we call ‘Rubyisms’. One example is
something called a *symbol*.&lt;/p&gt;

&lt;p&gt;This is more obvious when you start learning Ruby through Rails. Much of
Rails power comes from the fact that it uses a lot of rubyisms. Let’s
see one example: (&lt;strong&gt;Note&lt;/strong&gt;: You may want to brush up on
&lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_symbols.html&#34;&gt;Symbols&lt;/a&gt; and
&lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_activerecord_and_mysql.html&#34;&gt;ActiveRecord&lt;/a&gt;
before going through the examples that follow.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;class Transact &amp;lt; ActiveRecord::Base
  validates_presence_of :when
  validates_presence_of :category, :account
  validates_presence_of :value
  validates_numericality_of :value

  belongs_to :category
  belongs_to :account
end&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‘class’ we understand, after all, the mainstream languages are
‘object-oriented’. But what are all those colons doing through all the
code? Those denote Symbols. More important, the colons represent
initializers of the class &lt;strong&gt;Symbol&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This can be quite confusing considering that the normal way of
initializing an object is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;Symbol.new&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ‘&lt;strong&gt;new&lt;/strong&gt;‘ call asks for the standard ‘&lt;strong&gt;initialize&lt;/strong&gt;‘ method defined
within the class. Turns out that this method is private, the idea being
that all symbols should be instantiated with the colon notation.&lt;/p&gt;

&lt;p&gt;Symbols are used as identifiers. Some other languages could simply use
Strings instead of Symbols. In Ruby, it would become something like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;class Transact &amp;lt; ActiveRecord::Base
  validates_presence_of &amp;quot;when&amp;quot;
  validates_presence_of &amp;quot;category&amp;quot;, &amp;quot;account&amp;quot;
  validates_presence_of &amp;quot;value&amp;quot;
  validates_numericality_of &amp;quot;value&amp;quot;

  belongs_to &amp;quot;category&amp;quot;
  belongs_to &amp;quot;account&amp;quot;
end&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not so visually different: we got rid of the colons and went back to the
comfortable quotation marks. They look the same but behave differently.
Like Symbols in Ruby, Strings also have a special constructor. Instead
of doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;String.new(&amp;quot;category&amp;quot;)&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;&amp;quot;category&amp;quot;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One could call these kind of shortcuts as “eye-candy”, but the languages
would be pretty harsh without them. We use Strings all the time, and it
would be extremely painful to instantiate new Strings without this
special constructor: simply writing it between quotation marks.&lt;/p&gt;

&lt;p&gt;The problem is, as Strings are easy to write, we overuse them more often
than not. There is an important side-effect: each new construct
instantiates a brand new object in memory, even though they have the
same content. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;&amp;gt;&amp;gt; &amp;quot;category&amp;quot;.object_id
=&amp;gt; 2953810

&amp;gt;&amp;gt; &amp;quot;category&amp;quot;.object_id
=&amp;gt; 2951340&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we instantiate two strings with the same content. Each object in
memory has a unique ID so each string created above uses a separate
memory slot and have separate IDs. Now imagine that the same string
shows up in hundreds of different places throughout your project. You’re
definitely using more memory than necessary.&lt;/p&gt;

&lt;p&gt;But, this is not a new problem. For that, we have another construct in
most languages called ‘constants’, Ruby included. We have to
conscientiously plan and pre-define several constants beforehand. So,
that’s how our previous example would be using memory efficient
constants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;class Transact &amp;lt; ActiveRecord::Base
  ACCOUNT = &amp;quot;account&amp;quot;
  CATEGORY = &amp;quot;category&amp;quot;
  VALUE = &amp;quot;value&amp;quot;
  WHEN = &amp;quot;when&amp;quot;

  validates_presence_of WHEN
  validates_presence_of CATEGORY, ACCOUNT
  validates_presence_of VALUE
  validates_numericality_of VALUE

  belongs_to CATEGORY
  belongs_to ACCOUNT
end&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but this is not nearly as nice. First of all, you have to
pre-define everything beforehand, either in the same class or a
separated module just for constants. Second, the code is less elegant,
less readable, thus, less maintainable.&lt;/p&gt;

&lt;p&gt;So, we get back to the purpose of Symbols: being as memory efficient as
constants but as easy to the eyes as full fledged strings. Quotation
mark notation is already taken for Strings, capitalized words for
constants, dollar sign for global variables and so on. So, colon was a
good candidate.&lt;/p&gt;

&lt;p&gt;Let’s see what it all means:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;&amp;gt;&amp;gt; &amp;quot;string&amp;quot;.object_id
=&amp;gt; 3001850
&amp;gt;&amp;gt; &amp;quot;string&amp;quot;.object_id
=&amp;gt; 2999540

&amp;gt;&amp;gt; :string.object_id
=&amp;gt; 69618
&amp;gt;&amp;gt; :string.object_id
=&amp;gt; 69618&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we explained before, the first two strings have the same content and
look similar, but they do occupy different memory slots, allowing for
unnecessary duplication.&lt;/p&gt;

&lt;p&gt;The last two symbols both are exactly the same thing. So I can call
identifiers as symbols through all my code without worrying about
duplication in memory. They are easy to initialize and easy to manage.&lt;/p&gt;

&lt;p&gt;We can also transform a String into a Symbol and vice-versa:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;&amp;gt;&amp;gt; &amp;quot;string&amp;quot;.to_sym
=&amp;gt; :string
&amp;gt;&amp;gt; :symbol.to_s
=&amp;gt; &amp;quot;symbol&amp;quot;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One good place where this is put to good use is within Rails’
&lt;strong&gt;ActiveSupport&lt;/strong&gt;. This package was made to extend the Ruby language,
and one such extension was made to the ubiquitous &lt;strong&gt;Hash&lt;/strong&gt; class. Let’s
see an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;&amp;gt;&amp;gt; params = { &amp;quot;id&amp;quot; =&amp;gt; 1, &amp;quot;action&amp;quot; =&amp;gt; &amp;quot;show&amp;quot; }
=&amp;gt; {&amp;quot;action&amp;quot;=&amp;gt;&amp;quot;show&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;1}

&amp;gt;&amp;gt; params[&amp;quot;id&amp;quot;]
=&amp;gt; 1

&amp;gt;&amp;gt; params.symbolize_keys!
=&amp;gt; {:id=&amp;gt;1, :action=&amp;gt;&amp;quot;show&amp;quot;}

&amp;gt;&amp;gt; params[:id]
=&amp;gt; 1&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first statement instantiates and populates a &lt;strong&gt;Hash&lt;/strong&gt; (yet another
special initialization notation). The second statement asks for the
value identified by the key “id”, which is a string.&lt;/p&gt;

&lt;p&gt;Instead of doing it this way, we can call the &lt;strong&gt;symbolize_keys!&lt;/strong&gt; to
transform all string keys into symbol keys. Now in the last statement we
can use the more usual Rails notation as symbol keys within a Hash. When
Rails receives a HTML Form post request, it only gets strings, so it is
its job to convert everything into meaningful Rails objects. If you’ve
been in the Rails world, you already saw this usage with controllers.&lt;/p&gt;

&lt;p&gt;So, this is all to be said about Symbols: very simple constructs that
makes code more readable and more efficient at the same time, which is
compatible with the Ruby Way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Fabio for showing us a different perspective on Symbols. In
case you have any queries, questions on this article, kindly post your
questions here and Fabio would be glad to answer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Brazil&#34;&gt;Brazil&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Fabio+Akita&#34;&gt;Fabio
Akita&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Programming&#34;&gt;Ruby
Programming&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Symbols&#34;&gt;Ruby
Symbols&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby MySQL Tutorial</title>
      <link>http://localhost:1313/blog/2007/05/14/ruby-mysql-tutorial/</link>
      <pubDate>Mon, 14 May 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/05/14/ruby-mysql-tutorial/</guid>
      <description>&lt;p&gt;This brief &lt;strong&gt;Ruby MySQL Tutorial&lt;/strong&gt; shows you how you can connect to
MySQL in Ruby. MySQL support in Ruby was made possible by Tomita
Masahiro. He has developed a pure Ruby binding called Ruby/MySQL. We
need to install the same on our PC and the installation (you need to be
connected to the internet and it takes some time) is as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt;gem install mysql
Bulk updating Gem source index for: http://gems.rubyforge.org
Select which gem to install for your platform (i386-mswin32)

 1. mysql 2.7.1 (mswin32)

 2. mysql 2.7 (ruby)

 3. mysql 2.6 (ruby)

 4. mysql 2.5.1 (ruby)

 5. Cancel installation

&amp;gt; 1
Successfully installed mysql-2.7.1-mswin32
Installing ri documentation for mysql-2.7.1-mswin32...
Installing RDoc documentation for mysql-2.7.1-mswin32...
C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs mysql-2.7.1-mswin32 driver which is faster and supports
MySQL 4.1 and later. The documentation for this driver is
&lt;a href=&#34;http://tmtm.org/en/mysql/ruby/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will assume that you’ve already installed mySQL 4.1 or above on your
PC and that you have it running and are familiar with the basics.&lt;/p&gt;

&lt;p&gt;Now, run the mysql client program from the command line, as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt;mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get the mysql prompt. Next, create a database ruby as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database ruby;
Query OK, 1 row affected (0.02 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a table student in the database ruby as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; use ruby;
create table student (id VARCHAR(2), name VARCHAR(20), rank VARCHAR(2));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a first exercise we try to connect to the MySQL server and print all
the names in the table student. Program &lt;strong&gt;p078rubymysql.rb&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;mysql&#39;

#my = Mysql.new(hostname, username, password, databasename)
con = Mysql.new(&#39;localhost&#39;, &#39;&#39;, &#39;&#39;, &#39;student&#39;)
rs = con.query(&#39;select * from student&#39;)
rs.each_hash { |h| puts h[&#39;name&#39;]}
con.close
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is as simple as that. You can explore this api further.&lt;/p&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/MySQL&#34;&gt;MySQL&lt;/a&gt;,
&lt;a href=&#34;http://technorati.com/tag/Ruby&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+MySQL+Tutorial&#34;&gt;Ruby MySQL
Tutorial&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby Quirks</title>
      <link>http://localhost:1313/blog/2007/04/11/ruby-quirks/</link>
      <pubDate>Wed, 11 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/04/11/ruby-quirks/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ruby Quirks&lt;/strong&gt; – peculiarity of behavior? I know this topic is
debatable and remember &amp;ldquo;one man&amp;rsquo;s meat is another man&amp;rsquo;s poison!&amp;rdquo; I plan
to write down here (in no particular order), some of the little Ruby
quirks that I&amp;rsquo;ve picked up and which, I now use comfortably.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Peter Cooper, the author of the book ‘Beginning Ruby&amp;rsquo; introduced me to
Real-Time chat using an IRC client. On the #ruby channel at
irc://irc.freenode.net/ I heard of this quirk:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MotorCycle
  def initialize(make, color)
    @make, @color = make, color
  end
end

m = MotorCycle.new(&#39;Honda&#39;, &#39;blue&#39;)
m.instance_variable_set(:@make, &#39;Kawasaki&#39;)
m.instance_variable_set(:@gears, 4)
puts m.inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the output of the above program. In the code above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m.instance_variable_set(:@gears, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sets the instance variable names by &lt;em&gt;symbol&lt;/em&gt; to &lt;em&gt;object&lt;/em&gt;, thereby
frustrating the efforts of the class&amp;rsquo;s author to attempt to provide
proper encapsulation. The variable did not have to exist prior to this
call. &lt;strong&gt;Update:&lt;/strong&gt; Hal Fulton in his excellent book ‘The Ruby Way&amp;rsquo;
has this to say about &lt;code&gt;instance_variable_set&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s true these methods are powerful and potentially dangerous. They should
be used cautiously, not casually. But it&amp;rsquo;s impossible to say whether
encapsulation is violated without looking at *how these tools are used*.
If they are used intentionally as part of a good design, then all is well.
If they are used to violate the design, or to circumvent a bad design, then
all is not well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one is not really a quirk but appears to be one, especially for people
coming from a Java background. Last year, [Shashank Date][1] gave the
[PuneRuby][2] members a presentation on ‘Why Ruby Shines&amp;rsquo; and three points
stood out –&lt;/p&gt;

&lt;p&gt;&amp;lsquo;Expressions everywhere&amp;rsquo;, ‘Active Class Definitions&amp;rsquo; and ‘Everything is
an Object&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Expressions everywhere&lt;/em&gt;&lt;/strong&gt; – In Ruby, everything
returns some value. Therefore a class definition is an expression and
one can say something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = class C
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value of c is nil.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Active Class Definitions&lt;/em&gt;&lt;/strong&gt; – Look at
the following program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class C
  puts &#39;In class C&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this class is read the first time, it executes puts and the output
is – ‘In class C&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Everything is an Object&lt;/em&gt;&lt;/strong&gt; – After being with Java since 1995, the concept
that classes in Ruby are first-class objects, is hard to digest at first – each
is an instance of class Class. When a new class is defined (typically using
class Name … end), an object of type Class is created and assigned to a
constant (Name. in this case). Hal Fulton&amp;rsquo;s suggests a &lt;em&gt;mantra&lt;/em&gt; to be recited
everyday – &amp;ldquo;Class &lt;em&gt;is an object&lt;/em&gt;, and Object &lt;em&gt;is a class&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If I want to swap two variables, I would normally use an additional temporary
variable.&lt;/p&gt;

&lt;p&gt;In Ruby, this is not necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x, y = y, x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will interchange the values of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Jaaron, a reader of
this Learning Ruby Blog has this quirk for us. This one is well known
and is the cause of much frustration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = 7
[1,2,3].each do |x|
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the name of a block parameter conflicts with the name of a local
variable, the behavior is to assign the local variable to the argument.
In this case, the local variable x gets assigned the value 1, then the
value 2, then the value 3. The value 7 is lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (13th April):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matt Chen, Matthew King and Ara Vartanian have commented on this behavior. If
you refer to Programming Ruby Second Edition eBook (page 100) it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The whole issue with variable scope and blocks is one that generates
considerable discussion in the Ruby community. The current scheme has
definite problems (particularly when variables are unexpectedly aliased
inside blocks), but at the same time no one has managed to come up with
something thats both better and acceptable to the wider community. Matz is
promising changes in Ruby 2.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Are instance variables inherited by a sub-class? David Black the author
of Ruby for Rails has this to say: Instance variables are per-object,
not per-class, and they&amp;rsquo;re not inherited. But if a method uses one, and
that method is available to subclasses, then it will still use the
variable — but “the variable” in the sense of one per object. See the
following program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class C
  def initialize
    @n = 100
  end

  def increase_n
    @n *= 20
  end
end

class D &amp;lt; C
  def show_n
    puts &amp;quot;n is #{@n}&amp;quot;
  end
end

d = D.new
d.increase_n
d.show_n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;ruby p049instvarinherit.rb
n is 2000
&amp;gt;Exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Morgan Schweers, a reader of this blog has this quirk for us.&lt;/p&gt;

&lt;p&gt;Imagine for a moment, that you want to be able to set a variable, but if
it&amp;rsquo;s not set, you default to a known value. You&amp;rsquo;d rather do it on a
single line. One of my co-workers tried this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expand = defined?( expand ) ? expand : true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but &lt;code&gt;expand&lt;/code&gt; is &lt;em&gt;defined&lt;/em&gt; by being on the left hand side, BEFORE
the RHS is evaluated, so &lt;code&gt;defined?&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, but because expand
hasn&amp;rsquo;t got a value yet, it returns nil. I tried:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expand = true unless defined?(expand)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it doesn&amp;rsquo;t help either, which really shocked me.&lt;/p&gt;

&lt;p&gt;I always believed that the postfix-conditional was evaluated before even
beginning to evaluate the operation, but I was distinctly disabused of this
notion by testing. Note that ‘expand?&amp;rdquo; operator returns nil if its argument
(which can be an arbitrary expression) is not defined; otherwise it returns a
description of that argument. I don&amp;rsquo;t understand the reason for the behavior,
and I think it&amp;rsquo;s a bug, but I&amp;rsquo;d love to know a good language reason for it.&lt;/p&gt;

&lt;p&gt;I am sure that you would have noticed many other &lt;strong&gt;Ruby Quirks&lt;/strong&gt;. I&amp;rsquo;d
definitely like to hear and add them here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Information&lt;/strong&gt; Ruby is an open source thorough language of
utmost balance with combination of Perl, Smalltalk, Lisp, Ada and
Eiffel. With the recent developments in this language, most developers
use this language in the middle tier. Today is the era of developing
online business applications, [mobile software][3]: and its applications.
Most developers deploy their online applications after getting [business
web hosting][4] and then they market for these projects through
[affiliate marketing][5] campaigns or if they do not want to sell their
project they can use [ppc advertising][6] for earning some revenue or
can offer [ppc management][7] programs. When they are in the process of
development usually they [register domain][8] and use [domain
parking][9] facility, so that once their project is ready they can
instantly put it on the internet.&lt;/p&gt;

&lt;p&gt;Technorati Tags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://technorati.com/tag/Ruby+Quirks&#34;&gt;Ruby Quirks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[1]: &lt;a href=&#34;http://rubylearning.com/blog/2007/04/11/interview-shashank-date/&#34;&gt;http://rubylearning.com/blog/2007/04/11/interview-shashank-date/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[2]: &lt;a href=&#34;http://tech.groups.yahoo.com/group/puneruby/&#34;&gt;http://tech.groups.yahoo.com/group/puneruby/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[3]: &lt;a href=&#34;http://www.mysoftwarehubs.com&#34;&gt;http://www.mysoftwarehubs.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[4]: &lt;a href=&#34;http://www.envisionwebhosting.com&#34;&gt;http://www.envisionwebhosting.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[5]: &lt;a href=&#34;http://www.getaffiliates.net&#34;&gt;http://www.getaffiliates.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[6]: &lt;a href=&#34;http://www.qualifytraffic.com/Advertising-Info/PPC-Advertising.html&#34;&gt;http://www.qualifytraffic.com/Advertising-Info/PPC-Advertising.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[7]: &lt;a href=&#34;http://www.performanceppc.com&#34;&gt;http://www.performanceppc.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[8]: &lt;a href=&#34;http://www.namingwiz.com&#34;&gt;http://www.namingwiz.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[9]: &lt;a href=&#34;http://www.nationaldomainreg.com/Domain-Parking.html&#34;&gt;http://www.nationaldomainreg.com/Domain-Parking.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ruby Snips</title>
      <link>http://localhost:1313/blog/2007/02/24/ruby-snips/</link>
      <pubDate>Sat, 24 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/02/24/ruby-snips/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.puneruby.com/blog/?p=94&#34;&gt;Robert Evans&lt;/a&gt; has come up with the
&lt;strong&gt;&lt;a href=&#34;http://rubysnips.com/&#34;&gt;Ruby Snips&lt;/a&gt;&lt;/strong&gt; site. In his words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ruby Snips is an idea that I&amp;rsquo;ve had for a while, but only recently
have put together in my mind. I love Code Snippets, formerly owned by
Peter Cooper, but I&amp;rsquo;ve always found myself wishing to be able to
search the snippets easily and have a semi-brief explanation of the
snippet being displayed.&lt;/p&gt;

&lt;p&gt;Another aspect that has brought about this site is that I am always
learning new things that can be done with Ruby and I&amp;rsquo;d like to have a
centralized place of snippets with explanations and thoughts for
myself and for anyone else learning Ruby. This site isn&amp;rsquo;t terribly
unique in any sense, but rather another resource for the Ruby
community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Robert+Evans&#34;&gt;Robert Evans&lt;/a&gt;,
&lt;a href=&#34;http://technorati.com/tag/Ruby&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+Snips&#34;&gt;Ruby
Snips&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your favourite bit of Ruby code?</title>
      <link>http://localhost:1313/blog/2007/02/09/your-favourite-bit-of-ruby-code/</link>
      <pubDate>Fri, 09 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/02/09/your-favourite-bit-of-ruby-code/</guid>
      <description>&lt;p&gt;An interesting thread at Ruby_talk is &amp;lsquo;Your favorite bit of Ruby code.&amp;rsquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Setting aside time for &lt;a href=&#34;http://www.socialstudieshelp.com/topics/learning-html.html&#34;&gt;learning
HTML&lt;/a&gt; is
beneficial to any web host.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;mailto:john.carter@tait.co.nz&#34;&gt;John Carter&lt;/a&gt; from New Zealand has this
interesting snippet of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Ruby is Objects all the way down and open for extension...
class Integer
  def factorial
    return 1 if self &amp;lt;= 1
    self * (self-1).factorial
  end
end

puts 6.factorial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Ruby+code&#34;&gt;Ruby code&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert bytes to megabytes</title>
      <link>http://localhost:1313/blog/2007/02/06/convert-bytes-to-megabytes/</link>
      <pubDate>Tue, 06 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2007/02/06/convert-bytes-to-megabytes/</guid>
      <description>&lt;p&gt;In one of my projects, I need to find the file-size in megabytes again
and again. This simple method helps me to convert the size of a file in
bytes to megabytes. This is useful for very large files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MEGABYTE = 1024.0 * 1024.0
def bytesToMeg bytes
  bytes /  MEGABYTE
end

# big file
len = File.size(&amp;quot;Dreamweaver8-en.exe&amp;quot;)
puts len.to_s + &#39; bytes&#39;  # displays 62651176 bytes
puts bytesToMeg(len).to_s + &#39; MB&#39;  # displays 59.7488174438477 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;One of the uses for &lt;a href=&#34;http://www.investintech.com/&#34;&gt;PDF conversion&lt;/a&gt; is
that by going through the process of &lt;a href=&#34;http://www.oardc.ohio-state.edu/library/word_to_pdf.html&#34;&gt;converting PDF to
Word&lt;/a&gt; you’ll
have a more easily editable document than if you didn’t do &lt;a href=&#34;http://www.investintech.com/prod_a2d.htm&#34;&gt;PDF
conversion&lt;/a&gt; and tried to edit
a PDF file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The program code is pretty obvious and as you can see the method uses
division. However, it is best to wrap this functionality in a method.&lt;/p&gt;

&lt;p&gt;Technorati Tags: &lt;a href=&#34;http://technorati.com/tag/Convert+bytes+to+megabytes&#34;&gt;Convert bytes to
megabytes&lt;/a&gt;, &lt;a href=&#34;http://technorati.com/tag/Ruby+tricks&#34;&gt;Ruby
tricks&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>