<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginners on RubyLearning Blog</title>
    <link>http://rubylearning.com/blog/categories/beginners/</link>
    <description>Recent content in Beginners on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/blog/categories/beginners/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Felipe Elias Philipp Winner RPCFN - 1 (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn---1-reprint/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn---1-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 8th Oct. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;

  &lt;p class=&#34;alert&#34;&gt;
    In this brief interview, Satish Talim of RubyLearning talks to &lt;b&gt;Felipe Elias Philipp of Brazil&lt;/b&gt;, winner of the first-ever &lt;a href=&#34;http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-1-reprint/&#34;&gt;Ruby Programming Challenge For Newbies&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Felipe Elias Philipp&#34; src=&#34;http://rubylearning.com/images/profile2-125x125.jpg&#34; alt=&#34;Felipe Elias Philipp&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Welcome Felipe and thanks for taking out time to share your thoughts. For the benefit of the readers, could you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; Thanks Satish for the opportunity. Well, about me&amp;#8230; I&amp;#8217;m a Brazilian guy, a web developer and a Mac user. I&amp;#8217;m 22 years old and I started to program at school, since I was 16. Since then, programming has become my life and I can&amp;#8217;t imagine myself doing any other thing.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How did you get involved with Ruby programming?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; I discovered Ruby through Rails on a well-known website by Brazilians: iMasters. I was just amazed as it was so easy to understand the Ruby code and I could solve the problems in a very simple way. This got me very motivated and I became more interested in the subject. At that time, I was working with ASP and I was deciding whether to learn Java or .NET. By then, I had realized that Ruby was simpler and I decided to learn it.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you name three features of Ruby that you like the most, as compared to other languages? Why?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; One of the things that caught my attention was the fact that Ruby is an extremely dynamic language. The way I can open classes and add my own methods is one of the features I like most. Creating DSLs was something I had never seen before and which I found very interesting. These are some of the features I remember at the moment, although I like almost everything in the language.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How was experience of taking part in the Ruby Programming Challenge For Newbies (RPCFN)?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; Despite knowing Ruby for almost two years, I had never written more than 50 lines of code. I had not found a project that motivated me to practice. However the &lt;strong&gt;RPCFN&lt;/strong&gt; aroused me! Also, I enjoyed the challenge very much. I recommend everybody to take part in the &lt;strong&gt;RPCFN&lt;/strong&gt;. Even if you know the language, there is always something new to learn. I intend to participate in all the forthcoming challenges.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What are your future plans?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Felipe&gt;&gt;&lt;/strong&gt; I want to study Ruby and Rails deeper, and also learn other languages (Python and Erlang are already on my list). In the short ter, I intend to share whatever I learn about Ruby and about programming in general; perhaps starting my own blog or something else.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Felipe. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Felipe would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Average Arrival Time For A Flight - 2 Reprint</title>
      <link>http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight---2-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 8th Oct. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;h4&gt;
    RPCFN: Average Arrival Time For A Flight (#2)
  &lt;/h4&gt;
  
  &lt;h5&gt;
    By Chris Strom
  &lt;/h5&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Thank you for the very encouraging response to the &lt;a href=&#34;http://rubylearning.com/blog/2015/01/26/felipe-elias-philipp-winner-rpcfn-1-reprint/&#34;&gt;first-ever&lt;/a&gt; &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8220;. The second Ruby challenge is from Chris Strom.
  &lt;/p&gt;
  
  &lt;h3&gt;
    About Chris Strom
  &lt;/h3&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Chris Strom&#34; src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris Strom&#34; /&gt;Chris Strom (&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt; / &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;blog&lt;/a&gt;) in his day job, is the Director of Software Engineering for mdlogix, a small company in Baltimore, Maryland. They develop software that manages clinical research trials and associated data. They primarily code with Ruby on Rails. His background is in web development, mostly in Perl until ~2005 when he made the switch to Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    Chris has this to say about the challenge:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;em&gt;RPCFN is a good idea as reading books and documentation can only take you so far when learning a new language. To really learn, you need to use the language. RPCFN provides a fabulous forum for using Ruby in the form of regular, engaging (but not arcanely difficult) challenges. Better yet, it provides feedback on how to use Ruby well, as each fortnight the best solution to a challenge is chosen. RPCFN is a wonderful introduction to the Ruby language and to the Ruby community. Welcome newbies!&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    Sponsor
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#39;http://www.railsware.com/&#39;&gt;&lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/Railsware125x125.png&#39; width=&#34;125&#34; height=&#34;125&#34; style=&#34;border: 0px none ;&#34; alt=&#34;Railsware for premium-quality web applications&#34; title=&#34;Railsware for premium-quality web applications&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    This fortnights programming challenge is sponsored by &lt;strong&gt;&lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;&lt;/strong&gt;. Railsware is glad to support the Ruby Programming Challenge and help the Ruby community grow and get stronger.
  &lt;/p&gt;
  
  &lt;p&gt;
    Railsware is a product development company specializing in Ruby on Rails and UI design creating premium-quality web applications. The company works with startups and established businesses looking to build ecommerce, social networking, specialized business applications and many other products.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      The person with the best Ruby solution (if there is a tie between answers, then the one who posted first will be the winner) will be awarded any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The other prize, selected randomly amongst the remaining working Ruby solutions, will be awarded any &lt;b&gt;one&lt;/b&gt; of BDDCasts&amp;#8217; &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    The two persons who win, can&amp;#8217;t win again in the next immediate challenge but can still participate.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Ruby Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    You owe a big favor and have agreed to pick up a friend at the airport every Friday night. The airline on which your friend flies is cheap, but terrible with reporting delays and departure/arrival times. You soon realize that the 10pm flight is never on time and is usually late by more than an hour. If the plane has arrived at 11:15pm, 12:03am, 11:30pm, 11:23pm and 11:48pm, what is the average arrival time?
  &lt;/p&gt;
  
  &lt;p&gt;
    Does the solution still work if your friend changes to a flight arriving 6 hours later? What about 12 hours later?
  &lt;/p&gt;
  
  &lt;h4&gt;
    Program Output
  &lt;/h4&gt;
  
  &lt;p&gt;
    The output should look something like this when run from the console:
  &lt;/p&gt;
  
  &lt;pre&gt;&gt;&gt; average_time_of_day([&#34;11:51pm&#34;, &#34;11:56pm&#34;, &#34;12:01am&#34;, &#34;12:06am&#34;, &#34;12:11am&#34;])
=&gt; &#34;12:01am&#34;

&gt;&gt; average_time_of_day([&#34;6:41am&#34;, &#34;6:51am&#34;, &#34;7:01am&#34;])
=&gt; &#34;6:51am&#34;
&lt;/pre&gt;
  
  &lt;h4&gt;
    Hint
  &lt;/h4&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Your digital ways will not help you, time of day is cyclical.
    &lt;/li&gt;
    &lt;li&gt;
      You may need to use the &lt;b&gt;Math&lt;/b&gt; and &lt;b&gt;Time&lt;/b&gt; classes.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;Requirements&lt;/b&gt;: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems). You &lt;b&gt;do not&lt;/b&gt; need to build a gem for this. Pure Ruby code is all that is needed.
  &lt;/p&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    How to Enter the Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    Read the &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;. By participating in this challenge, you agree to be bound by these Challenge Rules. &lt;b&gt;It&amp;#8217;s free and &lt;a href=&#34;http://rubylearning.com/blog/wp-login.php?action=register&#34;&gt;registration&lt;/a&gt; is optional&lt;/b&gt;. You can enter the challenge just by posting the following as a comment to this blog post:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/#rpc5&#34;&gt;GIST URL of your Solution&lt;/a&gt; (i.e. Ruby code) with explanation and / or test cases:
    &lt;/li&gt;
    &lt;li&gt;
      Code works with Ruby 1.8 / 1.9 / Both:
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      As soon as we receive your GIST URL, we will fork your submission. This means that your solution is frozen and accepted. Please be sure that is the solution you want, as it is now recorded in time and is the version that will be evaluated.
    &lt;/li&gt;
    &lt;li&gt;
      All solutions posted would be hidden to allow participants to come up with their own solutions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;You should post your entries before midnight of 18th Oct. 2009 (Indian Standard Time). No new solutions will be accepted from 19th to 22nd Oct. 2009.&lt;/b&gt;
    &lt;/li&gt;
    &lt;li&gt;
      On Monday, 19th Oct. 2009 all the solutions will be thrown open for everyone to see and comment upon.
    &lt;/li&gt;
    &lt;li&gt;
      The winning entries will be announced on this blog on 22nd Oct. The winners will be sent their prizes by email.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    More details on the RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Please refer to the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; for answers to the following questions:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies (RPCFN)?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit you?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc6&#34;&gt;Challenge Rules&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best Solution&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge Topic?&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://japhr.blogspot.com/&#34;&gt;Chris Strom&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Sponsor &lt;a href=&#34;http://www.railsware.com/&#34;&gt;Railsware&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Jeff Schoolcraft of &lt;a href=&#34;http://bddcasts.com/&#34;&gt;BDDCasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The RubyLearning team, namely Dave Lilley (New Zealand), Jeff Savin (Canada), &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://giordano.scalzo.biz/2009/10/10/entering-rpcfn-2/&#34;&gt;Giordano Scalzo&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://jonathanjulian.com/2009/10/i-just-entered-rpcfn-2/&#34;&gt;Jonathan Julian&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.loicpaillotin.com/2009/10/getting-back-in-shape.html&#34;&gt;Loïc Paillotin&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have any doubts / questions about the challenge (the current problem statement), please post them as comments to this post and the author will reply asap.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Participants
  &lt;/h3&gt;
  
  &lt;p&gt;
    There are two categories of participants. Some are vying for the prizes and some are participating for the fun of it.
  &lt;/p&gt;
  
  &lt;h4&gt;
    In the competition
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      Othmane Benkirane, Morocco &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Tisho Georgiev, Bulgaria
    &lt;/li&gt;
    &lt;li&gt;
      Pete Campbell, USA
    &lt;/li&gt;
    &lt;li&gt;
      Jonathan Julian, USA
    &lt;/li&gt;
    &lt;li&gt;
      Antonio, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Robison WR Santos, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Ricardo Duarte, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Paul Barry, USA
    &lt;/li&gt;
    &lt;li&gt;
      Haris Amin, USA
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/10/22/charles-feduke-winner-rpcfn-2/&#34;&gt;Charles Feduke&lt;/a&gt;, USA &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Oliver, UK
    &lt;/li&gt;
    &lt;li&gt;
      Bryan Liles, USA
    &lt;/li&gt;
    &lt;li&gt;
      Gunther Diemant, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Valério Farias, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Vikas Maskeri, India
    &lt;/li&gt;
    &lt;li&gt;
      Jiren Patel, India
    &lt;/li&gt;
    &lt;li&gt;
      Stefan, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Ahmed Al Hafoudh, Slovakia
    &lt;/li&gt;
    &lt;li&gt;
      Tom Voltz, USA
    &lt;/li&gt;
    &lt;li&gt;
      David Jenkins, USA
    &lt;/li&gt;
    &lt;li&gt;
      Michael Lang, USA
    &lt;/li&gt;
    &lt;li&gt;
      Thiago Fernandes Massa, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Tim Rand, USA
    &lt;/li&gt;
    &lt;li&gt;
      Milan Dobrota, Serbia
    &lt;/li&gt;
    &lt;li&gt;
      Mike Hodgson, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Brad O&amp;#8217;Connor, Australia
    &lt;/li&gt;
    &lt;li&gt;
      Giordano Scalzo, Italy
    &lt;/li&gt;
    &lt;li&gt;
      Rainer Thiel, New Zealand
    &lt;/li&gt;
    &lt;li&gt;
      Todd Huss, USA
    &lt;/li&gt;
    &lt;li&gt;
      Pankaj Sisodiya, India
    &lt;/li&gt;
    &lt;li&gt;
      Loïc Paillotin, USA
    &lt;/li&gt;
    &lt;li&gt;
      Chuck Ha, USA
    &lt;/li&gt;
    &lt;li&gt;
      Josh Baxley, USA
    &lt;/li&gt;
    &lt;li&gt;
      Javier Blanco Gutiérrez, Spain
    &lt;/li&gt;
    &lt;li&gt;
      Sogo Ohta, Japan
    &lt;/li&gt;
    &lt;li&gt;
      Daniel Wanek, USA
    &lt;/li&gt;
    &lt;li&gt;
      Himansu Desai, USA
    &lt;/li&gt;
    &lt;li&gt;
      John McDonald, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Miller, UK
    &lt;/li&gt;
    &lt;li&gt;
      Sriram Varahan, India
    &lt;/li&gt;
    &lt;li&gt;
      Conner Peirce, USA
    &lt;/li&gt;
    &lt;li&gt;
      Ben Marini, USA
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h4&gt;
    Just for Fun
  &lt;/h4&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Michael Kohl, Austria
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper, UK&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Winners
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/winner_icon_1.png&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Winners&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Congratulations to the winners of this Ruby Challenge. They are:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Charles Feduke&lt;/b&gt; from USA (his &lt;a href=&#34;https://gist.github.com/5b371226faf83af50d7e&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; the person with the best Ruby solution. He wins any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Othmane Benkirane&lt;/b&gt; from Morocco (his &lt;a href=&#34;http://gist.github.com/205002&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; selected randomly amongst the remaining working Ruby solutions. He wins any &lt;b&gt;one&lt;/b&gt; of BDDCasts’ &lt;a href=&#39;http://bddcasts.com/&#39;&gt;screencasts&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h3&gt;
    Previous Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-1-reprint/&#34;&gt;RPCFN: Shift Subtitle (#1)&lt;/a&gt; by Fabio Akita.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Next Challenge
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2009/10/30/rpcfn-short-circuit-3/&#34;&gt;RPCFN: Short Circuit (#3)&lt;/a&gt; by Gautam Rege.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignleft&#34; src=&#39;http://rubylearning.com/images/update.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;This Challenge is now closed&lt;/b&gt;. &lt;b&gt;Chris Strom&lt;/b&gt; has a &lt;a href=&#34;https://gist.github.com/4f6807eef49064027a3c&#34;&gt;working solution to this problem&lt;/a&gt;. This is not a &amp;#8220;perfect&amp;#8221; or the sole &amp;#8220;correct&amp;#8221; solution, but just one way of doing it.
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom has written a blog post that talks about the &lt;a href=&#34;http://japhr.blogspot.com/2009/10/newbie-feedback.html&#34;&gt;most common &amp;#8220;issues&amp;#8221; faced by Ruby beginners&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The (#3) challenge by &lt;b&gt;Gautam Rege, India&lt;/b&gt; is scheduled for 1st Nov. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#4) challenge by &lt;b&gt;Michael Kohl, Austria&lt;/b&gt; is scheduled for 1st Dec. 2009.
    &lt;/li&gt;
    &lt;li&gt;
      The (#5) challenge by &lt;b&gt;&lt;a href=&#34;http://rubyinside.com/&#34;&gt;Peter Cooper&lt;/a&gt;, UK&lt;/b&gt; is scheduled for 1st Jan. 2010.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Ruby Programming Challenge For Newbies (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/25/rpcfn-ruby-programming-challenge-for-newbies-reprint/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/25/rpcfn-ruby-programming-challenge-for-newbies-reprint/</guid>
      <description>&lt;div&gt;
  &lt;h3&gt;
    RPCFN: Ruby Programming Challenge For Newbies
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 20th Sept. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    After a &lt;a href=&#34;http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/&#34;&gt;very encouraging response to our poll&lt;/a&gt; from YOU, the readers of the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, RL is happy to announce the first-ever &lt;b&gt;fortnightly&lt;/b&gt; (every 14 days) &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8221; that starts on &lt;b&gt;Friday, 25th Sept. 2009&lt;/b&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What Is The RPCFN?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    The RPCFN is a fortnightly (every 14 days) programming challenge for &lt;strong&gt;Ruby Newbies&lt;/strong&gt; in the spirit of the &lt;a href=&#34;http://rubyquiz.com/&#34;&gt;Ruby Quiz&lt;/a&gt;. A new RPCFN will be posted on this &lt;a href=&#34;http://rubylearning.com/blog/&#34;&gt;RubyLearning blog&lt;/a&gt; every alternate Friday, starting 25th Sept. 2009. The contest is open to individuals only and you are invited to contribute solution(s) and/or discussion(s) as comments to the respective blog post. 13 days after the RPCFN is posted (i.e. on a Thursday), all the solutions will be thrown open for everyone to see and comment upon. The next day i.e. Friday, the cycle begins again. The Ruby working solution(s) should be clear-cut, follow Ruby conventions and still be easy to understand.
  &lt;/p&gt;
  
  &lt;h3&gt;
    How does RPCFN benefit you?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2009/07/15/chris-strom-how-do-i-learn-and-master-sinatra/&#34;&gt;Chris Strom&lt;/a&gt; (&lt;a title=&#34;twitter&#34; href=&#34;http://twitter.com/eee_c&#34;&gt;twitter&lt;/a&gt;&amp;nbsp;/&amp;nbsp;&lt;a title=&#34;blog&#34; href=&#34;http://japhr.blogspot.com&#34;&gt;blog&lt;/a&gt;) is one of the problem setters for the RPCFN and has this to say:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      RPCFN is a good idea as reading books and documentation can only take you so far when learning a new language. To really learn, you need to use the language. RPCFN provides a fabulous forum for using Ruby in the form of regular, engaging (but not arcanely difficult) challenges. Better yet, it provides feedback on how to use Ruby well, as each fortnight the best solution to a challenge is chosen. RPCFN is a wonderful introduction to the Ruby language and to the Ruby community. Welcome newbies!
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    How to Enter
  &lt;/h3&gt;
  
  &lt;p&gt;
    It&amp;#8217;s free. You can enter the challenge by posting the following as a comment to the Ruby challenge blog post that will appear every alternate Friday, starting 25th Sept. 2009:
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address:
    &lt;/li&gt;
    &lt;li&gt;
      URL of your 125&amp;#215;125 real photo (optional):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do:
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      Your Solution (i.e. Ruby code):
    &lt;/li&gt;
    &lt;li&gt;
      Explanation (if any):
    &lt;/li&gt;
    &lt;li&gt;
      Test cases (if any):
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: All solutions posted would be hidden to allow users to come up with their own solutions. The solutions will be revealed only after a winner is chosen.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Notification
  &lt;/h3&gt;
  
  &lt;p&gt;
    The winning entries will be announced on this blog. The winners will be sent their prizes by email.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;
  
  &lt;p&gt;
    There will normally be two prizes (though we reserve the right to change this for each challenge). One prize will be awarded for the best solution (if there is a tie between answers, then the one who posted first will be the winner) and the other will be decided by randomly selecting one person from all the remaining working solutions for that fortnight (14 days). If a person wins he/she can’t win again in the next, immediate challenge but can still participate. Prizes can range from small cash rewards to free PDFs &amp;#8211; whatever the sponsors of the challenge have offered.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Sponsors
  &lt;/h3&gt;
  
  &lt;p&gt;
    Any individual or companies interested in sponsoring the fortnightly event are welcome. Please contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;h3&gt;
    Donations
  &lt;/h3&gt;
  
  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;
  
  &lt;p&gt;
    Special thanks to the RubyLearning team, namely &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
  &lt;/p&gt;
  
  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;
  
  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RPCFN: Shift Subtitle Reprint</title>
      <link>http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-reprint/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/25/rpcfn-shift-subtitle-reprint/</guid>
      <description>&lt;div&gt;
  &lt;h3&gt;
    Ruby Programming Challenge For Newbies
  &lt;/h3&gt;

  &lt;h4&gt;
    RPCFN: Shift Subtitle (#1)
  &lt;/h4&gt;

  &lt;h5&gt;
    By Fabio Akita
  &lt;/h5&gt;

  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 24th Sept. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;

  &lt;p class=&#34;update&#34;&gt;
    After a &lt;a href=&#34;http://rubylearning.com/blog/2015/01/13/poll-ruby-problems-for-beginners-and-prizes-reprint/&#34;&gt;very encouraging response to our poll&lt;/a&gt; from YOU, the readers of the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, RL is happy to announce the first-ever &lt;b&gt;fortnightly&lt;/b&gt; ( bi-weekly / every 14 days) &amp;#8220;&lt;strong&gt;Ruby Programming Challenge For Newbies (RPCFN)&lt;/strong&gt;&amp;#8221; in Ruby. Thanks to YOU, the Ruby community, people like Fabio Akita and companies like Locaweb who make all of this possible.
  &lt;/p&gt;

  &lt;h3&gt;
    About Fabio Akita
  &lt;/h3&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Fabio Akita&#34; src=&#34;http://rubylearning.com/images/akita.jpg&#34; alt=&#34;Fabio Akita&#34; /&gt;&lt;strong&gt;Fabio Akita&lt;/strong&gt; is a Brazilian Rails enthusiast, also known online as &amp;#8220;AkitaOnRails&amp;#8221;. He regularly write posts on his own &lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;blog&lt;/a&gt; and had published the very first book tailored for the Brazilian audience called &amp;#8220;Repensando a Web com Rails&amp;#8221;.
  &lt;/p&gt;

  &lt;p&gt;
    He is now a full-time Ruby on Rails developer working as Project Manager at &lt;a href=&#34;http://www.locaweb.com/default.html?utm_campaign=Rails&amp;utm_source=rubylearning&amp;utm_medium=quadrado&#34;&gt;Locaweb&lt;/a&gt;, Brazil. He&amp;#8217;s also the creator of the &amp;#8220;&lt;a href=&#34;http://www.railssummit.com.br/&#34;&gt;Rails Summit Latin America&lt;/a&gt;&amp;#8220;, the largest international Rails event in South America.
  &lt;/p&gt;

  &lt;p&gt;
    Fabio has this to say about the challenge:
  &lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;em&gt;If you&amp;#8217;re learning a new language such as Ruby, it is important that you practice it. And the best way to start is by scratching your own itch. Anything goes. It&amp;#8217;s not unusual to start by writing simple command line scripts to help out your everyday routine. That&amp;#8217;s why I thought of a very trivial exercise in the first challenge. It should demand that you know the basics for a variety of Ruby subjects such as regular expressions, file manipulation, time calculation and so on. The only way to achieve mastery is by practice. So let&amp;#8217;s get started!&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;h3&gt;
    Sponsor
  &lt;/h3&gt;

  &lt;p&gt;
    &lt;a href=&#39;http://www.1steasy.com/ruby-on-rails.htm&#39;&gt;&lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubylearning125.gif&#39; width=&#34;125&#34; height=&#34;125&#34; style=&#34;border: 0px none ;&#34; alt=&#34;UK based Passenger Hosting&#34; title=&#34;UK based Passenger Hosting&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;&lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt;&lt;/strong&gt; are delighted to have been given the opportunity to support the work of Satish Talim and his team at RubyLearning.
  &lt;/p&gt;

  &lt;p&gt;
    Taking part in the Ruby Programming Challenge? You’re welcome to take advantage of the free &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm&#34;&gt;Ruby on Rails hosting trials&lt;/a&gt; that 1st Easy offer: simply register your details, and a full-featured account is yours to do with as you please for one month. Once the trial is over, you can transfer your work to a paid account, or walk away with no questions asked!
  &lt;/p&gt;

  &lt;h3&gt;
    Prizes
  &lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      The person with the best Ruby solution (if there is a tie between answers, then the one who posted first will be the winner) will be awarded any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The other prize, selected randomly amongst the remaining working Ruby solutions, will be awarded any &lt;b&gt;one&lt;/b&gt; of Pragmatic&amp;#8217;s &lt;a href=&#39;http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming&#39;&gt;The Ruby Object Model and Metaprogramming&lt;/a&gt; screencasts.
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
    The two persons who win, can&amp;#8217;t win again in the next immediate challenge but can still participate.
  &lt;/p&gt;

  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Ruby Challenge
  &lt;/h3&gt;

  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/rubypc.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;RPCFN&#34; title=&#34;Ruby Programming Challenge For Newbies&#34; /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Difficulty&lt;/b&gt;: Ruby beginner.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Goals&lt;/b&gt;: Basic control over Ruby elements, specially command line scripting.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Description&lt;/b&gt;: There are several ways to subtitle a movie nowadays, and one of the most well known format is the SubRip format (&lt;a href=&#34;http://en.wikipedia.org/wiki/SubRip&#34;&gt;http://en.wikipedia.org/wiki/SubRip&lt;/a&gt;). It has entries like these:
  &lt;/p&gt;

  &lt;pre&gt;645
01:31:51,210 --&gt; 01:31:54,893
the government is implementing a new policy...

646
01:31:54,928 --&gt; 01:31:57,664
In connection with a dramatic increase
in crime in certain neighbourhoods,
&lt;/pre&gt;

  &lt;p&gt;
    Each line has an increasing integer identification, then comes the time range (start and end time) in the format &amp;#8220;hours:minutes:seconds,milliseconds&amp;#8221;. The decimal separator used is the comma. Finally there are the subtitles themselves and a line break marks the end of an entry.
  &lt;/p&gt;

  &lt;p&gt;
    Sometimes the timing is shifted for a small amount, 2 or 3 seconds. Then comes the trouble when you need to shift everything a few seconds back or ahead.
  &lt;/p&gt;

  &lt;p&gt;
    The goal is to create a small command line script in Ruby that will read an SRT file, and output another one with the new calculated times.
  &lt;/p&gt;

  &lt;p&gt;
    So, for example, if I want to shift everything 2,500 (2 seconds and 500 milliseconds) ahead, I would start with this:
  &lt;/p&gt;

  &lt;pre&gt;01:32:04,283 --&gt; 01:32:07,769
&lt;/pre&gt;

  &lt;p&gt;
    and end up with:
  &lt;/p&gt;

  &lt;pre&gt;01:32:06,783 --&gt; 01:32:10,269
&lt;/pre&gt;

  &lt;p&gt;
    The command line should accept arguments such as:
  &lt;/p&gt;

  &lt;pre&gt;shift_subtitle --operation add --time 02,110 input_file output_file
&lt;/pre&gt;

  &lt;p&gt;
    This means &amp;#8220;&amp;#45;&amp;#45;operation&amp;#8221; can accept either &amp;#8216;add&amp;#8217; or &amp;#8216;sub&amp;#8217; to add or subtract times. The &amp;#8220;&amp;#45;&amp;#45;time&amp;#8221; will accept the amount of time to shift in the format 11,222 where &amp;#8220;11&amp;#8221; is the amount of seconds and &amp;#8220;222&amp;#8221; the amount of milliseconds.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Requirements&lt;/b&gt;: This has to be a pure Ruby script, using only the Ruby Standard Libraries (meaning, no external Gems).
  &lt;/p&gt;

  &lt;p&gt;
    It has to implement &amp;#8220;optparse&amp;#8221; to parse the command line arguments.
  &lt;/p&gt;

  &lt;p&gt;
    As an observation, bear in mind that the first thing that you might attempt will look like this:
  &lt;/p&gt;

  &lt;pre&gt;a = Time.at(04,283)
b = a + 2.500
puts b.usec
=&gt; 500283
&lt;/pre&gt;

  &lt;p&gt;
    This is wrong, the proper result should&amp;#8217;ve been &amp;#8220;783&amp;#8221; (as in the example in the previous section). So it means that you will have to find another way out.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Extras (Optional)&lt;/b&gt;: If you want:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      It would be interesting to exercise the process of a Gem creation. So you would have to package your script.
    &lt;/li&gt;
    &lt;li&gt;
      Another thing that would be good is to have RSpec unit tests covering your code, to exercise software development best practices.
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
    &lt;b&gt;(Note that the above two points are optional and not a requirement).&lt;/b&gt;
  &lt;/p&gt;

  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    How to Enter the Challenge
  &lt;/h3&gt;

  &lt;p&gt;
    &lt;b&gt;It&amp;#8217;s free and registration is not required&lt;/b&gt;. You can enter the challenge just by posting the following as a comment to this blog post:
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      Your name:
    &lt;/li&gt;
    &lt;li&gt;
      Email address (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Brief description of what you do (will not be published):
    &lt;/li&gt;
    &lt;li&gt;
      Country of Residence:
    &lt;/li&gt;
    &lt;li&gt;
      Your Solution (i.e. Ruby code): Prefix your code with &lt;pre&gt; tag and suffix it with &lt;/pre&gt; tag.
    &lt;/li&gt;
    &lt;li&gt;
      Code works with Ruby 1.8 / 1.9 / Both:
    &lt;/li&gt;
    &lt;li&gt;
      Explanation (if any):
    &lt;/li&gt;
    &lt;li&gt;
      Test cases (if any):
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      You may provide the URL of your source code, in case it is hosted on GitHub.
    &lt;/li&gt;
    &lt;li&gt;
      All solutions posted would be hidden to allow users to come up with their own solutions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;You should post your entries before midnight of 4th Oct. 2009 (Indian Standard Time). No new solutions will be accepted from 5th to 8th Oct. 2009.&lt;/b&gt;
    &lt;/li&gt;
    &lt;li&gt;
      On Monday, 5th Oct. 2009 all the solutions will be thrown open for everyone to see and comment upon.
    &lt;/li&gt;
    &lt;li&gt;
      The winning entries will be announced on this blog. The winners will be sent their prizes by email.
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;
    More details on the RPCFN?
  &lt;/h3&gt;

  &lt;p&gt;
    Please refer to the &lt;b&gt;&lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/&#34;&gt;RPCFN FAQ&lt;/a&gt;&lt;/b&gt; for answers to the following questions:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc1&#34;&gt;What Is The Ruby Programming Challenge For Newbies (RPCFN)?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc2&#34;&gt;How does RPCFN benefit you?&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc3&#34;&gt;Best Solution&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/ruby-programming-challenge-faq/index.php#rpc4&#34;&gt;Can I Submit A Ruby Programming Challenge Topic?&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;
    Donations
  &lt;/h3&gt;

  &lt;p&gt;
    RPCFN is entirely financed by RubyLearning and sometimes sponsors, so if you enjoy solving Ruby problems and would like to give something back by helping with the running costs then any donations are gratefully received.
  &lt;/p&gt;

  &lt;h3&gt;
    Acknowledgements
  &lt;/h3&gt;

  &lt;p&gt;
    Special thanks to:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.akitaonrails.com/&#34;&gt;Fabio Akita&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Sponsor &lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt;, U.K.
    &lt;/li&gt;
    &lt;li&gt;
      The RubyLearning team, namely &lt;a href=&#34;http://citizen428.net/&#34;&gt;Michael Kohl&lt;/a&gt; (Austria), Peter Crawford (Italy), Satoshi Asakawa (Japan) and Victor Goff (USA).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.rubyinside.com.br/participe-do-desafio-do-ruby-learning-e-concorra-a-premios-2227&#34;&gt;Ruby Inside, Brazil&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://ruby.about.com/b/2009/10/02/have-you-tried-the-ruby-programming-challenge-for-newbies-yet.htm&#34;&gt;Amanda and Michael&amp;#8217;s Ruby Blog&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://redshinythings.blogspot.com/2009/10/ruby-challenge.html&#34;&gt;Adrian&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.deploymentzone.com/2009/09/29/temp-files-and-ruby-1-8-6-on-windows/&#34;&gt;Charles Feduke&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://blog.kreusch.com.br/post/199158389/my-ruby-programming-challenge-for-newbies-1-entry&#34;&gt;Fabio Kreusch&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.fernandoquadro.com.br/html/2009/09/25/desafio-ruby-learning-participe-e-concorra-a-premios/&#34;&gt;Fernando Quadro&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://charpcfn.wordpress.com/2009/10/06/shift-subtitle-results/&#34;&gt;It&amp;#8217;s so shiny&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://blog.foxxtrot.net/2009/09/ruby-programming-challenge-for-newbies.html&#34;&gt;Jeff Craig&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;
    Questions?
  &lt;/h3&gt;

  &lt;p&gt;
    Contact Satish Talim at &lt;a href=&#34;mailto:satish.talim@gmail.com&#34;&gt;satish.talim@gmail.com&lt;/a&gt; OR if you have any doubts / questions about the challenge (the current problem statement), please post them as comments to this post and the author will reply asap.
  &lt;/p&gt;

  &lt;h3&gt;
    The Participants
  &lt;/h3&gt;

  &lt;p&gt;
    There are two categories of participants. Some are vying for the prize and some are participating for the fun of it. The participants were:
  &lt;/p&gt;

  &lt;h4&gt;
    In the competition
  &lt;/h4&gt;

  &lt;ol&gt;
    &lt;li&gt;
      Felipe Giotto, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Eduardo, Brazil
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      Kalle Lindström, Sweden &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Robison WR Santos, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Aldric, USA
    &lt;/li&gt;
    &lt;li&gt;
      Akshay Gupta, India
    &lt;/li&gt;
    &lt;li&gt;
      Fabio Kreusch, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Chris Jones, USA
    &lt;/li&gt;
    &lt;li&gt;
      Chuck Ha, USA
    &lt;/li&gt;
    &lt;li&gt;
      Milan Dobrota, Serbia
    &lt;/li&gt;
    &lt;li&gt;
      Parag Shah, India
    &lt;/li&gt;
    &lt;li&gt;
      Hugo Figueiredo, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      John McDonald, USA
    &lt;/li&gt;
    &lt;li style=&#34;color:#0000FF;&#34;&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/10/08/felipe-elias-philipp-winner-rpcfn-1/&#34;&gt;Felipe Elias Philipp&lt;/a&gt;, Brazil &amp;#8211; declared winner
    &lt;/li&gt;
    &lt;li&gt;
      Charles Feduke, USA
    &lt;/li&gt;
    &lt;li&gt;
      Hari Rajagopal, USA
    &lt;/li&gt;
    &lt;li&gt;
      Brad O&amp;#8217;Connor, Australia
    &lt;/li&gt;
    &lt;li&gt;
      Oliver, UK
    &lt;/li&gt;
    &lt;li&gt;
      Jacob Lichner, USA
    &lt;/li&gt;
    &lt;li&gt;
      Todd Huss, USA
    &lt;/li&gt;
    &lt;li&gt;
      Antonio, Canada
    &lt;/li&gt;
    &lt;li&gt;
      Sriram Varahan, India
    &lt;/li&gt;
    &lt;li&gt;
      Giordano Scalzo, Italy
    &lt;/li&gt;
    &lt;li&gt;
      Phil Kates, USA
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;h4&gt;
    Just for Fun
  &lt;/h4&gt;

  &lt;ol&gt;
    &lt;li&gt;
      Michael Kohl, Austria
    &lt;/li&gt;
    &lt;li&gt;
      Rodrigo Rosenfeld Rosas, Brazil
    &lt;/li&gt;
    &lt;li&gt;
      Dominik Honnef, Germany
    &lt;/li&gt;
    &lt;li&gt;
      Mike Hodgson, Canada
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;h3 style=&#34;color:#0000FF;&#34;&gt;
    The Winners
  &lt;/h3&gt;

  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#39;http://rubylearning.com/images/winner_icon_1.png&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Winners&#34; /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    Congratulations to the winners of this Ruby Challenge. They are:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Felipe Elias Philipp&lt;/b&gt; from Brazil (his &lt;a href=&#34;http://github.com/felipeelias/shift_subtitle&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; the person with the best Ruby solution. He wins any &lt;b&gt;one&lt;/b&gt; of PeepCode&amp;#8217;s &lt;a href=&#34;http://peepcode.com/screencasts/ruby-on-rails&#34;&gt;Ruby on Rails screencasts&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Kalle Lindström&lt;/b&gt; from Sweden (his &lt;a href=&#34;https://gist.github.com/fa3ec5afe7b19d22c44a&#34;&gt;Ruby Challenge solution&lt;/a&gt;) &amp;#8211; selected randomly amongst the remaining working Ruby solutions. He wins any &lt;b&gt;one&lt;/b&gt; of Pragmatic&amp;#8217;s &lt;a href=&#39;http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming&#39;&gt;The Ruby Object Model and Metaprogramming&lt;/a&gt; screencasts.
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;
    Next Challenge
  &lt;/h3&gt;

  &lt;p&gt;
    &lt;a href=&#34;http://rubylearning.com/blog/2015/01/26/rpcfn-average-arrival-time-for-a-flight-2-reprint/&#34;&gt;RPCFN: Average Arrival Time For A Flight (#2)&lt;/a&gt; by Chris Strom.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;img class=&#34;alignleft&#34; src=&#39;http://rubylearning.com/images/update.jpg&#39; style=&#34;border: 0px none ;&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;The Challenge is now closed&lt;/b&gt;. &lt;b&gt;Fabio Akita&lt;/b&gt; has a &lt;a href=&#34;http://github.com/akitaonrails/Shift-Subtitle&#34;&gt;working solution to this problem&lt;/a&gt;. This is not a &amp;#8220;perfect&amp;#8221; or the sole &amp;#8220;correct&amp;#8221; solution, but just one way of doing it. Fabio is thankful to &lt;b&gt;Satoshi Asakawa&lt;/b&gt; for using one of his ideas in this implementation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What are the Twelve Rules of Sinatra? (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/24/what-are-the-twelve-rules-of-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 19th July. 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The Twelve Rules of Sinatra
  &lt;/h3&gt;
  
  &lt;p class=&#34;update center&#34;&gt;
    &lt;strong&gt;The Twelve Rules of Sinatra: &lt;a href=&#34;http://rubylearning.com/data/Sinatra12Rules.pdf&#34;&gt;Download this as a Free Report&lt;/a&gt;.&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Recently, I was reading Scott Adams&amp;#8217; (of Dilbert fame) blog post &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/rule_of_twelve&#34;&gt;Rule of Twelve&lt;/a&gt;&amp;#8221; where he stated:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      The Rule of Twelve states that if you know twelve concepts about a given topic you will look like an expert to people who only know two or three. If you learn more than twelve concepts about a topic, the value of each additional one drops off considerably. Allow me to be the first to confess that twelve is not a magic and inviolable number.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    He also wrote a follow-up post to support his statement: &amp;#8220;&lt;a href=&#34;http://www.dilbert.com/blog/entry/twelve_rules_of_energy_efficient_building/&#34;&gt;Twelve Rules of Energy Efficient Building&lt;/a&gt;&amp;#8220;.
  &lt;/p&gt;
  
  &lt;p&gt;
    This made me wonder, could we apply the same &amp;#8220;Rule of Twelve&amp;#8221; to &lt;strong&gt;Sinatra&lt;/strong&gt;?
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Jeremy Evans&#34; src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy Evans&#34; /&gt;Here is &lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy Evans&amp;#8217;&lt;/a&gt;&lt;/strong&gt; take on this:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Just like Rails, keep your controller/actions simple, and put most of your business logic in your models. This makes testing and code reuse easier.
    &lt;/li&gt;
    &lt;li&gt;
      Also like Rails, avoid excess logic in your views. Add helper methods that the views call to keep the views clean.
    &lt;/li&gt;
    &lt;li&gt;
      Unlike Rails, read the Sinatra source. The main part is a single file that&amp;#8217;s around 1000 lines of quite understandable Ruby code. Just reading it will probably make you a better programmer.
    &lt;/li&gt;
    &lt;li&gt;
      If you have a problem that you think other people probably have (e.g. a Rails-like flash), look first for a Rack middleware that handles it, rather than recreating the wheel.
    &lt;/li&gt;
    &lt;li&gt;
      Untested code will probably break sooner than later, so if you want the code to work in the future, write tests.
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Well, Jeremy has set the ball rolling. &lt;b&gt;What&amp;#8217;s your take on this?&lt;/b&gt; Kindly post your thoughts as comments to this blog post. Looking forward to some interesting read.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>20&#43; Rubyists are using Sinatra - Do you? (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/20-rubyists-are-using-sinatra---do-you-reprint/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This first appeared on 29th June 2009 and is being reprinted
as the original is not accessible.&lt;/p&gt;

&lt;h3 id=&#34;20-rubyists-are-using-sinatra-do-you:b9d73662ccbad47811ad53b639d84c77&#34;&gt;20+ Rubyists are using Sinatra – Do you?&lt;/h3&gt;

&lt;p&gt;With &lt;strong&gt;Sinatra&lt;/strong&gt; you can quickly create your own tiny web-applications
in Ruby and write lots of small services. RubyLearning caught up with
some Rubyists working with Sinatra and asked them as to why, how and
where they use &lt;em&gt;Sinatra&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AaronQuint.jpg&#34; alt=&#34;Aaron
Quint&#34; title=&#34;Aaron Quint&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/aq&#34;&gt;Aaron
Quint&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’ve been using Sinatra all over the
place. With &lt;a href=&#34;http://code.quirkey.com/vegas/&#34;&gt;Vegas&lt;/a&gt; I’ve been using it
as a way to provide simple web interfaces to existing code. I’ve also
been using it to prototype new application ideas. When not using
Sinatra, I’ve been using some of the same basic ideas in JavaScript with
&lt;a href=&#34;http://code.quirkey.com/sammy/&#34;&gt;Sammy.js&lt;/a&gt;. In general, Sinatra is just
fun to use as it provides the most direct and clean route to get an idea
or a piece of code on the web. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/20/interview-aaron-quint-on-sinatra/&#34;&gt;Read Aaron’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/AdamKeys.jpg&#34; alt=&#34;Adam
Keys&#34; title=&#34;Adam Keys&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/therealadam&#34;&gt;Adam
Keys&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m using Sinatra for two
things. For personal stuff, I always reach for Sinatra when I want to
prototype an idea. It’s easy to get something in place so I can iterate
on the idea quickly. Sinatra is great for deploying prototypes too!&lt;/p&gt;

&lt;p&gt;At FiveRuns, we use Sinatra as the API endpoint for Dash. We’ve got
hundreds of clients in our public beta sending custom metrics to Dash
once a minute. Sinatra has handled this load with aplomb. Further,
because our API is just a few URL endpoints, Sinatra’s minimal API is a
perfect match for our needs. &lt;a href=&#34;http://rubylearning.com/blog/2009/03/03/interview-adam-keys-on-sinatra/&#34;&gt;Read Adam’s interview on
Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/nelstrom-125.jpg&#34; alt=&#34;Andrew
Neil&#34; title=&#34;Andrew Neil&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;Andrew
Neil&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;a href=&#34;http://all-sorts.org/&#34;&gt;All
Sorts&lt;/a&gt; searches Twitter every minute for the
&lt;a href=&#34;http://search.twitter.com/search?q=%23collectivenouns&#34;&gt;#collectivenouns&lt;/a&gt;
hashtag, then parses matching tweets to identify collective nouns. The
requirements were very simple – no user log in, no CRUD, only a handful
of models and routes – so Sinatra was the perfect choice for this
project. I took Nick Plante’s
&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt; source as a
starting point, which proved to be an excellent introduction to Sinatra
and DataMapper. Part of the appeal, of course, was to dabble with new
technologies. The live site runs on passenger, with Rack::Cache taking
care of the caching.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/bruno.jpg&#34; alt=&#34;Bruno
Miranda&#34; title=&#34;Bruno Miranda&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/brupm&#34;&gt;Bruno
Miranda&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra on a url
shortner app that I wrote at &lt;a href=&#34;http://s.bopia.com/&#34;&gt;s.bopia.com&lt;/a&gt; as well
as a proxy app that processes beanstalkd queue items for
&lt;a href=&#34;http://mx.msn.cyloop.com/&#34;&gt;mx.msn.cyloop.com&lt;/a&gt;. Sinatra is a great tool
to accomplish small tasks as a minimal layer on top of http protocol.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/chris_strom.jpg&#34; alt=&#34;Chris
Strom&#34; title=&#34;Chris Strom&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;Chris
Strom&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I am using Sinatra most
prominently to serve up my family’s cookbook, backed by a CouchDB store.
Excruciating details on how I do this are contained in a series of blog
posts starting with:
&lt;a href=&#34;http://japhr.blogspot.com/2009/03/my-chain.html&#34;&gt;http://japhr.blogspot.com/2009/03/my-chain.htm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I chose Sinatra because it felt close to the metal — especially
important because I did not want anything interfering with CouchDB. I
continue to use Sinatra because it complements my BDD workflow
exceedingly well. Sinatra’s lean DSL encourages me to produce similarly
beautiful code. Sinatra never gets in my way. Sinatra goes out of its
way to make my life simple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey
Donohoe&#34; title=&#34;Corey Donohoe&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/atmos&#34;&gt;Corey
Donohoe&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra is great for building
non-trivial rack middleware. &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;We’re mainly using
Sinatra&lt;/a&gt; for integration applications
between existing pieces of software. Instead of working on a monolithic
app we’re writing a fleet of microapps to handle arising business needs.
We feel that Sinatra gets in the way less frequently than most other
frameworks. With cucumber and good development practices we’re using the
same top notch testing tools the Rails guys are using. In my &lt;a href=&#34;http://atmos.org/index.php/about/&#34;&gt;personal
hacking&lt;/a&gt; I’ve been using it as the
basis for twitter microapps leveraging twitter’s oauth API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/doug_sparling.jpg&#34; alt=&#34;Doug
Sparling&#34; title=&#34;Doug Sparling&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;Doug
Sparling&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; In my former company,
we had started using &lt;em&gt;Sinatra for web services&lt;/em&gt; and in one instance, a
small app used for mobile advertising that doesn’t use the database.&lt;/p&gt;

&lt;p&gt;​1) &lt;strong&gt;Why?&lt;/strong&gt; – We don’t always need the full Rails stack, particularly
with web services and anything that doesn’t require the database. It’s
also useful for use with legacy databases, which we have to deal with. I
can use Datamapper, which is thread safe (though I haven’t seen any
performance issues with Rails, which we usually cache anyway).\
2) &lt;strong&gt;How?&lt;/strong&gt; – We use Mongrel clusters for our Rails web sites, but with
the Sinatra apps we’re using Passenger. For our Sinatra web services, I
use Datamapper ORM. I have one internal web service in Rails 2.3.2, but
I’m looking at moving it to Sinatra as well.\
3) &lt;strong&gt;Where?&lt;/strong&gt; – Mostly internal web services at the moment, but I’m sure
we’ll look at it for external services as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/jeremy-125.jpg&#34; alt=&#34;Jeremy
Evans&#34; title=&#34;Jeremy Evans&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://code.jeremyevans.net/&#34;&gt;Jeremy
Evans&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra on quite a few
projects, mostly for small applications. At work, we use it to handle
the dynamic portion of our mostly static public website, and for some
internal applications. Personally, I use it in
&lt;a href=&#34;http://github.com/jeremyevans/giftsmas/tree/master&#34;&gt;Giftsmas&lt;/a&gt;, my open
source gift-tracking application, and in a couple of other sites I
maintain.&lt;/p&gt;

&lt;p&gt;I use Sinatra because it is simple and flexible. It doesn’t require
boilerplate code, and lets you focus on the needs of your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/graham-ashton.jpeg&#34; alt=&#34;Graham
Ashton&#34; title=&#34;Graham Ashton&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://grahamashton.net/&#34;&gt;Graham
Ashton&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I first tried Sinatra during an
in house “hack week” at &lt;a href=&#34;http://www.wordtracker.com/&#34;&gt;Wordtracker&lt;/a&gt; (one
of my main Rails clients). We used Sinatra to great effect to throw up a
user interface for a new keyword research tool that we’d come up with
during hack week. Sinatra was very accessible – the docs are well
written and the mailing list is friendly. I quickly gained a lot of
confidence in the framework by reading the code, which is succinct and
easy to follow (I wish more projects would follow the advice of the
Linux kernel coding style and wrap their code at 80 columns – it
encourages legibility).&lt;/p&gt;

&lt;p&gt;After that experience Sinatra was an obvious choice for Nesta, my &lt;a href=&#34;http://effectif.com/nesta&#34;&gt;file
based CMS&lt;/a&gt;. It’s a simple app and Sinatra is
a perfect fit for it. I had the application up and running in a matter
of days, and I really enjoyed writing it. The goal of Nesta was to build
a CMS that people could easily modify to suit their own web sites, and
Sinatra makes it very easy for people to do that. There’s not a lot of
ceremony.&lt;/p&gt;

&lt;p&gt;I still use Rails for larger apps, but I’m now turning to Sinatra first
whenever I want to try something out, or if I’m not sure where a new
application is going. It’s more fun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/hasham_small.jpg&#34; alt=&#34;Hasham
Malik&#34; title=&#34;Hasham Malik&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;Hasham
Malik&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I have recently started
development with the Sinatra micro framework while working at
&lt;a href=&#34;http://www.cambridgedocs.com/&#34;&gt;CambridgeDocs&lt;/a&gt;. Earlier we have used PHP
/ Ruby on Rails for server-side back ends of native iphone applications
that we have been developing. Sinatra lets you create REST based
services with minimalistic approach which is ideal of mobile back ends.
Sinatra is also lean and fast and at the same time it gives you the
liberty to use whichever ORM / templating system you want. Sinatra has
this positive vibe among Rubyists these days with 1.0 nearing its
release its great time to learn this new framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://grayproductions.net/images/james_headshot_square.jpg&#34; alt=&#34;James Edward Gray
II&#34; title=&#34;James Edward Gray II&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;James
Edward Gray II&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; At &lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;, Sinatra is a vital part of the
architecture of our monitoring application,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt;. We provide the API the agents use to
check-in with data via the micro framework. This is nice because it
separates the two functions of the application, allowing us to do things
like deploy an application update without interrupting the API service.
Still Sinatra gives us a touch more abstraction than something like
Rails Metal would and that makes working on the API a little easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/face_small2.jpg&#34; alt=&#34;Jeremy
Raines&#34; title=&#34;Jeremy Raines&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/jraines&#34;&gt;Jeremy
Raines&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I’m a web developer in Park
City, Utah. I got started using Sinatra because I was interested in REST
and I like the way Sinatra maps controller actions to HTTP verbs. I also
love its lightweight simplicity. It’s great for doing small API based
webapps and mashups. Most of my Sinatra apps use Ruby scripts fired by
cron jobs to pull data from other webservices into a SQLite database,
and serve content with Sinatra. I’ll be using it more in my work with
Purple Raincloud, a new social media consultancy here in Utah. I’m
@jraines on Twitter, and my homepage is at
&lt;a href=&#34;http://jeremyraines.com/&#34;&gt;jeremyraines.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/jjcicchelli.jpg&#34; alt=&#34;Julio Javier
Cicchelli&#34; title=&#34;Julio Javier Cicchelli&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Julio
Javier Cicchelli&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; First of all,
I like the idea to write about Sinatra and, especially, to show its
practical uses to the masses. There are a whole lot of Rails developers
but nobody seems to be taking Sinatra quite seriously (at least, this is
what I’ve been noticing in websites such as
&lt;a href=&#34;http://jobs.rubynow.com/&#34;&gt;jobs.rubynow.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I’ve just founded a company called “&lt;a href=&#34;http://rock-n-code.com/&#34;&gt;Rock &amp;amp;
Code&lt;/a&gt;” in Amsterdam, The Netherlands that
offers solutions developed on Sinatra (instead of Rails or even Merb) to
my partners. Why you would ask? Sinatra have definitely broken the MVC
paradigm (widely implemented by frameworks such as Rails, Merb, Django,
Spring, etc.) and decided to give total control back to the developer by
allowing him to build almost any kind of web-based solution (no matter
the complexity) in a very simple manner on top of the abstracted HTTP
layer it implements from Rack. Furthermore, Sinatra applications can
make use of the existing gem library instead of consuming plug-ins
specifically-designed for a particular framework. How my company is
using Sinatra? I’m currently developing RESTful web services that uses
CouchDB and communicates with clients written in both MacRuby and iPhone
(in the near future) using JSON but I’ve planned to use Sinatra in web
development and also server interfacing. Where can it be applied? I
believe that Sinatra suits perfectly for prototyping, client-server
applications, SOA applications and interfacing servers, for starters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/karmi_mugshot.jpg&#34; alt=&#34;Karel
Minarík&#34; title=&#34;Karel Minarík&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;Karel
Minarík&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; Sinatra powers &lt;a href=&#34;http://www.restafari.org/&#34;&gt;my
blog&lt;/a&gt;, deployment automation, internal apps
and is generally the tool of choice whenever I need to build a web app
without overhead. Sinatra excels when doing “freestyle coding” — it’s a
sort of a blank canvas: you’re bound only by HTTP and your Ruby
knowledge. Sinatra doesn’t force anything on you, which can lead to
awesome or evil code, in equal measures — and that’s part of its charm
to me. Sinatra exposes you to Rack intensely, though, which brings
rather different mindset for building web applications then the
prevailing “monolithic” style. See eg.
&lt;a href=&#34;http://github.com/rack/rack-contrib/tree/master&#34;&gt;www.github.com/rack/rack-contrib&lt;/a&gt;
for inspiration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://twitter.com/cypher&#34;&gt;Markus Prinz&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I use Sinatra because
it concentrates on one area, and does that very well, leaving the rest
up to me. So whenever I have some idea that requires a web app, I can
try it out very quickly with Sinatra with a minimum of fuss. And since
Sinatra is not a one-size-fits-all solution, but instead essentially a
library, I have a great deal of flexibility in using it. That means I
can try out new approaches to things like data storage, and use
something like Tokyo Cabinet/Tokyo Tyrant or CouchDB instead of a
relational database. But I can also use Sinatra as a component in a
larger application to offer a web interface, without interfering with
the rest of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://highgroove.com/images/about/mtodd.jpg&#34; alt=&#34;Matt
Todd&#34; title=&#34;Matt Todd&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;Matt
Todd&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We at @highgroove (&lt;a href=&#34;http://highgroove.com/&#34;&gt;Highgroove
Studios&lt;/a&gt;) use Sinatra in a lot of different
projects for memory-efficient web services. One of our products,
&lt;a href=&#34;http://scoutapp.com/&#34;&gt;Scout&lt;/a&gt; (@scoutapp) uses it to consume thousands
of reports constantly. We are able to fine tune our stack with Sinatra
to keep it minimal, responsive, and powerful.&lt;/p&gt;

&lt;p&gt;Highgroove Studios is Charles Brian Quinn (@seebq), Derek Haynes
(@dhaynes23), Andre Lewis (@alewis), James Edward Gray II (@JEG2), and
myself, Matt Todd (@mtodd).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/nap.jpg&#34; alt=&#34;Nick
Plante&#34; title=&#34;Nick Plante&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;Nick
Plante&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; We’re using Sinatra for a
variety of small web sites and services. Why? Because Sinatra is small,
RESTful, fast, and intuitive. It’s perfect for lightweight apps and
APIs.&lt;/p&gt;

&lt;p&gt;One of our sites, &lt;a href=&#34;http://rdoc.info/&#34;&gt;rdoc.info&lt;/a&gt;, uses it to generate
and host documentation for a variety of Ruby libraries, integrating with
GitHub web hooks to automatically regenerate docs whenever projects are
updated. We could have used Rails, but the additional overhead, helpers,
and other extras that come pre-packaged with it just weren’t necessary.
In fact, they would have probably gotten in our way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tweetdreams.org/&#34;&gt;Tweetdreams&lt;/a&gt; is another small Sinatra-based
project that we launched earlier this year. It’s a Twitter dream
journal. There really isn’t much to it, which is sort of the beauty of
it. The source is available on GitHub as
“&lt;a href=&#34;http://github.com/zapnap/retweet/tree/master&#34;&gt;retweet&lt;/a&gt;” and it’s been
used as the basis for a number of other Twitter-oriented projects
including the &lt;a href=&#34;http://all-sorts.org/&#34;&gt;http://all-sorts.org&lt;/a&gt; linguistic
experiment created by Andrew Neil.&lt;/p&gt;

&lt;p&gt;I should note that both of these projects use DataMapper and Haml, too.
Sinatra is ORM and templating language agnostic, which can be another
bonus if you already have a predefined set of tools that you’re familiar
with and want to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/petercooper.jpg&#34; alt=&#34;Peter
Cooper&#34; title=&#34;Peter Cooper&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/peterc&#34;&gt;Peter
Cooper&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; As I don’t work on big
projects, I’m using Sinatra for everything now, where I would have used
Rails before. It’s nearly all local or private stuff for now but I’d
like to be able to release more community projects using it in due
course. I love Sinatra because it’s less opinionated and more Ruby-like
than Rails. It might take me a little longer to achieve certain results
but I can “plug and play” code, libraries, and frameworks wherever I
like with it, rather than have to work around tightly coupled
“conventions.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/PiyushGupta.jpg&#34; alt=&#34;Piyush
Gupta&#34; title=&#34;Piyush Gupta&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;Piyush
Gupta&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; When your application is
small, Sinatra helps us to develop applications quickly and easily.
Sinatra is easy to understand and follow. We have recently used it for a
twitter mashup called MillionTwitter Follower which is not yet live.
Expecting it to be live soon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/sam.jpg&#34; alt=&#34;Sam
Goebert&#34; title=&#34;Sam Goebert&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;Sam
Goebert&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt;
&lt;a href=&#34;http://www.bigcurl.de/&#34;&gt;Bigcurl&lt;/a&gt; uses Sinatra to power its &lt;a href=&#34;http://www.httpush.com/&#34;&gt;HTTPush
API&lt;/a&gt;, which is a hosted gateway to the Apple
Push Notification Service. Our complete api frontend is implemented
using Sinatra. This gave us a tremendous boost during development of the
API specification. We were able to experiment more as the code has very
few lines. Second reason we went with Sinatra was memory consumption,
since we span lot of instances over the course of a day this was crucial
to get the maximum out of a machine but maintaining the beauty in code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/sau.jpg&#34; alt=&#34;Sau Sheong
Chang&#34; title=&#34;Sau Sheong Chang&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;Sau
Sheong Chang&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I picked up Sinatra
first when I was writing my &lt;a href=&#34;http://blog.saush.com/2009/03/write-an-internet-search-engine-with-200-lines-of-ruby-code/&#34;&gt;search
engine&lt;/a&gt;
and I was looking for a simple way to write my search engine interface.
The simplicity of Sinatra blew me away and I was soon knee-deep into
writing more apps on Sinatra. After a few more applications, I was
convinced that Sinatra is the way to write web applications as it is
meant to be. Today I use it to write quick and simple web applications,
often in combination with DataMapper, that serve as front-end interfaces
for larger systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/saurabhpurnaye.jpg&#34; alt=&#34;Saurabh
Purnaye&#34; title=&#34;Saurabh Purnaye&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;Saurabh
Purnaye&lt;/a&gt;&amp;gt;&amp;gt;&lt;/strong&gt; I work for Synechron, Pune.
The applications we create are mostly UI based (html/css/jquery and
flex), and I need web services to respond to the calls from UI – that’s
where I use Sinatra. Sinatra is really fast and easy for providing
RESTful web service solutions. There are many options while working with
Sinatra – for example Database: ORM (datamapper/active record),
Templating: (erb/haml/builder), http caching, filters, helpers and error
handling. One of it’s best features is it comes with Rack middleware.
For the last 6 months I am using Sinatra and I feel very happy to work
with it.&lt;/p&gt;

&lt;h3 id=&#34;do-you-use-sinatra:b9d73662ccbad47811ad53b639d84c77&#34;&gt;Do YOU use Sinatra?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ad.ly/refer/2014322399&#34;&gt;&lt;img src=&#34;http://ad.ly/static/images/referral/square.gif&#34; alt=&#34;Twitter&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a Rubyist using Sinatra, &lt;em&gt;we would like to know as to why,
how and where you are using Sinatra&lt;/em&gt;. Post this as a blog comment.
Thanks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited
offer Sinatra and Rails hosting running on a Phusion Passenger
(mod_rails) and LAMP stack. If you want to get to know them first, or
simply want to try out your Sinatra or Rails skills, &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;let them arrange a
free trial hosting
account&lt;/a&gt; for you – full
technical support from their team is included!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Corey Donohoe: How do I learn and master Sinatra?</title>
      <link>http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: We are re-printing this blog post that appeared on 6th July 2009, as the original post is not accessible.
  &lt;/p&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    Welcome to the &lt;b&gt;first&lt;/b&gt; installment on the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, of a mini series &amp;#8211; &amp;#8220;&lt;strong&gt;How do I learn and master Sinatra?&lt;/strong&gt;&amp;#8221; &amp;#8211; by top Rubyists using &lt;em&gt;Sinatra&lt;/em&gt;. The interview series will provide insight and commentary from these notable &lt;em&gt;Sinatra&lt;/em&gt; developers, with the goal of facilitating and providing answers to the questions Ruby beginners face on &lt;em&gt;how to learn and master Sinatra&lt;/em&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Corey Donohoe, could you tell us something about yourself &amp;#8211; your background, where you are based?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Corey Donohoe&#34; src=&#34;http://rubylearning.com/images/CoreyDonohoe.jpg&#34; alt=&#34;Corey Donohoe&#34; /&gt;&lt;strong&gt;Corey Donohoe&gt;&gt;&lt;/strong&gt; I&amp;#8217;m &lt;a href=&#34;http://atmos.org/&#34;&gt;Corey Donohoe&lt;/a&gt;. I&amp;#8217;m based out of Boulder, Colorado &amp;#8211; USA. My background is in computer science and system administration though I prefer hacking to either of those labels. I&amp;#8217;m a pretty normal dude, I enjoy cycling, music, coffee, micro brews, and all the other awesomeness that my home state has to offer. I&amp;#8217;ve been working for &lt;a href=&#34;http://www.engineyard.com/&#34;&gt;Engine Yard&lt;/a&gt; since March of &amp;#8217;07 doing everything from app support to internal development. I&amp;#8217;m currently 1/2 of our internal integrations team.
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra&amp;#8217;s greatest strength is its flexibility
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Are there any pre-requisites for a person to start learning Sinatra&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; There aren&amp;#8217;t any hardcore prerequisites per se; Ruby and experience in a Ruby web framework is a plus. HTTP verbs play a huge role in Sinatra, as well as things like query and post params. If you get those concepts you can hit the ground running.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Learn Sinatra incrementally. If you have new business requirements try to think about things like &amp;#8220;how would i implement this in Sinatra?&amp;#8221; Take the time to figure that requirement out in Sinatra then throw the solution out! When the time comes to use Sinatra for something you&amp;#8217;ll have a much more broad understanding of the framework and you&amp;#8217;ll hit fewer blockers.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Which area of Sinatra should a beginner pay particular attention to?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Understanding the difference between &lt;b&gt;Sinatra::Base&lt;/b&gt; and &lt;b&gt;Sinatra::Default&lt;/b&gt; is definitely something a Sinatra beginner should focus on early. &lt;b&gt;Sinatra::Base&lt;/b&gt; is for writing Rack middleware, and &lt;b&gt;Sinatra::Default&lt;/b&gt; is normally for writing Rack applications. Learning the modular style app development is really useful as well as using the register method to include pieces of functionality. Getting a handle on those concepts will expose you to the rest of Sinatra, which is relatively intuitive.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is the official documentation on Sinatra good enough for a beginner? Are there areas which need improvement or need to be re-written&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; The Sinatra documentation is well done and I can generally find answers to my questions just by referencing the docs. There&amp;#8217;s always #sinatra on freenode or the Sinatra book on github if you need additional help too. There&amp;#8217;s plenty of pretty well tested examples on github using Sinatra, hancock and integrity come to mind.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Sequel, DataMapper, ActiveRecord &amp;#8211; which one would you recommend to use with Sinatra and why?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; I use DataMapper exclusively. It was a bumpy ride a year ago but these days it&amp;#8217;s acceptable for production use. We interface with more than just relational databases and the ability to keep a consistent model syntax across various data sources is really attractive to us. Realistically I feel like I spend less time fighting my framework when I&amp;#8217;m using DataMapper so it&amp;#8217;s the clear choice. The one place I wouldn&amp;#8217;t use dm in would be a join heavy relational environment; ActiveRecord is way better at that.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is an understanding of Rack important while learning Sinatra? Why? Which area of Rack should one be really comfortable with?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; You don&amp;#8217;t need a solid understanding of Rack to get a Sinatra up and running, but you&amp;#8217;ll be missing out on a lot of the power. It&amp;#8217;s extremely beneficial to take the time to learn how the &lt;b&gt;Rack::Builder&lt;/b&gt; works as well as the usage of the &lt;b&gt;use/map/run&lt;/b&gt; commands in that context. The modularity of Rack really becomes apparent and you&amp;#8217;ll find yourself using Sinatra more effectively.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one hone one&amp;#8217;s skills in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; Read code, write test code, write code. All of the awesome testing frameworks available for Ruby are available to Sinatra. If you don&amp;#8217;t write tests it might be a good way to familiarize yourself with testing best practices without the overheard of a larger framework.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What type of projects should a beginner work on to gain more expertise in Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;A beginner would benefit from writing something completely API driven as a first project&lt;/span&gt;. So many people couple databases with dynamic web applications but it&amp;#8217;s kind of liberating to just be an intermediary service. Twitter apps are pretty trivial to implement and can teach you a lot. They also expose you to a pretty large userbase to solicit feedback.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you suggest some web services that a Sinatra beginner could develop himself / herself?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Web services are great targets for introducing Sinatra into your workplace&lt;/span&gt;. Identify a pain point in your organization and put a small app in front of it. It doesn&amp;#8217;t have to replace something overnight but it&amp;#8217;s a great way to sneak functionality in at work. Once you have a few of these built you start to reap the benefits of microapps and web services.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Anything else you would like to add?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Corey&gt;&gt;&lt;/strong&gt; &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Learning Sinatra is the best thing you can do while we all wait for Rails 3 to land&lt;/span&gt;. The middleware you write will be able to be dropped right into your Rails 3 applications so it&amp;#8217;s not like you&amp;#8217;re wasting time. We&amp;#8217;re starting to build really modular systems using Sinatra by building APIs into those systems. I think a lot of people would benefit from breaking their monolith apps down into microapps and Sinatra is a great way to do it.
  &lt;/p&gt;
  
  &lt;p&gt;
    People looking for a template might want to investigate the singem gem. It has basic templates for twitter apps or regular webservices. All of them are bootstrapped for testing with cucumber+rspec.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Corey. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Corey would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited offer Sinatra and Rails hosting running on a Phusion Passenger (mod_rails) and LAMP stack. If you want to try your hand at developing with Sinatra, why not let them arrange a &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;trial hosting account&lt;/a&gt; for you? You&amp;#8217;ll get to deploy your app, with full technical support from their team!
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Follow 10&#43; Rubyists using Sinatra on Twitter (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/follow-10-rubyists-using-sinatra-on-twitter-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This first appeared on 24th June 2009 and is being reprinted as the original is not accessible.
  &lt;/p&gt;
  
  &lt;h3&gt;
    What&amp;#8217;s Twitter?
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/icon_d.png&#34; alt=&#34;Twitter&#34; title=&#34;http://twitter.com/IndianGuru&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://shiftingcareers.blogs.nytimes.com/2008/09/07/how-twitter-can-help-at-work/?excamp=GGSBtwitternews&amp;WT.srch=1&amp;WT.mc_ev=click&amp;WT.mc_id=SB-S-E-GG-NA-S-twitter_news&#34;&gt;The New York Times&lt;/a&gt; says:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      &lt;a href=&#34;http://www.twitter.com/&#34;&gt;Twitter&lt;/a&gt; is a simple messaging service that you&amp;#8217;ve either &lt;a href=&#34;http://query.nytimes.com/search/sitesearch?query=twitter&amp;srchst=cse&#34;&gt;heard about a lot&lt;/a&gt; or &lt;a href=&#34;http://kara.allthingsd.com/20080428/twitter-where-nobody-know-your-name/&#34;&gt;not at all&lt;/a&gt;. Either way, it&amp;#8217;s a fun and useful tool, well worth trying if you want to reach potential and existing customers, employees or employers.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;h3&gt;
    List of Rubyists Using Sinatra
  &lt;/h3&gt;
  
  &lt;p&gt;
    This list of over 10 Rubyists using Sinatra, is in alphabetical order, with a link to their Twitter profile. The following list is &lt;em&gt;not&lt;/em&gt; intended to be all-inclusive, but it should give you a great start to following some talented Rubyists using Sinatra.
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Aaron Quint &amp;#8211; &lt;a href=&#34;http://twitter.com/aq&#34;&gt;aq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Adeel Ahmad &amp;#8211; &lt;a href=&#34;http://twitter.com/_adeel&#34;&gt;_adeel&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andre Lewis &amp;#8211; &lt;a href=&#34;http://twitter.com/alewis&#34;&gt;alewis&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Andrew Neil &amp;#8211; &lt;a href=&#34;http://twitter.com/nelstrom&#34;&gt;nelstrom&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Arjun Ram &amp;#8211; &lt;a href=&#34;http://twitter.com/arjunram&#34;&gt;arjunram&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      August Lilleaas &amp;#8211; &lt;a href=&#34;http://twitter.com/augustl&#34;&gt;augustl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Barry Hess &amp;#8211; &lt;a href=&#34;http://twitter.com/bjhess&#34;&gt;bjhess&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bill Siggelkow &amp;#8211; &lt;a href=&#34;http://twitter.com/bsiggelkow&#34;&gt;bsiggelkow&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Blake Mizerany &amp;#8211; &lt;a href=&#34;http://twitter.com/bmizerany&#34;&gt;bmizerany&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Brian Deterling &amp;#8211; &lt;a href=&#34;http://twitter.com/bdeter&#34;&gt;bdeter&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Bruno Miranda &amp;#8211; &lt;a href=&#34;http://twitter.com/brupm&#34;&gt;brupm&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Carlos Gabaldon &amp;#8211; &lt;a href=&#34;http://twitter.com/carlosgabaldon&#34;&gt;carlosgabaldon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Charles Brian Quinn &amp;#8211; &lt;a href=&#34;http://twitter.com/seebq&#34;&gt;seebq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Chris Strom &amp;#8211; &lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;eee_c&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Corey Donohoe &amp;#8211; &lt;a href=&#34;http://twitter.com/atmos&#34;&gt;atmos&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Damon Clinkscales &amp;#8211; &lt;a href=&#34;http://twitter.com/damon&#34;&gt;damon&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Croak &amp;#8211; &lt;a href=&#34;http://twitter.com/dancroak&#34;&gt;dancroak&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Dan Mayer &amp;#8211; &lt;a href=&#34;http://twitter.com/danmayer&#34;&gt;danmayer&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      David Balatero &amp;#8211; &lt;a href=&#34;http://twitter.com/dbalatero&#34;&gt;dbalatero&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Derek Haynes &amp;#8211; &lt;a href=&#34;http://twitter.com/dhaynes23&#34;&gt;dhaynes23&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Doug Sparling &amp;#8211; &lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;scriptrunner&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Foy Savas &amp;#8211; &lt;a href=&#34;http://twitter.com/foysavas&#34;&gt;foysavas&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Graham Ashton &amp;#8211; &lt;a href=&#34;http://twitter.com/grahamashton&#34;&gt;grahamashton&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Hasham Malik &amp;#8211; &lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;hasham2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      James Edward Gray II &amp;#8211; &lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;JEG2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jean-Daniel Tanguay &amp;#8211; &lt;a href=&#34;http://twitter.com/jeedee&#34;&gt;jeedee&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jeremy Raines &amp;#8211; &lt;a href=&#34;http://twitter.com/jraines&#34;&gt;jraines&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jordan Bracco &amp;#8211; &lt;a href=&#34;http://twitter.com/webs&#34;&gt;webs&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Jesse Cooke &amp;#8211; &lt;a href=&#34;http://twitter.com/jc00ke&#34;&gt;jc00ke&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Joe Ferris &amp;#8211; &lt;a href=&#34;http://twitter.com/joeferris&#34;&gt;joeferris&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Julio Javier Cicchelli &amp;#8211; &lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;monsieur_rock&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Justin Britten &amp;#8211; &lt;a href=&#34;http://twitter.com/jbritten&#34;&gt;jbritten&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Karel Minarik &amp;#8211; &lt;a href=&#34;http://twitter.com/karmiq&#34;&gt;karmiq&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Logan Koester &amp;#8211; &lt;a href=&#34;http://twitter.com/logankoester&#34;&gt;logankoester&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Luke Francl &amp;#8211; &lt;a href=&#34;http://twitter.com/lof&#34;&gt;lof&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Marcin Kulik &amp;#8211; &lt;a href=&#34;http://twitter.com/sickill&#34;&gt;sickill&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Matt Todd &amp;#8211; &lt;a href=&#34;http://twitter.com/mtodd&#34;&gt;mtodd&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Mike Demers &amp;#8211; &lt;a href=&#34;http://twitter.com/mikedemers&#34;&gt;mikedemers&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Plante &amp;#8211; &lt;a href=&#34;http://twitter.com/zapnap&#34;&gt;zapnap&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Nick Quaranto &amp;#8211; &lt;a href=&#34;http://twitter.com/qrush&#34;&gt;qrush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Peter Cooper &amp;#8211; &lt;a href=&#34;http://twitter.com/peterc&#34;&gt;peterc&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Piyush Gupta &amp;#8211; &lt;a href=&#34;http://twitter.com/mba_piyush&#34;&gt;mba_piyush&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Richard Taylor &amp;#8211; &lt;a href=&#34;http://twitter.com/moomerman&#34;&gt;moomerman&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Robert Lowe &amp;#8211; &lt;a href=&#34;http://twitter.com/__viral&#34;&gt;__viral&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;Ryan Tomayko &amp;#8211; &lt;a href=&#34;http://twitter.com/rtomayko&#34;&gt;rtomayko&lt;/a&gt;&lt;/em&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sam Goebert &amp;#8211; &lt;a href=&#34;http://twitter.com/bigcurl&#34;&gt;bigcurl&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sau Sheong Chang &amp;#8211; &lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;sausheong&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Saurabh Purnaye &amp;#8211; &lt;a href=&#34;http://twitter.com/saurabhp&#34;&gt;saurabhp&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Simon Rozet &amp;#8211; &lt;a href=&#34;http://twitter.com/srt&#34;&gt;srt&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Sunny Ripert &amp;#8211; &lt;a href=&#34;http://twitter.com/sunfox&#34;&gt;sunfox&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Trevor Bramble &amp;#8211; &lt;a href=&#34;http://twitter.com/&#34;&gt;TrevorBramble&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Vishnu Gopal &amp;#8211; &lt;a href=&#34;http://twitter.com/vishnugopal&#34;&gt;vishnugopal&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p class=&#34;note&#34;&gt;
    The following list is &lt;strong&gt;Not &amp;#8220;Rubyists&amp;#8221; per-se, but should still be of interest&lt;/strong&gt;:
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      FiveRuns &amp;#8211; &lt;a href=&#34;http://twitter.com/fiveruns&#34;&gt;fiveruns&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      taazza &amp;#8211; &lt;a href=&#34;http://twitter.com/taazza&#34;&gt;taazza&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      thoughtbot &amp;#8211; &lt;a href=&#34;http://twitter.com/thoughtbot&#34;&gt;thoughtbot&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;strong&gt;&lt;span style=&#34;color:red;&#34;&gt;Note:&lt;/span&gt;&lt;/strong&gt; Keep the feedback coming in. We will update the list based on your recommendations.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;Have we missed out any &lt;em&gt;Rubyists who are using Sinatra&lt;/em&gt;?&lt;br /&gt;You can help&lt;/strong&gt;. Please feel free to add a link to a Rubyist&amp;#8217;s Twitter profile. We would love to hear why you think the particular Rubyist is important to Twitter with. Also, do add a link to your Twitter profile in the comments.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interview: Aaron Quint on Sinatra (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/07/interview-aaron-quint-on-sinatra-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/interview-aaron-quint-on-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This article first appeared on 20th March 2009 but the original is not accessible; hence the reprint.
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    On the eve of the first ever online &amp;#8220;&lt;strong&gt;Introduction to Sinatra&lt;/strong&gt;&amp;#8221; course, Satish Talim of RubyLearning caught up with &lt;strong&gt;Aaron Quint&lt;/strong&gt; and talked to him on &lt;strong&gt;Sinatra&lt;/strong&gt;, in this interview.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/AaronQuint.jpg&#34; alt=&#34;Aaron Quint, USA&#34; title=&#34;Aaron Quint, USA&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish Talim&gt;&gt;&lt;/strong&gt; Welcome, Aaron and thanks for taking out time to share your thoughts. For the benefit of the readers, could you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron Quint&gt;&gt;&lt;/strong&gt; Thanks for having me! I&amp;#8217;m a freelance Ruby developer working in Brooklyn, NY. I&amp;#8217;ve been doing Ruby and Rails for a little over 3 years now, and full time for the last 2 and a half. Recently I&amp;#8217;ve been getting a lot more involved with the open source community. I really love coding in Ruby and at this point I don&amp;#8217;t think any other language has such a great community with such smart and interesting people. I blog (as much as I can) at &lt;a href=&#34;http://www.quirkey.com/blog/&#34;&gt;http://quirkey.com/blog/&lt;/a&gt;. My other passions are food and design and I work with a friend writing about this at &lt;a href=&#34;http://thescoutmag.com/&#34;&gt;http://thescoutmag.com&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra&amp;#8217;s greatest strength is its flexibility
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; You have worked a lot on Rails and Sinatra. How come you got involved with Sinatra? Tell us more about this.&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I heard about Sinatra when Blake Mizerany first released it. I thought it was a cool idea, but didn&amp;#8217;t really see the point. Then, in 2008 a number of people started working feverishly on making it a more elegant framework and I started to get involved. I had a sort of &amp;#8216;lightbulb&amp;#8217; moment and realized &amp;#8216;Ah! This can be really useful!&amp;#8217;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; So many Ruby-based web frameworks &amp;#8211; is this good for Ruby? Where does Sinatra fit in?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I&amp;#8217;d start off by saying, that Sinatra is really less then a framework. A framework implies a lot of constraints or conventions, however, Sinatra really doesn&amp;#8217;t limit you at all. An application in Sinatra can be a single file, multiple files, or multiple files across directories (more like Rails). There&amp;#8217;s a reason that so much of the Ruby community is focused on building web applications &amp;#8211; most applications and what any of us do on computers is moving towards the web. Ruby is such an elegant language it lends itself to different people having a lot of different ideas on the best way to write web apps. I don&amp;#8217;t think of all these frameworks as being in competition, as we saw with the Rails/Merb merge, everyone is really learning and building on each other&amp;#8217;s ideas and discoveries. Sinatra&amp;#8217;s role is the tool for building web applications when you don&amp;#8217;t need any of the features or overhead of one of the more robust frameworks.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; In your recent article for the &amp;#8220;Rubyist&amp;#8221; magazine, you mention that &amp;#8220;think of Sinatra as a library creating simple HTTP based user interfaces.&amp;#8221; Can you throw more light on this aspect?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; Sinatra&amp;#8217;s greatest strength is that its so flexible and requires so little to get an app running. This makes it super easy to use it in existing projects. My proposal is that the community should embrace it by including it in their gems or libraries and making simple web interfaces for their code. Everyone loves the command line for its simplicity and directness, but by using Sinatra to build a simple web app to interact with your code, you can make your library much easier (and more fun) to use.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; For a person new to web development, how can one go about learning Sinatra? &lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I think Sinatra is a great way to get in to Ruby web development. Its really simple so once you&amp;#8217;ve learned the basics, anything you learn beyond it is learning Ruby and is not Sinatra specific. Right now there aren&amp;#8217;t any dedicated blogs or community sites but the Sinatra homepage: &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;http://www.sinatrarb.com&lt;/a&gt; has good documentation. If you&amp;#8217;re interested or have questions, Sinatra also has an active mailing list and irc chat room. People are usually happy to answer questions. I would also suggest just searching github for Sinatra and checking out the source of other Sinatra projects &amp;#8211; there are a lot of good open source examples.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Any plans on writing a book on Sinatra?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; I wouldn&amp;#8217;t be against it If someone offered me the opportunity &amp;#8211; though it would be a pretty short book.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Do you have any suggestions for RubyLearning&amp;#8217;s &amp;#8220;Introduction to Sinatra&amp;#8221; course participants?&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Aaron&gt;&gt;&lt;/strong&gt; Don&amp;#8217;t hesitate to ask questions on the mailing list or in irc. Also if you already have some understanding of Ruby, you should absolutely take a look at Sinatra&amp;#8217;s source. Most of it is contained in a single file and its one of the best open source examples of advanced Ruby.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Thanks Aaron for sharing your views with the &lt;strong&gt;Introduction to Sinatra&lt;sup class=&#39;footnote&#39;&gt;&lt;a href=&#39;#fn-8333-1&#39; id=&#39;fnref-8333-1&#39;&gt;1&lt;/a&gt;&lt;/sup&gt; &amp;#8221; and &amp;#8221; &lt;strong&gt;Introduction to Merb&lt;sup class=&#39;footnote&#39;&gt;&lt;a href=&#39;#fn-8333-2&#39; id=&#39;fnref-8333-2&#39;&gt;2&lt;/a&gt;&lt;/sup&gt; &amp;#8221; course participants.&lt;/span&gt;&lt;/p&gt; 
    
    &lt;p&gt;
      &lt;span style=&#34;font-size: 8pt; font-family: Arial;&#34;&gt;&lt;i&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 8pt; font-family: Arial;&#34;&gt;&lt;i&gt;The opinions expressed are those of Aaron Quint and do not necessarily reflect those of &lt;strong&gt;&lt;a href=&#34;http://rubylearning.org/&#34;&gt;RubyLearning.org&lt;/a&gt;&lt;/strong&gt;.&lt;/i&gt;&lt;/span&gt;
    &lt;/p&gt;
    
    &lt;p class=&#34;alert&#34;&gt;
      &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; &lt;a href=&#34;http://www.1steasy.com/&#34;&gt;1st Easy Limited&lt;/a&gt; are keen to play an active role in encouraging the adoption of new development technologies, and are delighted to have been given the opportunity to support the work of Satish Talim and his team at RubyLearning. If you&amp;#8217;re a developer, or an alumni of RubyLearning and would like to test your own Sinatra apps or freshly acquired skills, you&amp;#8217;re welcome to take advantage of the free hosting trials that 1st Easy offer: simply visit the &lt;a href=&#34;http://www.1steasy.com/rubylearning.htm&#34;&gt;registration page&lt;/a&gt; and leave your details. The full-featured accounts are yours to do with as you please for one month, after which you can transfer your hard work to a paid account, or walk away with no questions asked!
    &lt;/p&gt;&lt;/div&gt; 
    

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#39;footnotes&#39;&amp;gt;
  &amp;lt;div class=&#39;footnotedivider&#39;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;ol&amp;gt;
    &amp;lt;li id=&#39;fn-8333-1&#39;&amp;gt;
      &amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;Introduction to Sinatra&amp;lt;/strong&amp;gt;: Here are the &amp;lt;a href=&amp;quot;http://rubylearning.com/blog/2009/02/25/introduction-to-sinatra-a-new-course/&amp;quot;&amp;gt;course details&amp;lt;/a&amp;gt;. &amp;lt;span class=&#39;footnotereverse&#39;&amp;gt;&amp;lt;a href=&#39;#fnref-8333-1&#39;&amp;gt;&amp;amp;#8617;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li id=&#39;fn-8333-2&#39;&amp;gt;
      &amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt;Introduction to Merb&amp;lt;/strong&amp;gt;: Here are the &amp;lt;a href=&amp;quot;http://rubylearning.com/blog/2009/03/02/introduction-to-merb-3rd-batch/&amp;quot;&amp;gt;course details&amp;lt;/a&amp;gt;. &amp;lt;span class=&#39;footnotereverse&#39;&amp;gt;&amp;lt;a href=&#39;#fnref-8333-2&#39;&amp;gt;&amp;amp;#8617;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Karel Minarik: How do I learn and master Sinatra? (Reprint)</title>
      <link>http://rubylearning.com/blog/2015/01/07/karel-minarik-how-do-i-learn-and-master-sinatra-reprint/</link>
      <pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2015/01/07/karel-minarik-how-do-i-learn-and-master-sinatra-reprint/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    &lt;b&gt;Note&lt;/b&gt;: This is reprint of the blog post that appeared on 13th July 2009, as the original is not accessible.
  &lt;/p&gt;

  &lt;p class=&#34;update&#34;&gt;
    Welcome to the &lt;b&gt;fourth&lt;/b&gt; installment on the &lt;abbr title=&#34;RubyLearning&#34;&gt;RL&lt;/abbr&gt; blog, of a mini series &amp;#8211; &amp;#8220;&lt;strong&gt;How do I learn and master Sinatra?&lt;/strong&gt;&amp;#8221; &amp;#8211; by top Rubyists using &lt;em&gt;Sinatra&lt;/em&gt;. The interview series will provide insight and commentary from these notable &lt;em&gt;Sinatra&lt;/em&gt; developers, with the goal of facilitating and providing answers to the questions Ruby beginners face on &lt;em&gt;how to learn and master Sinatra&lt;/em&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Karel Minarik, could you tell us something about yourself &amp;#8211; your background, where you are based?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Karel Minarik&#34; src=&#34;http://rubylearning.com/images/karmi_mugshot.jpg&#34; alt=&#34;Karel Minarik&#34; /&gt;&lt;strong&gt;Karel Minarik&gt;&gt;&lt;/strong&gt; I&amp;#8217;m Karel Minarik, web designer and developer living in Prague, Czech Republic. I have graduated in Philosophy, not Computer Science, which may explain why I love Ruby a lot, and why I prefer solving &amp;#8220;naming things&amp;#8221; over &amp;#8220;cache invalidation&amp;#8221; problems. I earn my bread by designing interfaces, writing Ruby, JavaScript, HTML/CSS and giving people advice or teaching them new tricks. I blog in undecipherable intervals on &lt;a href=&#34;http://www.restafari.org/&#34;&gt;Restafari.org&lt;/a&gt; and publish code regularly at &lt;a href=&#34;http://github.com/karmi/&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Are there any pre-requisites for a person to start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Very few: you just need to know Ruby a little bit. The rest you can and will learn along the way. In fact, &lt;span style=&#34;background-color: #FFFFCC;&#34;&gt;Sinatra is wonderful teaching tool to deepen your knowledge of Ruby as a general programming language, web application architectures, HTTP and REST principles, concept of middlewares, and so on&lt;/span&gt;. As a wonderful teaching/learning tool it&amp;#8217;s truly on par with _why&amp;#8217;s Shoes.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; You should start with the &lt;a href=&#34;http://github.com/sinatra/sinatra/blob/master/README.rdoc&#34;&gt;README&lt;/a&gt;, which contains almost everything you need to know in its 500 or so lines. Then you should definitely glance over sourcecode of some Sinatra applications &amp;#8220;&lt;a href=&#34;http://www.sinatrarb.com/wild.html&#34;&gt;in the wild&lt;/a&gt;&amp;#8220;.
  &lt;/p&gt;

  &lt;p&gt;
    Some of the noteworthy examples would be eg. simple website in waferbaby&amp;#8217;s &lt;a href=&#34;http://github.com/waferbaby/usesthis/tree/master&#34;&gt;usesthis&lt;/a&gt;, background processing tutorial in bmizerany&amp;#8217;s &lt;a href=&#34;http://github.com/bmizerany/sinatra-dj/tree/master&#34;&gt;sinatra-dj&lt;/a&gt;, clever use of Ruby&amp;#8217;s blocks/closures in pjhyett&amp;#8217;s &lt;a href=&#34;http://github.com/pjhyett/github-services/tree/master&#34;&gt;github-services&lt;/a&gt; or ultra minimal apps in ichverstehe&amp;#8217;s &lt;a href=&#34;http://github.com/ichverstehe/gaze/blob/master/bin/gaze&#34;&gt;gaze&lt;/a&gt; or gnugeek&amp;#8217;s &lt;a href=&#34;http://github.com/gnugeek/tophat/tree/master&#34;&gt;tophat&lt;/a&gt;. These examples really elucidate compact and minimal nature of Sinatra.
  &lt;/p&gt;

  &lt;p&gt;
    Then you should sketch something rather small and well defined: web frontend for some Ruby code you have, a web API for some of your services, &amp;#8230;
  &lt;/p&gt;

  &lt;blockquote class=&#34;right&#34;&gt;
    &lt;p&gt;
      Sinatra &amp;#8211; quickly create tiny web apps and services
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Which area of Sinatra should a beginner pay particular attention to?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Beginners should pay attention to Sinatra&amp;#8217;s DSL itself: helpers, filters, last_modified and etag support, etc, so they&amp;#8217;re not reinventing the mic and truly make use of it&amp;#8217;s API. More advanced programmers should focus on Rack integration, using Rack middlewares such as &lt;b&gt;Rack::Auth&lt;/b&gt; or &lt;b&gt;Rack::Mime&lt;/b&gt; in your Sinatra app and running Sinatra apps themselves as middlewares. This opens different possibilities of service integration &amp;#8211; have a look on Jon Crosby&amp;#8217;s wonderful explanation in his &lt;a href=&#34;http://mwrc2009.confreaks.com/13-mar-2009-11-05-in-a-world-of-middleware-who-needs-monolithic-applications-jon-crosby.html&#34;&gt;MWRC talk&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is the official documentation on Sinatra good enough for a beginner? Are there areas which need improvement or need to be re-written&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Sinatra&amp;#8217;s &lt;a href=&#34;http://www.sinatrarb.com/documentation.html&#34;&gt;documentation&lt;/a&gt; is pretty extensive at the moment, covering everything from basics to testing your applications and writing extensions. It&amp;#8217;s just a bit scattered at the moment, eg. deployment is covered in the &lt;a href=&#34;http://www.sinatrarb.com/book.html#deployment&#34;&gt;Sinatra Book&lt;/a&gt; started by Chris Schneider. There&amp;#8217;s still some lack of thorough documentation about Rack integration.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Sequel, DataMapper, ActiveRecord &amp;#8211; which one would you recommend to use with Sinatra and why?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; I prefer ActiveRecord for anything talking to a relational database, because of it&amp;#8217;s clever API, stability, general knowledge and large user base. Don&amp;#8217;t forget that Sinatra is nice playground for experiments with other ORM&amp;#8217;s, key/value stores, etc, though!
  &lt;/p&gt;

  &lt;p&gt;
    &lt;img class=&#34;alignright&#34; src=&#34;http://rubylearning.com/images/sinatralogo.jpg&#34; alt=&#34;Sinatra Icon&#34; title=&#34;Sinatra micro-framework&#34; /&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Is an understanding of Rack important while learning Sinatra? Why? Which area of Rack should one be really comfortable with?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; No, you could start learning Sinatra completely oblivious of something called &amp;#8220;Rack&amp;#8221;.
  &lt;/p&gt;

  &lt;p&gt;
    However, you can use plethora of various &lt;a href=&#34;http://rack.rubyforge.org/doc/Rack.html&#34;&gt;bundled&lt;/a&gt; or &lt;a href=&#34;http://github.com/rack/rack-contrib&#34;&gt;third-party&lt;/a&gt; Rack middlewares very easily by simple &amp;#8216;&lt;b&gt;use Rack::Utils&lt;/b&gt;&amp;#8216; or &amp;#8216;&lt;b&gt;use Rack::Locale&lt;/b&gt;&amp;#8216; declaration for adding some advanced functionality to your application.
  &lt;/p&gt;

  &lt;p&gt;
    And when you plan to plug Sinatra powered app into a Rails one, for instance, or want to &amp;#8220;mount&amp;#8221; various separated web applications at different endpoints, you should definitely have a detailed look on Rack itself.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; How should one hone one&amp;#8217;s skills in Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; By reading huge amounts of code available on Github. That&amp;#8217;s a sure way how to discover clever solutions and open your mind. (Be sure to include credits if you reuse some code and release your stuff, though.)
  &lt;/p&gt;

  &lt;p&gt;
    But the most important thing is to focus on Ruby as an expressive programming language, and to _not_ think about browser first. Think first about the domain of your application and how it translates to Ruby, not about how it should &amp;#8220;look&amp;#8221; or behave in a browser. That&amp;#8217;s very important, but comes next. And don&amp;#8217;t forget it&amp;#8217;s really easy to code test-first in Ruby and in Sinatra.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; What type of projects should a beginner work on to gain more expertise in Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Smallish apps, where Rails would force it&amp;#8217;s conventions on you or which are not primarily focused on database access. Something like cschneid&amp;#8217;s &lt;a href=&#34;http://irclogger.com/&#34;&gt;irclogger&lt;/a&gt;, quirkey&amp;#8217;s &lt;a href=&#34;http://log.quirkey.com/&#34;&gt;columnlog&lt;/a&gt; or entp&amp;#8217;s &lt;a href=&#34;http://calendaraboutnothing.com/&#34;&gt;Calendar About Nothing&lt;/a&gt; &amp;#8212; all very tight, minimal and very elegant apps.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Could you suggest some web services that a Sinatra beginner could develop himself / herself?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; The sweet spot for Sinatra is something along the lines of already mentioned apps. Some ideas I could throw in:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      An app to display metrics about your team activity in a Git repository: who commited most, who commited most lines of code, etc., leveraging power of &lt;a href=&#34;http://github.com/mojombo/grit&#34;&gt;Grit&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      A web frontend for some command-line tool like &amp;#8216;top&amp;#8217; or &amp;#8216;df&amp;#8217; for your servers.
    &lt;/li&gt;
    &lt;li&gt;
      Simple web hook for &lt;a href=&#34;http://github.com/guides/post-receive-hooks&#34;&gt;Github&amp;#8217;s post-receive hooks&lt;/a&gt;, notifiying your developer mailing-list, Jabber, deploying new code to staging server or playing a tune.
    &lt;/li&gt;
    &lt;li&gt;
      More advanced example could be an app to show currently deployed versions of your applications, using small Sinatra apps on each host to emit various metrics like deployed revision and it&amp;#8217;s age, system load, etc in JSON and a Sinatra app to gather the data &amp;#8212; &amp;#8220;emulating&amp;#8221; services like NewRelic, Scout or FiveRun&amp;#8217;s Dash.
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;strong&gt;Satish&gt;&gt;&lt;/strong&gt; Anything else you would like to add?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Karel&gt;&gt;&lt;/strong&gt; Do come to the #sinatra IRC channel on Freenode when you get stuck. There&amp;#8217;s usually lots of people from different timezones, so it&amp;#8217;s very likely that we&amp;#8217;ll get you out of trouble fast. Just please read the README first and don&amp;#8217;t name your application file &amp;#8220;sinatra.rb&amp;#8221; &lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34; class=&#34;wp-smiley&#34; /&gt; Have fun with Ruby and Sinatra!
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#CC3333;&#34;&gt;&lt;em&gt;Thank you Karel. In case you have any queries and/or questions, kindly post your questions here (as comments to this blog post) and Karel would be glad to answer.&lt;/em&gt;&lt;/span&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &lt;b&gt;Others in this series:&lt;/b&gt;
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2015/01/07/corey-donohoe-how-do-i-learn-and-master-sinatra/&#34;&gt;Corey Donohoe&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/07/08/jeremy-evans-how-do-i-learn-and-master-sinatra/&#34;&gt;Jeremy Evans&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://rubylearning.com/blog/2009/07/10/graham-ashton-how-do-i-learn-and-master-sinatra/&#34;&gt;Graham Ashton&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p class=&#34;alert&#34;&gt;
    &lt;strong&gt;&lt;em&gt;Post supported by 1st Easy Limited&lt;/em&gt;:&lt;/strong&gt; UK based 1st Easy Limited offer Sinatra and Rails hosting running on a Phusion Passenger (mod_rails) and LAMP stack. If you want to try your hand at developing with Sinatra, why not let them arrange a &lt;a href=&#34;http://www.1steasy.com/ruby-on-rails.htm#try&#34;&gt;trial hosting account&lt;/a&gt; for you? You&amp;#8217;ll get to deploy your app, with full technical support from their team!
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Little Functional Programming Lexicon</title>
      <link>http://rubylearning.com/blog/2014/02/21/little-functional-programming-lexicon/</link>
      <pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2014/02/21/little-functional-programming-lexicon/</guid>
      <description>

&lt;p&gt;This guest post is by &lt;strong&gt;Elise Huard&lt;/strong&gt;, who is working as a freelance
software engineer. She has 15 years of software under her belt and is
keen on providing experienced advice as well as coding help. She has
programmed in Ruby for 6 years before turning to Clojure and Haskell,
and enjoys exploring the world of functional programming.
She lives in Berlin, Germany with her family.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/blog/blog/media/elisehuard.jpg&#34; alt=&#34;Elise Huard&#34; /&gt;
 With
Clojure, Scala and Haskell on the scene, functional programming is
getting a lot of attention. I’m going to explain some terms that are
related to functional programming, to help you understand, and – who
knows – nod intelligently random discussions you read or overhear.&lt;/p&gt;

&lt;p&gt;This is meant to be a little “Don’t panic” lexicon, not going incredibly
in-depth but trying to describe the terms in as simple and friendly a
way as possible. To know more, I invite you to read up on the concepts,
but I hope this’ll get you started.&lt;/p&gt;

&lt;h2 id=&#34;closure:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Closure&lt;/h2&gt;

&lt;p&gt;A closure is a function that “stores” the surrounding scope. An example
in javascript to make this clearer:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/891ad0bfc9034f37b62cf28aad74d2b177e6c09e/2014/02/21/little-functional-programming-lexicon/javascript_sample_1.js?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;The function multiplier returns another function, which will multiply
any given number with the argument &lt;em&gt;factor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The function that is returned by this function “closes” over &lt;em&gt;factor&lt;/em&gt; –
that is it will retain the factor variable information even though it is
no longer in the scope of the multiplier function. Every number that is
fed to the returned function will be multiplied by &lt;em&gt;factor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this example we used an argument of the surrounding scope, but it
could also be any other variable in the function scope.&lt;/p&gt;

&lt;h2 id=&#34;currying:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Currying&lt;/h2&gt;

&lt;p&gt;You have a function that takes several arguments – currying allows you
to apply one or more of these arguments and return a new function which
takes the remaining arguments. Applying one of the argument is called
&lt;em&gt;partial application&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In some programming languages, this is a very easy operation&lt;/p&gt;

&lt;p&gt;haskell currying&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/bc067e4c977d26a83ec6a26c27f7d222e0117859/2014/02/21/little-functional-programming-lexicon/haskell_currying.hs?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;in some others, it’s a little more work syntactically, but it’s possible&lt;/p&gt;

&lt;p&gt;javascript currying&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/bc067e4c977d26a83ec6a26c27f7d222e0117859/2014/02/21/little-functional-programming-lexicon/javascript_currying.js?embed=t&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;higher-order-functions:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Higher Order Functions&lt;/h2&gt;

&lt;p&gt;In functional languages functions are first-class citizens. You use them
more or less as you would use any other type of value (I say more or
less, because establishing equality of two functions is not possible,
you cannot compare 2 functions as you would some other types).&lt;/p&gt;

&lt;p&gt;Higher order functions act on this concept, and either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;take one or more functions as arguments – one example is map or
filter.&lt;/li&gt;
&lt;li&gt;return a function (like some of the earlier examples in
&lt;a href=&#34;#currying&#34;&gt;currying&lt;/a&gt; and &lt;a href=&#34;#closure&#34;&gt;closures&lt;/a&gt;) which can then be
used in later operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hindley-milner-type-system:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Hindley-Milner Type system&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system&#34;&gt;The Hindley-Milner type
system&lt;/a&gt;
is the name of a type system for the &lt;a href=&#34;#lambda-calculus&#34;&gt;lambda
calculus&lt;/a&gt;, which comes with a fast type inference
algorithm. It’s called Hindley-Milner because it was independently
described by first Roger Hindley, then Robin Milner.&lt;/p&gt;

&lt;p&gt;Type inference means you don’t have to specify the type of every single
variable or function (as is the case in java or C), because the compiler
will infer the type for you, which will save a lot of typing and makes
it nicer to read.&lt;/p&gt;

&lt;p&gt;The H-M type system is used in Haskell and ML type languages (like
OCaml).&lt;/p&gt;

&lt;h2 id=&#34;homoiconicity:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Homoiconicity&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Homoiconicity&#34;&gt;Homoiconicity&lt;/a&gt; means that
the abstract syntax tree has the same structure as the program. Going
from one to the other is a straightforward conversion.&lt;/p&gt;

&lt;p&gt;Another property of homoiconic languages is that the program
representation is also a data structure in the language.
 Example below, for Clojure: every expression is also a list (which is
why it’s a Lisp-like language, LISP = LISt Processing)&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/bc067e4c977d26a83ec6a26c27f7d222e0117859/2014/02/21/little-functional-programming-lexicon/lisp_example_1.lisp?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;The advantage of homoiconicity is that code = data. You can manipulate
your program as if it were data, since it’s effectively a data structure
already.
Homoiconicity is used in lisp-like languages to allow powerful macros –
anything that lisp can do to data structures, lisp macros can do to lisp
code. Move over ruby DSL metaprogramming!&lt;/p&gt;

&lt;h2 id=&#34;immutability:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Immutability&lt;/h2&gt;

&lt;p&gt;Strictly speaking &lt;em&gt;not&lt;/em&gt; a property of functional programming, though it
is a corrollary of purity. If your function can not change the state of
the program, variables will be immutable. Say adding an element of a
list will take a list as an argument and return another list, which is
the same but with the element added.&lt;/p&gt;

&lt;p&gt;This may seem like a dreadful waste of memory (especially when the data
structures/objects are large), but in functional programming languages
there are often optimizations under the hood which will re-use the
existing data structures.&lt;/p&gt;

&lt;p&gt;Immutability is considered an advantage when working in concurrent
programs. There is no danger that the data you’re currently working on
will be changed while you’re working on it, since it’s immutable. Then
there are strategies of reconciliation to work out which function output
will win.&lt;/p&gt;

&lt;h2 id=&#34;impure:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Impure&lt;/h2&gt;

&lt;p&gt;Impure programming languages allow &lt;a href=&#34;#side-effects&#34;&gt;side-effects&lt;/a&gt; in the
code without pointing them out with loud syntactic claxons.&lt;/p&gt;

&lt;p&gt;The difference between a pure and an impure programming language is that
in a pure programming language, it’s made very explicit when a function
has side effects, and which kind, and that it’s impossible to confuse
functions doing side-effecting with pure functions.&lt;/p&gt;

&lt;p&gt;Popular impure functional programming languages are Clojure and Lisps,
OCaml, with Scala and Javascript in their own category since they
implement both functional and object-oriented paradigm.&lt;/p&gt;

&lt;h2 id=&#34;lambda:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Lambda&lt;/h2&gt;

&lt;p&gt;greek letter λ used (in the functional programming context) to refer
to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#lambda-calculus&#34;&gt;lambda calculus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;an anonymous function – a function which is used immediately and
doesn’t need naming for further reference, for instance being passed
in as an argument to a &lt;a href=&#34;#higher-order-function&#34;&gt;higher order
function&lt;/a&gt; (like filter, map, etc).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;lambda-calculus:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Lambda calculus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;λ-calculus&lt;/a&gt;, Wikipedia
says, is a formal system for expressing computation based on function
abstraction and application using variable binding and substitution.
Lambda calculus is a universal model of computation (one can express
anything a Turing machine can do in lambda calculus).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Should you know the details of lambda calculus to do functional
programming?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, unless you’re really interested in the mathematical underpinnings of
functional programming, have some time and aren’t afraid to spend some
time reading with pen and paper scribbling mathematical formulas.&lt;/p&gt;

&lt;h2 id=&#34;lazy:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Lazy&lt;/h2&gt;

&lt;p&gt;Lazy evaluation (so not lazy like lying on the couch) is strictly
speaking independent of functional programming. It means that an
expression is only evaluated when the resulting value is used or
displayed. So you could have lazy evaluation in imperative languages.&lt;/p&gt;

&lt;p&gt;I mention it in this little lexicon because lazy evaluation was actually
introduced for the &lt;a href=&#34;#lambda-calculus&#34;&gt;lambda calculus&lt;/a&gt;, and Clojure and
Haskell (especially the latter) have plenty of lazily evaluated
functions in their standard library.&lt;/p&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;being able to create infinite list or series, and you only evaluate
elements as you need them&lt;/li&gt;
&lt;li&gt;only evaluate the part of a conditional structure that needs
evaluated (so in Ruby, if – else is actually lazily evaluated)&lt;/li&gt;
&lt;li&gt;sometimes performance gains by avoiding unnecessary calculations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;monads-et-al:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Monads (et Al.)&lt;/h2&gt;

&lt;p&gt;There are numerous text and blog posts about what monads are, some of
them crystal clear and some of them slightly obfuscating the concepts.
Here’s the thing though: unless you’re doing Haskell or similar
&lt;em&gt;statically typed &lt;a href=&#34;“#purity”&#34;&gt;pure&lt;/a&gt; functional languages&lt;/em&gt;, you don’t
really need to know what they are.&lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;monads allow people to bundle in side-effects in a pure typed
language (IO monad, state monad, etc). They have a type, which
indicates which kind of side-effect they’re used for&lt;/li&gt;
&lt;li&gt;monads also have a number of mathematical properties and associated
functions. Those functions are designed to let you daisy chain
monad-handling functions or to change ordinary functions to handle
monads.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other terms you might hear: Monoids, Functors, Applicative, … these are
also only really necessary in the context of Haskell and company.
Learning about them when you’re working in other types of languages
might be interesting in the abstract, but is not essential to your
everyday programming.&lt;/p&gt;

&lt;h2 id=&#34;purity:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Purity&lt;/h2&gt;

&lt;p&gt;Purity can be used in two contexts: a pure programming language, and a
pure function.&lt;/p&gt;

&lt;p&gt;Purity for a functional programming language means:
&lt;a href=&#34;#side-effects&#34;&gt;side-effecting&lt;/a&gt; has to be explicitly indicated, as is
the case for Haskell (both in the function signature, usually returning
&lt;a href=&#34;#monads&#34;&gt;monads&lt;/a&gt;, and in the code).&lt;/p&gt;

&lt;p&gt;In pure functions, there are no ‘leaks’. A pure function’s &lt;em&gt;only&lt;/em&gt; input
are its arguments, and its &lt;em&gt;only&lt;/em&gt; output is its return value(s). This
brings us to &lt;a href=&#34;#referentialtransparency&#34;&gt;referential transparency&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;referential-transparency:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Referential Transparency&lt;/h2&gt;

&lt;p&gt;This is a property of pure functions – if you apply a function on a set
of input, then it will &lt;em&gt;always&lt;/em&gt; return the same output. This is due to
the lack of side-effects (see &lt;a href=&#34;#side-effects&#34;&gt;side-effects&lt;/a&gt; for
explanation), which means no hidden parameters will change anything
about the execution.&lt;/p&gt;

&lt;p&gt;As an example of a function that wouldn’t be referentially transparent,
consider a function that would use a random number in its result. The
random number (a side-effect) will change the result every time the
function is run, so the function is not referentially transparent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;why is this useful?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, referentially transparent part of the program are dependable and
easy to test. You only have to test on the sets of expected arguments
without setting up any other state that could influence it, and it will
reliably crank out the same output every time you run it.&lt;/p&gt;

&lt;h2 id=&#34;side-effects:6b7bb2a86a1b72597299285da5b56023&#34;&gt;Side Effects&lt;/h2&gt;

&lt;p&gt;Side effects are everything that can change the state of the world –
that means the state of your program (outside of the scope of current
function), or the standard output of your terminal, or a file, or
database content.&lt;/p&gt;

&lt;p&gt;Let’s be clear, a program has to have side effects (if only displaying a
result in the terminal), otherwise it has very little point. Let’s put
it more strongly: the program’s sole reason of existence is to have some
desired side-effects, like migrating a database, showing a web page,
calculating some statistics and showing them to you&lt;/p&gt;

&lt;p&gt;I hope this was helpful and will give you some terms to be going on
with! Welcome to the wonderful world of functional programming, I wish
you all a pleasant journey!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to ask questions and give feedback in the comments section of
this post. Thanks!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Routing Basics: Ruby on Rails for Front-End Developers</title>
      <link>http://rubylearning.com/blog/2014/01/29/routing-basics-ruby-on-rails-for-front-end-developers/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2014/01/29/routing-basics-ruby-on-rails-for-front-end-developers/</guid>
      <description>

&lt;h2 id=&#34;routing-basics-ruby-on-rails-for-front-end-developers:4e7b8dbbe1de83e198d0a24ae124a1b5&#34;&gt;Routing Basics: Ruby on Rails for Front-End Developers&lt;/h2&gt;

&lt;p&gt;This guest post is by&amp;nbsp;&lt;strong&gt;Miles Matthias&lt;/strong&gt;, who in between
trips and sips, usually with planes and bourbon, enjoys talking to people
about difficult challenges and tapping on his keyboard to help solve them.
He moved to Boulder in January of 2012, after meeting his future wife and
picking up degrees in Computer Science and Information Assurance in Omaha,
Nebraska. Boulder was his ninth move after growing up in Virginia, Kansas,
Illinois, and Indiana, and would be more than happy if Colorado became his
permanent home. With experience in network security monitoring,
vulnerability assessments, red hat teaming, bash scripting, and web and iOS
development, he enjoys building simple and beautiful applications,
contributing to the open source community, and writing about his life
experiences.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Miles Matthias&#34;
src=&#34;http://rubylearning.com/images/MilesMatthias.jpg&#34; width=&#34;125&#34; height=&#34;125&#34;
/&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an excerpt from my book&amp;rsquo;s chapter on routing, and then I&amp;rsquo;ll give you
some examples:&lt;/p&gt;

&lt;h2 id=&#34;routes-config:4e7b8dbbe1de83e198d0a24ae124a1b5&#34;&gt;Routes config&lt;/h2&gt;

&lt;p&gt;Remember that bit about convention over configuration? Well rails definitely
prefers configuration to convention in one instance &amp;ndash; routes. In the file
&lt;code&gt;config/routes.rb&lt;/code&gt;, you&amp;rsquo;ll find direction given to the rails router on which
controller method to call for a given request. Here&amp;rsquo;s a simple route
declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rails&#34;&gt;match &#39;articles&#39;, to: &#39;articles#index&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a user makes a request to &lt;code&gt;yoursite.com/articles&lt;/code&gt;, the rails router will
look for a controller called &lt;code&gt;ArticlesController&lt;/code&gt; and if there&amp;rsquo;s a method
called &lt;code&gt;index&lt;/code&gt;, it will call it, passing along the information in the request.
Then it&amp;rsquo;s up to the controller to respond.&lt;/p&gt;

&lt;h2 id=&#34;resources:4e7b8dbbe1de83e198d0a24ae124a1b5&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll also see what rails calls &lt;code&gt;resources&lt;/code&gt; in the routes file, which promotes
the convention over configuration pattern. Resources handle the 85% case where
your application is representing standard RESTful CRUD operations on a &amp;lsquo;thing&amp;rsquo;,
such as an article. The above example route could be replaced with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rails&#34;&gt;resources :articles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which would then mandate that the method names in the matching controller match
the rails resourceful actions.&lt;/p&gt;

&lt;h2 id=&#34;examples:4e7b8dbbe1de83e198d0a24ae124a1b5&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;If we had the following in your &lt;code&gt;config/routes.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rails&#34;&gt;resources :articles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and our &lt;code&gt;/app/controllers/articles_controller.rb&lt;/code&gt; file looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rails&#34;&gt;class ArticlesController &amp;lt; ApplicationController
  def index
    @articles = Article.all
  end
  def show
    @article = Article.find(params[:id])
  end
  def edit
    @article = Article.find(params[:id])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the list of what HTTP Verbs and URL combinations match to what methods
inside a controller:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://draftin.com:443/images/8207?token=RfEJPDQAtoETzsOHSeHWJfDgHHYF2mPCJCqj-mBULXEgHHS7BmmbHwfL1IVM1qCU2zCxrt7d3LIUboyzJGQ3ir0&#34; alt=&#34;&#34; width=&#34;670&#34; /&gt;&lt;br /&gt;&lt;em&gt;(Credit: &lt;a href=&#34;http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions&#34;&gt;http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice in the controller that we didn&amp;rsquo;t call &lt;code&gt;render&lt;/code&gt; at all. That&amp;rsquo;s because
Rails automatically attempts to render a view that has a filename of the same
name of the method called in the controller. If it can&amp;rsquo;t find one, it will
default to the &lt;code&gt;index.html&lt;/code&gt; view for the controller, or the application
&lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, if someone wanted to get an article at
&lt;code&gt;http://mywebsite.com/articles/1234&lt;/code&gt;, Rails would call the &lt;code&gt;show&lt;/code&gt; method in our
controller with &lt;code&gt;1234&lt;/code&gt; as the id param. That method (above) will find the
article that matches that id and then rails will call render on a view in
&lt;code&gt;/app/views/articles/show.html.erb&lt;/code&gt;. Here&amp;rsquo;s an example of what that view might
look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rhtml&#34;&gt;&amp;lt;h1&amp;gt;
    &amp;lt;%= @article.title %&amp;gt;
&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;
    by &amp;lt;%= @article.author %&amp;gt;
&amp;lt;/h2&amp;gt;
&amp;lt;%= @article.body %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;d like to learn more about how Ruby on Rails&amp;rsquo; front-end stack works or
you&amp;rsquo;re a front-end developer needing to do some work in Ruby on Rails, check
out my book, &lt;a href=&#34;http://dojo4.com/blog/we-wrote-a-book&#34;&gt;&amp;ldquo;Ruby on Rails
Explained for Front-End Developers&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to ask questions and give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Lousy to Beautiful</title>
      <link>http://rubylearning.com/blog/2014/01/24/from-lousy-to-beautiful/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2014/01/24/from-lousy-to-beautiful/</guid>
      <description>

&lt;p&gt;This guest post is by &lt;strong&gt;James Schorr&lt;/strong&gt;, who has been developing software
since 1999. He is the owner of an IT consulting company, &lt;a href=&#34;https://enspirenconsulting.com&#34;&gt;Enspiren IT
Consulting, LLC&lt;/a&gt;.  He lives with his
lovely wife, Tara, and their children in Kansas City, Missouri. James
spends a lot of time writing code in many languages, doing IT security
audits, and has a passion for Ruby on Rails in particular. He also loves
spending time with his family, playing chess, going to the shooting
range, hiking, fishing, and investing. His professional profile is
on &lt;a href=&#34;http://www.linkedin.com/in/jamesschorr&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/James_Schorr.png&#34; alt=&#34;James M. Schorr&#34; /&gt;
 Due
to the inherent flexibility of Ruby, there are often several ways of
doing the same thing. But how do you recognize the best way, the
“beautiful” way to go about something? It can be tough to describe and
there may indeed be several “best ways” to do something. The ease of
expressing real life through Ruby can give us a false sense of security.
I have come to realize that terrible code can be written — even with
such a beautiful language.&lt;/p&gt;

&lt;p&gt;Let us work through a simple example together. In our example, we’re
calling a remote API service with
&lt;a href=&#34;https://github.com/jnunemaker/httparty&#34;&gt;&lt;code&gt;HTTParty&lt;/code&gt;&lt;/a&gt;, and parsing
through the JSON response, which consists of a simple array of stats,
which we’ll refer to as “Today’s Stats”. Please note that comments in
the code intended just for the reader of this article will be prefaced
with ‘## Reader’. Hopefully, you’ll see the progression of the code’s
quality as we go.&lt;/p&gt;

&lt;p&gt;Here’s our first attempt, which is pretty lousy. Can you spot a few of
the reasons why?&lt;/p&gt;

&lt;h2 id=&#34;attempt-1-blind-trust:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;Attempt 1 – Blind Trust&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module StatsApi
  require &#39;json&#39;
  require &#39;httparty&#39;
  require &#39;jsonpath&#39;

  def find_users_stats(users_handle)
    params = { user: users_handle }
    a = HTTParty.get(&#39;http://928just-a-bogus-example-site.com/stats&#39;, params)
    t = JsonPath.on(a.body, &#39;$.&#39;).first
    u = t.select {|k,v| k[&#39;user&#39;] == users_handle }.first
    @users_stats = u[&#39;stats&#39;]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you spot the issues? There are quite a few, some that affect us now
and some that might affect us in the future. For now, let’s focus on the
most pressing, immediate issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are trusting that our call to the API will succeed.&lt;/li&gt;
&lt;li&gt;We are trusting that the account that we pull back will indeed have
the user that we’re looking for.&lt;/li&gt;
&lt;li&gt;In both cases, we are then attempting to parse through the data that
may not even make it back to us or have what we expect it to have.&lt;/li&gt;
&lt;li&gt;What does ‘a’, ‘t’, and ‘u’ represent? Would the next developer
working on this code know what I’m referring to? While it saves
space, it isn’t very friendly to the next developer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;attempt-2-handling-the-unexpected:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;Attempt 2 – Handling the Unexpected&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;module StatsApi
  require &#39;json&#39;
  require &#39;httparty&#39;
  require &#39;active_support/core_ext/string&#39; ## Reader: provides .present? and .blank?
  require &#39;jsonpath&#39;

   def find_users_stats(users_handle)
    params = { user: users_handle }

    a = HTTParty.get(&#39;http://928just-a-bogus-example-site.com/stats&#39;, params)
    ## Reader: .present? (or .blank? when appropriate) can be nice to use as they checks for more than just nil.
    ## Additionally, we make sure that &#39;a&#39; is &#39;present?&#39; before calling &#39;response&#39; on it.
    if a.code == 200
      todays_stats = JsonPath.on(a.body, &#39;$.&#39;).first
      if todays_stats.present?
        users_info = todays_stats.select {|k,v| k[&#39;user&#39;] == users_handle }.first
        if users_info.present?
          @users_stats = users_info[&#39;stats&#39;]
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we seem to have solved a couple of issues, but this code could still
be improved a bit. Notice that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nothing is returned if the call to the API fails or the user’s stats
aren’t found. Now, of course in the code that calls this method, we
could handle that there but is that the “beautiful” thing to do?
Perhaps in the future we’ll have 10 areas in our code that call this
method.&lt;/li&gt;
&lt;li&gt;Nested if statements are present — ugh. When I was newer to Ruby, I
would often write a lot of these; reading through them months later
made my head hurt. It certainly wasn’t beautiful to look at and made
it tough to follow as more logic was added over time. Thankfully,
there is a better way.&lt;/li&gt;
&lt;li&gt;Note that we could add more conditionals to ‘a’ to ensure that
&lt;a href=&#34;https://github.com/jnunemaker/httparty&#34;&gt;&lt;code&gt;HTTParty&lt;/code&gt;&lt;/a&gt; returned a
response correctly, but we’re going to choose not to as it’s a
well-tested gem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;attempt-3-bringing-clarity:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;Attempt 3 – Bringing Clarity&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;module StatsApi
  require &#39;json&#39;
  require &#39;httparty&#39;
  require &#39;active_support/core_ext/string&#39;
  require &#39;jsonpath&#39;

  def find_users_stats(users_handle)
    # This will call the Stats API and pull back the user&#39;s stats.
    params = { user: users_handle }

    todays_stats = HTTParty.get(&#39;http://928just-a-bogus-example-site.com/stats&#39;, params)
    raise &amp;quot;Today&#39;s Stats not found.&amp;quot; if todays_stats.code != 200

     # Finding the User&#39;s information...
    users_info = todays_stats.select {|k,v| k[&#39;user&#39;] == users_handle }.first
    raise &amp;quot;User&#39;s stats not found.&amp;quot; if users_info.blank?

    # Determining the User&#39;s Stats...
    @users_stats = users_info[&#39;stats&#39;]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, we’re getting closer. Now we have ‘todays_stats’ and
‘users_info’ in the code so that it’s more  clear as to what we’re
referring to and an appropriate error message is returned if the account
or user are now found. Notice how we added a little white-space and
comments to make it easier to read. However, we’re still calling the API
and also parsing through stats in this one method. This might be fine
for now if we only call the API for one purpose. But what about the
future? What if a need arises to adjust the stats, add new stats, etc…
via the API?&lt;/p&gt;

&lt;p&gt;Let’s try to future-proof our code a bit by making it more flexible and
configurable. We’ll use the excellent
&lt;a href=&#34;https://github.com/binarylogic/settingslogic&#34;&gt;Settingslogic&lt;/a&gt; gem (you
can add that yourself) to make the API settings configurable. This will
help when the Stats API’s URL, version, etc… changes. We’ll also add a
method to adjust the user’s stats and one that performs the actual API
call. Notice how we can accomplish this by using ‘send’. Thus the
various HTTP verbs can all be used as desired while keeping the code
pretty DRY.&lt;/p&gt;

&lt;h2 id=&#34;attempt-4-sustainability:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;Attempt 4 – Sustainability&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;module StatsApi
  require &#39;json&#39;
  require &#39;httparty&#39;
  require &#39;active_support/core_ext/string&#39;
  require &#39;jsonpath&#39;

  def find_users_stats(users_handle)
    params = { user: users_handle }
    call_stats_api(&#39;get&#39;, 200, true, params)
    raise @error = &#39;Account not found.&#39; unless @call_succeeded

    todays_stats = JsonPath.on(@result.body, &#39;$.&#39;).first
    raise @error = &amp;quot;Today&#39;s Stats were not found.&amp;quot; if todays_stats.blank?
    users_info = todays_stats.select {|k,v| k[&#39;user&#39;] == users_handle }.first
    raise @error = &amp;quot;User&#39;s Stats not found.&amp;quot; if users_info.blank?

    @users_stats = users_info[&#39;stats&#39;]
  end

  def adjust_users_stats(new_stats)
    call_stats_api(&#39;put&#39;, 201, new_stats)
    raise @error = &#39;Stats adjustment failed.&#39; unless @call_succeeded
  end

  private
  def call_stats_api(http_verb, success_code, response_body_reqd=false, data=nil)
    begin
      params = { headers: AppSettings::Api.stats_headers, version: AppSettings::Api.stats_version,
                 format: AppSettings::Api.stats_format }
      raise &#39;Invalid data received&#39; unless data.is_a?(Hash)
      params[:body] = data.to_json
      @result = HTTParty.send(http_verb, AppSettings::Api.stats_url, params)
      code_matches = @result.code == success_code
      @call_succeeded = response_body_reqd ? @result.body.present? &amp;amp;&amp;amp; code_matches :
                                             code_matches
    rescue =&amp;gt; e
      @error = e
      Rails.logger.error(&amp;quot;Sorry, an error occurred: #{e}&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our code is quite a bit more flexible, configurable, and easier to
maintain.  Let’s add some comments in to explain to the next developer
what’s going on.&lt;/p&gt;

&lt;h2 id=&#34;attempt-5-clarity:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;Attempt 5 – Clarity&lt;/h2&gt;

&lt;h3 id=&#34;module-statsapi:58e89a658643cf8201c6dc76a7d7b8ea&#34;&gt;module StatsApi&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;require &#39;json&#39;
require &#39;httparty&#39;
require &#39;active_support/core_ext/string&#39;
require &#39;jsonpath&#39;

## Reader: note that @error is raised so that we can easily handle that in our parent methods...

def find_users_stats(users_handle)
  # This will call the Stats API and pull back the user&#39;s stats.
  # All of the API settings are found in config/settings/api.yml.

  # Finding the Account...
  params = { user: users_handle }
  call_stats_api(&#39;get&#39;, 200, true, params)
  ## Reader: note that the following line is optional as you could have conditional code in
  ## the parental method based on @call_succeeded.
  raise @error = &#39;Account not found.&#39; unless @call_succeeded

  # Finding the User&#39;s information...
  ## Reader note that we raise @error so that we can easily handle that in our parent methods...
  todays_stats = JsonPath.on(@result.body, &#39;$.&#39;).first
  raise @error = &amp;quot;Today&#39;s Stats were not found.&amp;quot; if todays_stats.blank?
  users_info = todays_stats.select {|k,v| k[&#39;user&#39;] == users_handle }.first
  raise @error = &amp;quot;User&#39;s Stats not found.&amp;quot; if users_info.blank?

  # Determining the User&#39;s Stats...
  @users_stats = users_info[&#39;stats&#39;]
end

def adjust_users_stats(new_stats)
  # Adjusts the users stats with the new_stats Hash.
  call_stats_api(&#39;put&#39;, 201, new_stats)
  ## Reader: note that the following line is optional as you could have conditional code in
  ## the parental method based on @call_succeeded.
  raise @error = &#39;Stats adjustment failed.&#39; unless @call_succeeded
end

private
def call_stats_api(http_verb, success_code, response_body_reqd=false, data=nil)
  begin
    # This calls the Stats API, passing along the necessary params. The data refers to what
    # should go in the JSON payload.  The success_code is the desired code that the parent method
    # would consider to be &#39;successful&#39;.  This allows us to pass in the actual HTTP status codes
    # that the 3rd party API returns.
    ## Reader: Note that the various Settings mentioned below reference the
    ## config/settings/api.yml file in order to make it very easy to change things in the future.

    ## Optional but more future-proof; these don&#39;t have to be configurable but probably should be:
    params = { headers: AppSettings::Api.stats_headers, version: AppSettings::Api.stats_version,
               format: AppSettings::Api.stats_format }

    # Adding the JSON data to the params...
    ## Reader: notice that we don&#39;t blindly trust that the data parameter is indeed
    ## a hash; what if something else was sent to this method by mistake?
    raise &#39;Invalid data received&#39; unless data.is_a?(Hash)
    params[:body] = data.to_json

    ## Reader: notice that we use Object&#39;s &#39;send&#39; so that we only need one method
    ## for API calls with the desired HTTP verb. The following line will be what&#39;s
    ## returned to the parent method.

    ## Optional (you can just write in the URL if you wish) but more future-proof:
    @result = HTTParty.send(http_verb, AppSettings::Api.stats_url, params)

    # Determining the success of the response.
    code_matches = @result.code == success_code

    ## Reader: if the response_body_reqd is set, then a call is only considered successful if the
    ## response code matches and the body has data in it. Otherwise, only a matching code is considered
    ## successful.
    @call_succeeded = response_body_reqd ? @result.body.present? &amp;amp;&amp;amp; code_matches :
                                           code_matches
    rescue =&amp;gt; e
      ## Reader: notice that in production-ready code, we&#39;d never return the real error message to the
      ## end user as it would expose too much and not be very human friendly.  It would probably be best
      ## to just return a &amp;quot;human-friendly&amp;quot; error message and log the atual one.
      @error = e
      Rails.logger.error(&amp;quot;Sorry, an error occurred: #{e}&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few spots where we could probably get away with removing our
comments since the variables are so aptly named. We could also (and
should if there are needs for other types of APIs to be called) create a
new class that calls APIs. We’ll leave that for another day, though.&lt;/p&gt;

&lt;p&gt;In general, though, our code has improved quite a bit.&lt;/p&gt;

&lt;p&gt;Here are a few Ruby resources that I would like to recommend (discounts
given with author’s permission):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t.co/z8zgvNddf5&#34;&gt;The Ultimate Guide to Ruby Programming&lt;/a&gt; by
Satish Talim (50% off)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.confidentruby.com/&#34;&gt;Confident Ruby&lt;/a&gt; by Avdi Grimm (use
promo code RUBYLEARN14 for 20% off)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.exceptionalruby.com/&#34;&gt;Exceptional Ruby&lt;/a&gt; by Avdi Grimm
(use promo code RUBYLEARN14 for 20% off)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rubytapas.dpdcart.com/subscriber/content&#34;&gt;Ruby Tapas Sreencasts&lt;/a&gt; by
Avdi Grimm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104&#34;&gt;Eloquent Ruby&lt;/a&gt; by
Russ Olsen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/The-Ruby-Way-Second-Edition/dp/0672328844&#34;&gt;The Ruby Way&lt;/a&gt; by
Hal Fulton&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Feel free to ask questions and give feedback in the comments section of
this post. Thanks!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sinatra and Google Currency API - Part 2</title>
      <link>http://rubylearning.com/blog/2013/09/13/sinatra-and-google-currency-api---part-2/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2013/09/13/sinatra-and-google-currency-api---part-2/</guid>
      <description>&lt;div&gt;
  &lt;h2&gt;
    Sinatra and Google Currency API &amp;#8211; Part 2
  &lt;/h2&gt;
  
  &lt;p class=&#34;update&#34;&gt;
    This guest post is by &lt;b&gt;Girish Sonawane&lt;/b&gt;, a self-taught programmer. He came across Ruby in 2008 and has since been working full-time on Ruby. He worked as a Rails freelancer and later co-founded &lt;a href=&#34;http://cuberoot.in/&#34;&gt;Cube Root&lt;/a&gt;, an exclusive Ruby on Rails software boutique catering to outsourced work. His interests are everything related to technology or science. You can reach him at &lt;a href=&#34;mailto:girish@cuberoot.in&#34;&gt;girish@cuberoot.in&lt;/a&gt; or via twitter @girishso.
  &lt;/p&gt;
  
  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; alt=&#34;Girish Sonawane&#34; src=&#34;http://rubylearning.com/images/girishsonawane.png&#34; width=&#34;125&#34; height=&#34;125&#34; /&gt; &lt;strong&gt;&lt;span class=&#34;drop_cap&#34;&gt;I&lt;/span&gt;&lt;/strong&gt;n this two-part series, I will show you how to use Google currency conversion API and use it in a small Sinatra app. In &lt;a href=&#34;http://rubylearning.com/blog/2013/09/04/sinatra-and-google-currency-api-part-1/&#34;&gt;Part 1&lt;/a&gt; we built a small function to access the Google API for currency conversion. This is Part 2, where we will build a small Sinatra app using the function we created in Part 1.
  &lt;/p&gt;
  
  &lt;p&gt;
    The source code for this series is available on &lt;a href=&#34;https://github.com/girishso/goog_currency_tutorial&#34;&gt;Github&lt;/a&gt;, with commits for each step. This little library is available as a Ruby Gem at &lt;a href=&#34;https://rubygems.org/gems/goog_currency&#34;&gt;GoogCurrency&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Wireframes
  &lt;/h3&gt;
  
  &lt;p&gt;
    We will have two screens, one with a form where a user can submit data and another showing the result.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Home page&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://rubylearning.com/images/bloghome.png&#34; width=&#34;600&#34; title=&#34;Home&#34; alt=&#34;Home&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Results page&lt;/code&gt;&lt;br /&gt; &lt;img src=&#34;http://rubylearning.com/images/blogresult.png&#34; width=&#34;600&#34; title=&#34;Result&#34; alt=&#34;Results&#34; /&gt;
  &lt;/p&gt;
  
  &lt;h3&gt;
    Sinatra
  &lt;/h3&gt;
  
  &lt;p&gt;
    Since this is a very basic app, we are going to use Sinatra in classic style. We need following files.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;Gemfile&lt;/code&gt; for all the gem dependencies.
  &lt;/p&gt;
  
  &lt;pre&gt;1 source &#39;https://rubygems.org&#39;
2
3 gem &#34;rest-client&#34;, &#34;1.6.7&#34;
4 gem &#34;json&#34;, &#34;1.8.0&#34;
5 gem &#34;rspec&#34;, &#34;2.14.1&#34;
6 gem &#34;fakeweb&#34;, &#34;1.3.0&#34;
7 gem &#34;sinatra&#34;, &#34;1.4.3&#34;
8 gem &#34;capybara&#34;, &#34;2.1.0&#34;
9 gem &#34;haml&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;config.ru&lt;/code&gt; required to run the app on Rack servers like Passenger, Heroku etc.
  &lt;/p&gt;
  
  &lt;pre&gt;1 require &#39;bundler&#39;
2 Bundler.require
3 require &#39;./app&#39;
4 run Sinatra::Application
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;Bundler.require&lt;/code&gt; will require all the gems listed in our Gemfile and made available to our Sinatra app.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s create an empty &lt;code&gt;app.rb&lt;/code&gt;, the main Sinatra app file with &lt;code&gt;touch app.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Continuing with the same spirit as Part 1, we are going to test drive this app. We are going to use &lt;code&gt;capybara&lt;/code&gt; for acceptance tests.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;spec/acceptance_spec.rb&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1  require &#39;bundler&#39;
2  Bundler.require
3
4  disable :run
5  set :root, File.dirname(__FILE__) + &#34;/..&#34;
6  require Sinatra::Application.root + &#39;/app&#39;
7
8  Capybara.app = Sinatra::Application
9
10 RSpec.configure do |config|
11   config.include Capybara::DSL
12 end
13
14 describe &#39;currency converter&#39; do
15   it &#34;loads currency converter form&#34;
16   it &#34;converts currencies&#34;
17   it &#34;handles errors&#34;
18 end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 4, disables the web server, we don&amp;#8217;t need a webserver for specs. Line 8, tells &lt;code&gt;capybara&lt;/code&gt; it&amp;#8217;s a Sinatra app. Line 11, makes &lt;code&gt;capybara&lt;/code&gt; DSL available to our specs.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 15, 16, 17, adds three pending specs.
  &lt;/p&gt;
  
  &lt;p&gt;
    If we execute our spec now with &lt;code&gt;rspec spec/acceptance_spec.rb&lt;/code&gt;, it says:
  &lt;/p&gt;
  
  &lt;pre&gt;1  ***
2
3  Pending:
4    currency converter loads currency converter form
5      # Not yet implemented
6      # ./spec/acceptance_spec.rb:15
7    currency converter converts currencies
8      # Not yet implemented
9      # ./spec/acceptance_spec.rb:16
10   currency converter handles errors
11     # Not yet implemented
12     # ./spec/acceptance_spec.rb:17
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s define the first spec and make it pass.
  &lt;/p&gt;
  
  &lt;pre&gt;1 it &#34;loads currency converter form&#34; do
2     visit &#34;/&#34;
3     page.should have_content(&#34;Currency Converter&#34;)
4     find(&#39;form&#39;).should have_button(&#39;Convert&#39;)
5   end
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;capybara&lt;/code&gt; simulates user interactions with the website. &lt;code&gt;visit &#34;/&#34;&lt;/code&gt; takes the user to the home page of the site as expected. Line 3, checks for existence of &amp;#8220;Currency Converter&amp;#8221; text on the page. Line 4, expects a &lt;code&gt;form&lt;/code&gt; with the &lt;code&gt;Convert&lt;/code&gt; button.
  &lt;/p&gt;
  
  &lt;p&gt;
    Typically, there is no need of such granular level testing, but this tells us if the test suite is working as expected.
  &lt;/p&gt;
  
  &lt;p&gt;
    Executing the spec fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 expected #has_content?(&#34;Currency Converter&#34;) to return true, got false
&lt;/pre&gt;
  
  &lt;p&gt;
    Now to make this spec pass, let&amp;#8217;s modify &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 get &#34;/&#34; do
2     haml :&#34;index&#34;
3   end
&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;get &#34;/&#34;&lt;/code&gt; loads the home page. We are using &lt;code&gt;haml&lt;/code&gt; view templates instead of &lt;code&gt;erb&lt;/code&gt;. It expects &lt;code&gt;views/index.haml&lt;/code&gt; in views folder. Let&amp;#8217;s add it.
  &lt;/p&gt;
  
  &lt;pre&gt;1 %h1 Currency Converter
2
3   %form(action = &#34;/convert&#34; method = &#34;post&#34;)
4
5       %input#convert(type=&#34;submit&#34; value=&#34;Convert&#34;)
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s also add a layout &lt;code&gt;views/layout.haml&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 !!!
2   %html
3     %head
4       %title Currency Conversion Tutorial
5     %body
6       = yield
&lt;/pre&gt;
  
  &lt;p&gt;
    Executing specs with &lt;code&gt;rspec spec/acceptance_spec.rb&lt;/code&gt; passes the spec. We are good to go with the next pending spec.
  &lt;/p&gt;
  
  &lt;pre&gt;1  valid_response =&amp;lt;&amp;lt;-VALID
2    {lhs: &#34;1 U.S. dollar&#34;,rhs: &#34;54.836587 Indian rupees&#34;,error: &#34;&#34;,icc: true}
3    VALID
4    .
5    .
6    .
7    it &#34;converts currencies&#34; do
8      FakeWeb.register_uri(:get,
9                         &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=1USD=?INR&#34;,
10                        :status =&gt; &#34;200&#34;,
11                        :body =&gt; valid_response)
12     visit &#39;/&#39;
13
14     fill_in &#34;amount&#34;, :with =&gt; 1
15     select &#34;USD&#34;, :from =&gt; &#34;from&#34;
16     select &#34;INR&#34;, :from =&gt; &#34;to&#34;
17     click_button &#39;Convert&#39;
18
19     find(&#34;#result&#34;).should have_content(&#39;54.836587&#39;)
20   end
&lt;/pre&gt;
  
  &lt;p&gt;
    We are again using &lt;code&gt;fakeweb&lt;/code&gt; gem to simulate the Google API interaction, Line 8.
  &lt;/p&gt;
  
  &lt;p&gt;
    We are simulating user converting 1 USD to INR, using &lt;code&gt;capyabara&lt;/code&gt; DSL to simulate the user interactions
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 12, visit home page.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 14, Fill &lt;code&gt;amount&lt;/code&gt; input field with 1.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 15, select &lt;code&gt;USD&lt;/code&gt; from &lt;code&gt;from&lt;/code&gt; currencies select box.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 16, select &lt;code&gt;INR&lt;/code&gt; from &lt;code&gt;to&lt;/code&gt; currencies select box.
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 18, click button &amp;#8220;Convert&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    Line 20, we expect to have &lt;code&gt;#result&lt;/code&gt; with the converted amount.
  &lt;/p&gt;
  
  &lt;p&gt;
    Executing spec fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find field &#34;amount&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    Let&amp;#8217;s go ahead and add the &lt;code&gt;amount&lt;/code&gt; field and other fields as well in &lt;code&gt;index.haml&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;pre&gt;1  %h1 Currency Converter
2
3  %form(action = &#34;/convert&#34; method = &#34;post&#34;)
4    %fieldset
5      %legend
6      From
7      %input#amount(name=&#34;amount&#34;)
8
9      %select#from(name=&#34;from&#34;)
10       %option(value=&#34;inr&#34;) INR
11       %option(value=&#34;usd&#34;) USD
12       %option(value=&#34;eur&#34;) EUR
13
14     To
15     %select#to(name=&#34;to&#34;)
16       %option(value=&#34;inr&#34;) INR
17       %option(value=&#34;usd&#34;) USD
18       %option(value=&#34;eur&#34;) EUR
19
20     %input#convert(type=&#34;submit&#34; value=&#34;Convert&#34;)
&lt;/pre&gt;
  
  &lt;p&gt;
    Executing the spec now fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find css &#34;#result&#34;
&lt;/pre&gt;
  
  &lt;p&gt;
    To fix this, we need to add &lt;code&gt;post &#34;/convert&#34;&lt;/code&gt; handler in &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 post &#34;/convert&#34; do
2   @result = GoogCurrency.send(&#34;#{params[:from]}_to_#{params[:to]}&#34;.to_sym, params[:amount])
3   haml :&#34;convert&#34;
4 end
&lt;/pre&gt;
  
  &lt;p&gt;
    Line 2, we are generating the GoogCurrency method to call dynamically. &lt;code&gt;params[:form]&lt;/code&gt;, &lt;code&gt;params[:to]&lt;/code&gt; have the from and to currencies respectively. &lt;code&gt;params[:amount]&lt;/code&gt; has the amount to convert. &lt;code&gt;&#34;#{params[:from]}_to_#{params[:to]}&#34;&lt;/code&gt; gets converted to &lt;code&gt;usd_to_inr&lt;/code&gt; in our case. But how do we invoke this method? In Ruby, we don&amp;#8217;t invoke methods, we send a message to the object and the object responds to the message. To invoke this method we &lt;code&gt;send&lt;/code&gt; message &lt;code&gt;usd_to_inr&lt;/code&gt; to &lt;code&gt;GoogCurrency&lt;/code&gt;, along with the method parameter (&lt;code&gt;amount&lt;/code&gt;).
  &lt;/p&gt;
  
  &lt;p&gt;
    Then we render &lt;code&gt;haml&lt;/code&gt; template &lt;code&gt;convert&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;convert.haml&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;pre&gt;1 %div
2   #{params[:amount]} #{params[:from]} =
3   %span#result= @result
4   #{params[:to]}
5
6 %a(href=&#34;/&#34;) Back
&lt;/pre&gt;
  
  &lt;p&gt;
    The spec now passes.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now, we only have one more spec left i.e. &amp;#8220;currency converter handles errors&amp;#8221;. Let&amp;#8217;s get at it.
  &lt;/p&gt;
  
  &lt;pre&gt;1  it &#34;handles errors&#34; do
2      invalid_response =&amp;lt;&amp;lt;-INVALID
3      {lhs: &#34;&#34;,rhs: &#34;&#34;,error: &#34;4&#34;,icc: false}
4      INVALID
5      FakeWeb.register_uri(:get,
6                           &#34;http://www.google.com/ig/calculator?hl=en&amp;#038;q=xyzUSD=?INR&#34;,
7                           :status =&gt; &#34;200&#34;,
8                           :body =&gt; invalid_response)
9
10     visit &#39;/&#39;
11
12     fill_in &#34;amount&#34;, :with =&gt; &#34;xyz&#34;
13     select &#34;USD&#34;, :from =&gt; &#34;from&#34;
14     select &#34;INR&#34;, :from =&gt; &#34;to&#34;
15     click_button &#39;Convert&#39;
16
17     find(&#34;#error&#34;).should have_content(&#34;An error occurred: 4&#34;)
18   end
&lt;/pre&gt;
  
  &lt;p&gt;
    It&amp;#8217;s similar to the earlier spec, but &lt;code&gt;Fakeweb&lt;/code&gt; now returns an error response, because the &lt;code&gt;amount&lt;/code&gt; is invalid. Executing the spec now fails with:
  &lt;/p&gt;
  
  &lt;pre&gt;1 Unable to find css &#34;#error&#34;&lt;/pre&gt;
  
  &lt;p&gt;
    To make this spec pass, let&amp;#8217;s handle the exception raised by &lt;code&gt;GoogCurrency&lt;/code&gt; in &lt;code&gt;app.rb&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;1 post &#34;/convert&#34; do
2     begin
3       @result = GoogCurrency.send(&#34;#{params[:from]}_to_#{params[:to]}&#34;.to_sym, params[:amount])
4     rescue Exception =&gt; ex
5       @error = ex.message
6     end
7     haml :&#34;convert&#34;
8   end
&lt;/pre&gt;
  
  &lt;p&gt;
    Here, we&amp;#8217;re rescuing the exception and setting &lt;code&gt;@error&lt;/code&gt; instance variable.
  &lt;/p&gt;
  
  &lt;p&gt;
    Now in &lt;code&gt;convert.haml&lt;/code&gt;, let&amp;#8217;s display the error message.
  &lt;/p&gt;
  
  &lt;pre&gt;1 -if @error
2   #error= @error
3 -else
4   %div
5     #{params[:amount]} #{params[:from]} =
6     %span#result= @result
7     #{params[:to]}
8
9 %a(href=&#34;/&#34;) Back
&lt;/pre&gt;
  
  &lt;p&gt;
    All the specs now pass. Note, we haven&amp;#8217;t opened the browser manually even once! Let&amp;#8217;s do it and &lt;em&gt;hope&lt;/em&gt; everything is fine and dandy! Execute the command &lt;code&gt;rackup -p 4567&lt;/code&gt; and visit &lt;code&gt;localhost:4567&lt;/code&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it!
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;&lt;b&gt;Feel free to ask questions and give feedback in the comments section of this post&lt;/b&gt;. Thanks!&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sinatra: Some Questions from Ruby Newbies</title>
      <link>http://rubylearning.com/blog/2013/08/14/sinatra-some-questions-from-ruby-newbies/</link>
      <pubDate>Wed, 14 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/blog/2013/08/14/sinatra-some-questions-from-ruby-newbies/</guid>
      <description>&lt;div&gt;
  &lt;p&gt;
    Darren Jones in his excellent book &lt;a href=&#34;http://www.amazon.com/gp/product/0987332147/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0987332147&amp;linkCode=as2&amp;tag=satishtalimsw-20&#34;&gt;Jump Start Sinatra&lt;/a&gt; says &amp;#8220;&lt;em&gt;Since its release in 2007, Sinatra has quickly gained in popularity in the Ruby web community due to its elegant simplicity and classy syntax. Everybody who uses it falls in love with its elegant simplicity and classy syntax&lt;/em&gt;.&amp;#8221;
  &lt;/p&gt;

  &lt;p&gt;
    RubyLearning will be conducting a &amp;#8220;free&amp;#8221; (i.e. pay if you like) &lt;a href=&#34;http://rubylearning.com/blog/2013/08/14/a-free-online-course-on-sinatra/&#34;&gt;online course on Sinatra&lt;/a&gt; from 7th Sept. 2013 and many of the would-be participants (mostly Ruby newbies) would have a plethora of questions related to Sinatra.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;strong&gt;Satish Talim&lt;/strong&gt; of RubyLearning.org talked to Ruby Gurus Andy Lindeman, Carlo Pecchia, Dan Mayer, Darren Jones, Nathan Esquenazi and Sudarshan Shubakar to answer some of the would-be participant&amp;#8217;s questions.
  &lt;/p&gt;

  &lt;hr align=&#34;center&#34; width=&#34;70%&#34; /&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; A warm welcome to you all. For the benefit of the would-be Sinatra course participants, could each one of you tell us something about your self?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Andy Lindeman&#34; src=&#34;http://rubylearning.com/images/andylindeman.jpg&#34; alt=&#34;Andy Lindeman&#34; /&gt;&lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I am a software generalist focused on web and mobile. I like open source and work primarily on RSpec. I work at Big Nerd Ranch, primarily writing web application backends in Ruby and Rails. I dabble a good bit: currently Objective C/iOS, Clojure, Erlang, and client-side JavaScript frameworks are on my radar. I like working on open source and meeting new folks in the community.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Carlo Pecchia&#34; src=&#34;http://rubylearning.com/images/carlopecchia.jpg&#34; alt=&#34;Carlo Pecchia&#34; /&gt;&lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; &lt;a href=&#34;http://carlopecchia.eu/&#34;&gt;I am&lt;/a&gt; an IT engineer mainly interested on agile methodologies and &amp;#8220;good practices&amp;#8221; for developing large and complex systems. I am also interested in web architectures and emerging programming languages.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Dan Mayer&#34; src=&#34;http://rubylearning.com/images/danmayer.jpg&#34; alt=&#34;Dan Mayer&#34; /&gt;&lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I am a tech lead on the LivingSocial consumer web team. I have been developing Ruby applications since 2007 and often work with both Rails and Sinatra. I believe in trying to keep code small, and breaking applications up into logical components and services. My thoughts on development can be found on &lt;a href=&#34;http://mayerdan.com/&#34;&gt;http://mayerdan.com&lt;/a&gt;. I am on twitter as &lt;a href=&#34;https://twitter.com/danmayer&#34;&gt;@danmayer&lt;/a&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Darren Jones&#34; src=&#34;http://rubylearning.com/images/darrenjones.jpg&#34; alt=&#34;Darren Jones&#34; /&gt;&lt;b&gt;Darren&lt;/b&gt;&gt;&gt; &lt;a href=&#34;http://daz4126.com/&#34;&gt;I am&lt;/a&gt; the author of &lt;a href=&#34;http://www.amazon.com/gp/product/0987332147/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0987332147&amp;linkCode=as2&amp;tag=satishtalimsw-20&#34;&gt;Jump Start Sinatra&lt;/a&gt;, a short book that helps you to get up to speed with Sinatra over a weekend, published by Sitepoint. I have been using Sinatra since 2009 and used it to build the &lt;a href=&#34;http://cardsinthecloud.com/&#34;&gt;Cards in the Cloud&lt;/a&gt; website. I live in Manchester in the UK where I teach Mathematics and enjoy playing water polo.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignleft&#34; title=&#34;Nathan Esquenazi&#34; src=&#34;http://rubylearning.com/images/nathanesquenazi.jpg&#34; alt=&#34;Nathan Esquenazi&#34; /&gt;&lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; I am one of the creators of the &lt;a href=&#34;http://www.padrinorb.com/&#34;&gt;Padrino framework&lt;/a&gt;, enabling powerful extensions to the Sinatra core and the co-founder of &lt;a href=&#34;http://thecodepath.com/&#34;&gt;CodePath&lt;/a&gt;, providing practical training to engineers interested in learning mobile development.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;img class=&#34;alignright&#34; title=&#34;Sudarshan Shubakar&#34; src=&#34;http://rubylearning.com/images/sudarshanshubakar.jpg&#34; alt=&#34;Sudarshan Shubakar&#34; width=&#34;115&#34; height=&#34;115&#34; /&gt;&lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; I am a software developer based out of Pune, India. I enjoy working with design principles and patterns, learning new programming languages and a bit of open source development. I am majorly a Java developer for the past 11 years and have recently started working on Ruby out of interest.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; What is Sinatra best suited for?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; Simple web apps, especially those that are mostly APIs or only have a few views.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Sinatra is an &amp;#8220;essential&amp;#8221; framework for Ruby based web application. Talking about &amp;#8220;web app&amp;#8221; the point of reference is &amp;#8211; without any doubt &amp;#8211; RubyOnRails (RoR): Sinatra is lightweight compared to it. You have less features, but also less stuff to digest to start with. Personally I&amp;#8217;ve used Sinatra (and I was really satisfied by it) for apps where data complexity and user interactions are not critical points (in my case: internal enterprise app).
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; Sinatra is great for smaller applications and apis. Sinatra fits really well when there is a limited front end which uses a lot less of the standard view layer helpers and other features common in Rails. I have personally found that Sinatra is best for APIs and micro sites. If an application with a significant front end is going to be developed, it is often best to start with rails as you will start to home grow and try to replace many common features of rails with your own bad implementations. Finally people often forget how much rails helps in terms of basic security precautions, making it harder to make common mistakes. There is a well known Ruby community quote that I can&amp;#8217;t find attribution for, &amp;#8220;every Ruby web framework eventually becomes a horrible bad and buggy implementation of rails&amp;#8221;.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; Putting your Ruby code onto the web! At its heart Sinatra is essentially just a wrapper for making it easy to deal with HTTP requests and responses by providing some very nice helper methods. This means that it is suited for anything that you can write in Ruby. It can handle small projects brilliantly but is also great for larger projects too.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is incredibly well-suited for building REST APIs for mobile clients as well as web back-end services that are paired with modern javascript frameworks like Backbone, AngularJS, Ember, et al.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; The Sinatra book &lt;a href=&#34;http://sinatra-book.gittr.com/#introduction&#34;&gt;introduction&lt;/a&gt; says it best by these statements:&lt;br /&gt;* In Sinatra, you can write short ad hoc applications or mature, larger application with the same easiness.&lt;br /&gt;* Sinatra really shines when used for experiments and application mock-ups or for creating a quick interface for your code.&lt;br /&gt;My take on this is that Sinatra gets you started quickly on whatever problem you are trying to solve (with a web/URL based solution) quickly. There is hardly a learning curve and you can have a meaningful implementation of your solution within no time.
  &lt;/p&gt;

  &lt;p&gt;
    Another point where Sinatra is most useful is when you would like finer control over how your application is organized. This &lt;a href=&#34;http://stackoverflow.com/questions/3068114/what-is-the-limit-of-sinatra&#34;&gt;discussion on stackoverflow.com&lt;/a&gt; provides some good inputs on how Sinatra compares to Rails. As one person says in this discussion, there is no limit to what you can do with it.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; I am a Ruby newbie and if I learn Sinatra, does that help me with Ruby on Rails?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think it depends on exactly how much you know.
  &lt;/p&gt;

  &lt;p&gt;
    For folks with little background on programming or web application development at all, I think it&amp;#8217;s a great fit. There&amp;#8217;s not very much &amp;#8220;magic&amp;#8221; and it&amp;#8217;s easy to get up and running quickly.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Sure! Learning Sinatra gives you all the details about how HTTP protocol is handled; how routing works; how to manage your models; how to talk with a Data Base (noSQL are welcome too); how a template system has to be used; and so on. My suggestion is: start with Sinatra, and *then* consider RoR for &amp;#8220;not small&amp;#8221; projects.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; Learning Sinatra is a great way to begin to learn Rails. It will definitely help you learn Rails as it helps you learn Ruby basics as well as common Ruby web development practices. In many ways it is a smaller and simpler way to learn to work with a web framework, which is excellent. I find while this is great for learning, it leads to a less natural project structure and uncommon patterns for larger applications. Actually learning some of the basic web development concepts first in Sinatra would help one to understand why these concepts exist and why they are bit more complicated in Rails.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; A little, but it is more useful for improving your Ruby. I think that it would help you understand some of the &amp;#8216;magic&amp;#8217; that Rails does in the background as you have a lot more control with Sinatra.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is an excellent introduction to the Ruby language and to web development. Sinatra has a remarkably short learning curve and as such allows for new developers to tinkering with web apps of all sorts with minimal overhead or confusion. The distinct advantage of learning Sinatra while you are developing your Ruby acumen is that Sinatra is very explicit and simple allowing the expressiveness of Ruby itself to shine through.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; Hmm, will Sinatra help one learn Ruby on Rails&amp;#8230; probably not in an obvious manner. However my understanding is that if one tries to build a well-structured MVC application with Sinatra, one would find it easier to appreciate what Rails offers out of the box and why it mandates what it does.
  &lt;/p&gt;

  &lt;p&gt;
    With Sinatra there is almost no mandate apart from the dsl syntax itself. So you are free to organize your application any way you like.
  &lt;/p&gt;

  &lt;p&gt;
    If you are trying to learn Rails while you are developing your pet application, my understanding is that you may find it slightly difficult because you may need to deviate from your problem domain to understand the framework. This probably isn&amp;#8217;t true if you are just trying to learn Rails with just a mock application.
  &lt;/p&gt;

  &lt;p&gt;
    With Sinatra, like I&amp;#8217;ve already mentioned, there is hardly a learning curve and you stay focused on your problem domain.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; How much Ruby do I have to cover in order to start learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think it again depends on what an individual developer&amp;#8217;s background is.
  &lt;/p&gt;

  &lt;p&gt;
    Developers who are new to Ruby but know other object-oriented languages will likely pick up enough Ruby to be proficient very quickly.
  &lt;/p&gt;

  &lt;p&gt;
    Other developers may need more basics about the structure and basic syntax and semantics of programming languages first.
  &lt;/p&gt;

  &lt;p&gt;
    That said, I think you could pair a lot of the learning: while introducing a Sinatra concept, also introduce some Ruby concepts.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; At the very beginning &amp;#8220;not too much&amp;#8221;, but if and when you want to code seriously you have to dirty your hands. There is no escape! &lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; /&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I would make sure to cover some Ruby basics firsts:
  &lt;/p&gt;

  &lt;p&gt;
    * Running a ruby script&lt;br /&gt;* variables&lt;br /&gt;* method calls&lt;br /&gt;* basic data structures (array, hashes, strings, and numericals)
  &lt;/p&gt;

  &lt;p&gt;
    After making sure those basics are understood, I think you could get into Sinatra specifics. It would also likely help to have a basic knowledge of html, CSS, and possibly JSON, if you are planning to cover api endpoints.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; Not much at all to get started. But the more Ruby you know, the better your Sinatra applications will be. As I mentioned in my answer to question 1, Sinatra apps are basically just Ruby apps put on the web, so the standard of your Sinatra app will be directly linked to how much Ruby you know. The Sinatra source code is written in Ruby and a great exercise is to read through it (it&amp;#8217;s only around 2000 lines and very well commented). This will help to improve your Ruby skills and help you to understand how Sinatra works.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Sinatra is entirely built using idiomatic ruby constructs and patterns. That said you can start tinkering with Sinatra well before you have a strong grasp on Ruby. I would recommend taking the time to first familiarize yourself with the basic ruby constructs and then you can quickly dive in and learn by doing.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; Have you seen &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;http://www.sinatrarb.com/&lt;/a&gt; !!:)
  &lt;/p&gt;

  &lt;p&gt;
    I needed a beginner&amp;#8217;s level knowledge of Ruby to start using Sinatra.
  &lt;/p&gt;

  &lt;p&gt;
    However, when you are learning a new language like Ruby and using something like Sinatra to do so, it is important to understand where the domain of the framework starts blurring and your problem domain begins to shine.
  &lt;/p&gt;

  &lt;p&gt;
    So you may need to understand Ruby much deeper to efficiently solve the actual problem that you are working on.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; How important is it for me to know Rack while learning Sinatra?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; I think Rack is pretty simple for experienced developers to understand, but understanding why it&amp;#8217;s needed and how it fits is a bit more abstract and difficult. I don&amp;#8217;t think new developers need to understand Rack while learning Sinatra.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; Rack is a very basic and important component, don&amp;#8217;t be afraid by it. I strongly encourage you to take half a day to study it: it&amp;#8217;s time well invested.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; While Rack is great, I think it could likely be skipped over at the beginning to allow new users to just think in terms of a Sinatra request and response cycle. It might be a good thing to cover a bit further into the lessons, but to help users get to the first goal to dynamically add information to a page, I don&amp;#8217;t believe knowledge of Rack is really necessary.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; I don&amp;#8217;t think you need to know much about Rack, except that Sinatra (and most other Ruby frameworks) uses it extensively in the background. Once you get more confident with Sinatra then you can start to dig a bit deeper into how Rack runs the show in the background, but it isn&amp;#8217;t essential when you first start.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; Rack is the web-server interface that underlies web development in Ruby. Learning about Rack and Rack middleware development will give the developer an insightful look under the hood at how the request/response model of the web interacts in ruby-based web libraries.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; It is possible to write simple Sinatra apps in the classic style without using Rack. However as your app begins to gather a bit of complexity, you will want to shift to the Modular style. Here&amp;#8217;s where Rack will help you organize your app better. This is of course apart from the benefit of web server abstraction Rack inherently provides.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;span style=&#34;color:#0060C0;&#34;&gt;&lt;b&gt;Satish&lt;/b&gt;&gt;&gt; While developing Sinatra apps which style (Modular or Classic) should I use?&lt;/span&gt;
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Andy&lt;/b&gt;&gt;&gt; If the audience is beginners, I&amp;#8217;d start with classic because you have to keep very little context in your head. As the audience becomes more experienced, move toward a more modular approach.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Carlo&lt;/b&gt;&gt;&gt; It depends roughly on your application &amp;#8220;size&amp;#8221;. Modular style gives you more maintainable and readable code. Anyway start with Classic and then when your app grows up, consider switching to Modular style.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Dan&lt;/b&gt;&gt;&gt; I think for teaching beginners, the Classic style is simpler to understand and would be quicker to get students to the learn / reward cycle. Sinatra apps that grow large, is where the modular approach has many advantages. For larger apis, the modular approach is definitely the way to go, but often I find when you are really utilizing that approach it would make sense to just have a full Rails app. I haven&amp;#8217;t ended up building out to many very large Sinatra applications so there might be other advice on this point.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Darren&lt;/b&gt;&gt;&gt; It doesn&amp;#8217;t matter at all. I really like the fact that the Classic style allows you to get started really quickly and build apps with all the code in just a single file. The modular style makes it easier to organize large applications and is a good approach if you are working in teams as each module can be developed independently of the other. Modular apps also make it easier to reuse and share code in other projects.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Nathan&lt;/b&gt;&gt;&gt; While tinkering around learning Sinatra or for extremely simple apps, use classic. For writing middle-wares and production applications, I recommend using Modular. Modular is more explicit and I prefer having my Sinatra apps contained within an explicit class of my choosing. I don&amp;#8217;t see many benefits to using the classic style.
  &lt;/p&gt;

  &lt;p class=&#34;block&#34;&gt;
    &lt;b&gt;Sudarshan&lt;/b&gt;&gt;&gt; When you are starting to learn Sinatra, I would recommend using the classic style to get a feel of how things work. If you are building a meaningful application of even moderate complexity, the Modular style will help you keep your code organized. Once you are familiar with the Modular style of organizing your Sinatra app, you may be able to work with the Modular style with ease from the word go.
  &lt;/p&gt;

  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Well, we have set the ball rolling. &lt;b&gt;What&amp;#8217;s your take on this?&lt;/b&gt; Kindly post your thoughts as comments to this blog post. Looking forward to some interesting read.&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>