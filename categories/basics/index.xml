<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on RubyLearning Blog</title>
    <link>http://localhost:1313/blog/categories/basics/</link>
    <description>Recent content in Basics on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2015 01:15:34 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/categories/basics/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comment Types in Ruby</title>
      <link>http://localhost:1313/blog/2015/03/20/comment-types-in-ruby/</link>
      <pubDate>Fri, 20 Mar 2015 01:15:34 -0400</pubDate>
      
      <guid>http://localhost:1313/blog/2015/03/20/comment-types-in-ruby/</guid>
      <description>

&lt;p&gt;There are basically two types of comments in Ruby.  And they work the
same.&lt;/p&gt;

&lt;h2 id=&#34;the-block-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The block comment&lt;/h2&gt;

&lt;p&gt;The comment block is created with the &lt;code&gt;=begin&lt;/code&gt; and &lt;code&gt;=end&lt;/code&gt; delimiters.
This looks like:&lt;/p&gt;

&lt;script
src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_block.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;p&gt;It helps to make readable areas that are without extra marks.  And
wherever and whatever you write in those areas are not interpreted by
Ruby.&lt;/p&gt;

&lt;h2 id=&#34;the-line-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The line comment&lt;/h2&gt;

&lt;p&gt;This is the simple comment where you place an octothorpe as the first
non-whitespace character of the line, and everything else written is
excluded from being interpreted by Ruby.  It is ignored. It looks like:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_line.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;the-in-line-comment:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;The in-line comment&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;basically two types&amp;rdquo; part comes in when you comment code at the
end of a statement.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;/p&gt;

&lt;script src=&#34;https://bitbucket.org/teamrubylearning/rubylearning-code-snippets/src/a4d5c34572559d8add34e6dfddbcdfb79bd4cf29/2015/03/20/comment-types-in-ruby/comment_in_line.rb?embed=t&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;what-comment-style-should-you-use-and-when:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;What comment style should you use and when?&lt;/h2&gt;

&lt;p&gt;What comment style you use depends on a few factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personal taste&lt;/li&gt;
&lt;li&gt;Team style guides&lt;/li&gt;
&lt;li&gt;The amount of commenting needed

&lt;ul&gt;
&lt;li&gt;a class or module comment may need quite a few lines of comments and
may use the block  style&lt;/li&gt;
&lt;li&gt;a method may need one or two lines and should be above that method&lt;/li&gt;
&lt;li&gt;a clever line of code may need a small comment, so in-line comments
may be appropriate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Functional comments

&lt;ul&gt;
&lt;li&gt;may not give you a choice&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;directive comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is dependent on what that means.  They exist usually to
assist a tool that is not your program, to do something useful.  The
first one that I can think of is the gem &lt;code&gt;rubocop&lt;/code&gt;.  It has directives
that are comment based to allow you to forgive a style infraction.  It
may be more flexible in what is acceptable than the functional comment,
but still not include the ability to use all three styles.&lt;/p&gt;

&lt;h3 id=&#34;in-summary:e47d9a4b7254af0afdedc0dd9b51375b&#34;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;So, the three styles of comments that are directly related to Ruby are;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Block Comment&lt;/li&gt;
&lt;li&gt;Line Comment&lt;/li&gt;
&lt;li&gt;In-line Comment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The comment that is system dependent is the &amp;ldquo;magic comment&amp;rdquo; on the first
line of some files that help them know that they are meant to be
&amp;lsquo;executable&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Finally, not really a &amp;ldquo;Ruby Comment Style&amp;rdquo; but used by some gems are
what I call &amp;ldquo;directive comments&amp;rdquo; and may have rules all of their own.&lt;/p&gt;

&lt;p&gt;Of course, the best code is code that doesn&amp;rsquo;t rely on comments at
all.  But we still need them!  What is your comment style?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>