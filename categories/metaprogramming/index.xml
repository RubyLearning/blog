<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metaprogramming on RubyLearning Blog</title>
    <link>http://rubylearning.com/categories/metaprogramming/</link>
    <description>Recent content in Metaprogramming on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Oct 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/categories/metaprogramming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Do you know how to write an internal DSL in Ruby?</title>
      <link>http://rubylearning.com/2011/10/02/do-you-know-how-to-write-an-internal-dsl-in-ruby/</link>
      <pubDate>Sun, 02 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2011/10/02/do-you-know-how-to-write-an-internal-dsl-in-ruby/</guid>
      <description>&lt;div&gt;
  &lt;p class=&#34;alert&#34;&gt;
    Almost all Ruby programming newbies would love to get their hands wet writing a Ruby DSL. This article explains how you can write a simple Ruby DSL.
  &lt;/p&gt;
  
  &lt;h3&gt;
    Introduction
  &lt;/h3&gt;
  
  &lt;p&gt;
    A &lt;b&gt;Domain-Specific Language (DSL)&lt;/b&gt; is a (usually small) programming or description language designed for a fairly narrow purpose. DSLs are targeted at end users or domain specialists who are not expert programmers. &lt;a href=&#34;http://www.infoq.com/presentations/domain-specific-languages&#34;&gt;Martin Fowler&lt;/a&gt; classifies DSLs into two styles &amp;#8211; external and internal. An external DSL is a language that is different from the main programming language for an application, but that is interpreted by or translated into a program in the main language. An internal DSL transforms the main programming language itself into the DSL (our simple DSL is tied to the Ruby programming language).
  &lt;/p&gt;
  
  &lt;h4&gt;
    Ruby code blocks
  &lt;/h4&gt;
  
  &lt;p&gt;
    Ruby&amp;#8217;s &lt;em&gt;support for blocks&lt;/em&gt; (i.e., closures) is useful in defining internal DSLs.
  &lt;/p&gt;
  
  &lt;p&gt;
    Ruby code blocks (called closures in other languages) are chunks of code between braces or between do- end that you can associate with method invocations, almost as if they were parameters. A Ruby block is a way of grouping statements, and may appear only in the source next to a method call; the block is written starting on the same line as the method call&amp;#8217;s last parameter (or the closing parenthesis of the parameter list). The code in the block is not executed at the time it is encountered. Instead, Ruby remembers the context in which the block appears (the local variables, the current object, and so on) and then enters the method. Matz says that any method can be called with a block as an implicit argument. Inside the method, you can call the block using the &lt;code&gt;yield&lt;/code&gt; keyword with a value. Blocks are not objects, but they can be converted into objects of class &lt;code&gt;Proc&lt;/code&gt;. One way a block can be converted to a &lt;code&gt;Proc&lt;/code&gt; object is by passing a block to a method whose last parameter is prefixed with an ampersand. That parameter will receive the block as a &lt;code&gt;Proc&lt;/code&gt; object:
  &lt;/p&gt;
  
  &lt;pre&gt;def my_method(p1, &amp;#038;block)
  ...
end
&lt;/pre&gt;
  
  &lt;h4&gt;
    instance_eval
  &lt;/h4&gt;
  
  &lt;p&gt;
    The class &lt;code&gt;Object&lt;/code&gt; has an &lt;code&gt;instance_eval&lt;/code&gt; public method which can be called from a specific object. It provides access to the instance variables of that object. It can be called either with a block or with a string:
  &lt;/p&gt;
  
  &lt;pre&gt;class Rubyist
  def initialize
    @geek = &#34;Matz&#34;
  end
end
obj = Rubyist.new
# instance_eval can access obj&#39;s private methods
# and instance variables
obj.instance_eval do
  puts self  # =&gt; #&amp;lt;Rubyist:0x2ef83d0&amp;gt;
  puts @geek # =&gt; Matz
end
&lt;/pre&gt;
  
  &lt;p&gt;
    The block that you pass to &lt;code&gt;instance_eval&lt;/code&gt; helps you dip inside an object to do something in there. You can wreak havoc on encapsulation! No data is private data anymore.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;instance_eval&lt;/code&gt; can also be used to add class methods as shown below:
  &lt;/p&gt;
  
  &lt;pre&gt;class Rubyist
end
Rubyist.instance_eval do
  def who
    &#34;Geek&#34;
  end
end
puts Rubyist.who # =&gt; Geek
&lt;/pre&gt;
  
  &lt;h3&gt;
    Deciding on a simple DSL
  &lt;/h3&gt;
  
  &lt;p&gt;
    You are an expert Ruby programmer and your friends Victor, Michael and Satoshi (all 3 are novice chess players) have requested you to write a Ruby program for them, that could help them with a listing of the best black opening chess moves.
  &lt;/p&gt;
  
  &lt;p&gt;
    You tell your chess friends that if they need help they should individually send you a text file containing the white&amp;#8217;s first move, as follows:
  &lt;/p&gt;
  
  &lt;pre&gt;
h4
a3
e4
&lt;/pre&gt;
  
  &lt;p&gt;
    h4, a3, e4 would be Ruby methods in your DSL program. Once we get the DSL to follow valid Ruby syntax, Ruby does all the work to parse the file and hold the data in a way that we can operate on it.
  &lt;/p&gt;
  
  &lt;p&gt;
    Victor is playing the black pieces and his opponent plays the opening white piece (say h4). Victor would like to know what&amp;#8217;s the best strategy to counter white&amp;#8217;s opening move of h4. He also would like to know, what if his opponent would have played a3.
  &lt;/p&gt;
  
  &lt;p&gt;
    Victor decides to send a &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.txt&#34;&gt;text file&lt;/a&gt; to you.
  &lt;/p&gt;
  
  &lt;h3&gt;
    The DSL program &amp;#8211; chess_opener.rb
  &lt;/h3&gt;
  
  &lt;p&gt;
    Being a Ruby expert, you dish out your first version of the DSL program &amp;#8211; &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener.rb&#34;&gt;chess_opener.rb&lt;/a&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;class ChessOpener
  def initialize
    @data = {}
    load_data
  end
  
  def self.load(filename)
    dsl = new
    dsl.instance_eval(File.read(filename))
  end
  
  def h4
    puts &#34;==========&#34;
    puts @data.assoc(&#34;h4&#34;)
    puts &#34;==========&#34;    
  end

  def a3
    puts &#34;==========&#34;
    puts @data.assoc(&#34;a3&#34;)
    puts &#34;==========&#34;    
  end

  def method_missing(method_name, *args, &amp;#038;block)
    msg = &#34;You tried to call the method #{method_name}. There is no such method.&#34;
    raise msg
  end

  private
  def load_data
    @data = {&#34;a3&#34; =&gt; [&#34;Anderssen&#39;s Opening Polish Gambit: 1. a3 a5 2. b4&#34;,
                      &#34;Anderssen&#39;s Opening Creepy Crawly Formation: 1. a3 e5 2. h3 d5&#34;,
                      &#34;Anderssen&#39;s Opening Andersspike: 1. a3 g6 2. g4&#34;],
             &#34;h4&#34; =&gt; [&#34;Koola-Koola continues 1.h4 a5&#34;,
                      &#34;Wulumulu continues 1.h4 e5 2. d4&#34;,
                      &#34;Crab Variation continues 1.h4 any 2. a4&#34;,
                      &#34;Borg Gambit continues 1.h4 g5.&#34;,
                      &#34;Symmetric Variation continues 1.h4 h5&#34;]}
  end
  
end
&lt;/pre&gt;
  
  &lt;h4&gt;
    Some explanation of code
  &lt;/h4&gt;
  
  &lt;p&gt;
    The &lt;code&gt;initialize&lt;/code&gt; method of your class &lt;code&gt;ChessOpener&lt;/code&gt; creates a &lt;code&gt;Hash&lt;/code&gt; object &lt;code&gt;@data&lt;/code&gt; and populates it by calling the &lt;code&gt;private&lt;/code&gt; method &lt;code&gt;load_data&lt;/code&gt;. You have referred to the online &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_chess_openings&#34;&gt;list of chess openings&lt;/a&gt; to create the hash &lt;code&gt;@data&lt;/code&gt;. The current program has the openings only for a3 and h4 moves, but you plan to add the other moves soon.
  &lt;/p&gt;
  
  &lt;p&gt;
    You want a simple and straightforward way to parse the &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.txt&#34;&gt;DSL file&lt;/a&gt;. Something like:
  &lt;/p&gt;
  
  &lt;pre&gt;my_dsl = ChessOpener.load(filename)
&lt;/pre&gt;
  
  &lt;p&gt;
    Also, you would like to accept the DSL file from the command line, something like:
  &lt;/p&gt;
  
  &lt;pre&gt;my_dsl = ChessOpener.load(ARGV[0])
&lt;/pre&gt;
  
  &lt;p&gt;
    You write a &lt;em&gt;class method&lt;/em&gt; &lt;code&gt;load&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;pre&gt;def self.load(filename)
  dsl = new
  dsl.instance_eval(File.read(filename))
end
&lt;/pre&gt;
  
  &lt;p&gt;
    The class method &lt;code&gt;load&lt;/code&gt; creates a &lt;code&gt;ChessOpener&lt;/code&gt; object and calls &lt;code&gt;instance_eval&lt;/code&gt; on the DSL file (chess_opener_test.txt above). If you feed &lt;code&gt;instance_eval&lt;/code&gt; a string, &lt;code&gt;instance_eval&lt;/code&gt; will evaluate the string as Ruby code. In fact, this Ruby code is nothing but calls to the methods h4 and a3 which are respectively called. The methods h4 and a3 make use of Ruby Hash&amp;#8217;s &lt;code&gt;assoc&lt;/code&gt; method to extract the information about the particular (say h4) move.
  &lt;/p&gt;
  
  &lt;p&gt;
    The program also provides a &lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_method_missing.html&#34;&gt;method_missing&lt;/a&gt; method, in case the program fails to find a method say h5 (assuming Victor has typed that by mistake in the file chess_opener_test.txt.)
  &lt;/p&gt;
  
  &lt;h3&gt;
    Running the DSL program
  &lt;/h3&gt;
  
  &lt;p&gt;
    You next write the program &amp;#8211; &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves/blob/master/chess_opener_test.rb&#34;&gt;chess_opener_test.rb&lt;/a&gt;, ensuring that the files chess_opener.rb, chess_opener_test.rb and chess_opener_test.txt are in the same folder on your computer.
  &lt;/p&gt;
  
  &lt;p&gt;
    You now run your Ruby code as follows:
  &lt;/p&gt;
  
  &lt;pre&gt;ruby chess_opener_test.rb chess_opener_test.txt
&lt;/pre&gt;
  
  &lt;p&gt;
    Here&amp;#8217;s the sample output:
  &lt;/p&gt;
  
  &lt;pre&gt;==========
h4
Koola-Koola continues 1.h4 a5
Wulumulu continues 1.h4 e5 2. d4
Crab Variation continues 1.h4 any 2. a4
Borg Gambit continues 1.h4 g5.
Symmetric Variation continues 1.h4 h5
==========
==========
a3
Anderssen&#39;s Opening Polish Gambit: 1. a3 a5 2. b4
Anderssen&#39;s Opening Creepy Crawly Formation: 1. a3 e5 2. h3 d5
Anderssen&#39;s Opening Andersspike: 1. a3 g6 2. g4
==========
&lt;/pre&gt;
  
  &lt;p&gt;
    In fact, in the next version of your DSL program, you plan to write the output to a file and send the same to Victor. Why don&amp;#8217;t you &lt;a href=&#34;https://github.com/SatishTalim/ChessOpeningMoves&#34;&gt;fork this project&lt;/a&gt; and add-on some more functionality?
  &lt;/p&gt;
  
  &lt;p&gt;
    That&amp;#8217;s it!
  &lt;/p&gt;
  
  &lt;p class=&#34;alert&#34;&gt;
    &lt;em&gt;Feel free to ask questions and give feedback in the comments section of this post.&lt;/em&gt; Fellow Rubyists, if you would like to write a guest blog post for RubyLearning email me at &lt;b&gt;satish [at] rubylearning.org&lt;/b&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Know Metaprogramming In Ruby?</title>
      <link>http://rubylearning.com/2010/11/23/dont-know-metaprogramming-in-ruby/</link>
      <pubDate>Tue, 23 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/11/23/dont-know-metaprogramming-in-ruby/</guid>
      <description>

&lt;p&gt;This guest post is by &lt;strong&gt;Gavin Morrice&lt;/strong&gt;, Managing Director of &lt;a href=&#34;http://katanacode.com&#34;&gt;Katana
Code Ltd.&lt;/a&gt;, a software boutique based in
Edinburgh, Scotland. He likes sharing Rails tips&lt;img
class=&#34;flowLeft&#34; src=&#34;http://rubylearning.com/images/GavinMorrice.jpg&#34;
alt=&#34;Gavin Morrice&#34; height=&#34;320&#34; width=&#34;320&#34;&gt; on &lt;a href=&#34;http://gavinmorrice.com/&#34;&gt;his
site&lt;/a&gt;. When he’s not writing code he’s usually
weightlifting, reading or writing&lt;/p&gt;

&lt;h2 id=&#34;introduction:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of the most impressive aspects of Ruby is its metaprogramming
capabilities. As a dynamic language, Ruby gives you the freedom to
define methods and even classes during runtime. Metaprogramming with
Ruby, one can do in a few minutes what other languages may take hours to
do. By cleverly planning your code and applying the techniques mentioned
here, you’ll be able to write code that is DRYer, lighter, more
intuitive and more scalable.&lt;/p&gt;

&lt;p&gt;This tutorial assumes you are already familiar with the following
concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby Classes and class inheritance&lt;/li&gt;
&lt;li&gt;Instance methods and instance variables&lt;/li&gt;
&lt;li&gt;Raising exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and standard Ruby notations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to show that &lt;code&gt;method_name&lt;/code&gt; is a method in &lt;code&gt;MyClass&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyClass#method_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;to show the return value of a method

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-metaprogramming:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;What is Metaprogramming?&lt;/h2&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metaprogramming is the writing of computer programs that write or
manipulate other programs (or themselves) as their data, or that do
part of the work at compile time that would otherwise be done at
runtime. In many cases, this allows programmers to get more done in
the same amount of time as they would take to write all the code
manually, or it gives programs greater flexibility to efficiently
handle new situations without recompilation. Or, more simply put:
Metaprogramming is writing &lt;strong&gt;code that writes code&lt;/strong&gt; during runtime to
make your life easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;object_context:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Adding methods in the context of an object&lt;/h2&gt;

&lt;p&gt;In Ruby, &lt;em&gt;everything&lt;/em&gt; is an object. The base class in Ruby is called
&lt;code&gt;Object&lt;/code&gt; (or &lt;code&gt;BasicObject&lt;/code&gt; in Ruby 1.9) and all other classes inherit
properties from it. Every object in Ruby has its own methods, and
instance variables which can be added, edited or removed during runtime.
Here is a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 1: create a new instance of class Object
my_object = Object.new

# define a method on my_object to set the instance variable @my_instance_variable
def my_object.set_my_variable=(var)
  @my_instance_variable = var
end

# define a method on my_object to return value of instance variable @my_instance_variable
def my_object.get_my_variable
  @my_instance_variable
end

my_object.set_my_variable = &amp;quot;Hello&amp;quot;
my_object.get_my_variable # =&amp;gt; Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we have created a new instance of the &lt;code&gt;Object&lt;/code&gt; class
and defined two methods on that instance for writing and reading
(setting and getting). The two new methods that we’ve defined are only
available to our object &lt;code&gt;my_object&lt;/code&gt; and will not be present on any
other instance of the &lt;code&gt;Object&lt;/code&gt; class. We can prove this by extending our
example like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 2: create a new instance of class Object
my_object = Object.new

# create a second instance of class Object
my_other_object = Object.new

# define a method on my_object to set the instance variable @my_instance_variable
def my_object.set_my_variable=(var)
  @my_instance_variable = var
end

# define a method on my_object to return value of instance variable @my_instance_variable
def my_object.get_my_variable
  @my_instance_variable
end

my_object.set_my_variable = &amp;quot;Hello&amp;quot;
my_object.get_my_variable # =&amp;gt; Hello

my_other_object.get_my_variable = &amp;quot;Hello&amp;quot; # =&amp;gt; NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we try to call &lt;code&gt;get_my_variable()&lt;/code&gt; on our second object
&lt;code&gt;my_other_object&lt;/code&gt; the interpreter raises a &lt;code&gt;NoMethodError&lt;/code&gt; to tell us
that &lt;code&gt;my_other_object&lt;/code&gt; doesn’t recognise the method
&lt;code&gt;get_my_variable()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see where this feature of Ruby might be useful, let’s look at a more
common example: writing class methods.&lt;/p&gt;

&lt;h2 id=&#34;writing-class-methods:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Writing Class Methods&lt;/h2&gt;

&lt;p&gt;You’ll probably already be aware of this common syntax for writing
methods to your Ruby classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 3
class MyClass
  def self.capitalize_name
    name.upcase
  end
end
print MyClass.capitalize_name # =&amp;gt; MYCLASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within our class definition we’re defining a method on one particular
object just like we did in Example 1. Only, this time the object is
&lt;em&gt;self&lt;/em&gt; (in this case MyClass). And as we saw in Example 2, the
capitalize_name() method is only available to this particular object
MyClass and no other class (yet). This is just one example of how to
write a class method. To refer back to Example 3 again, here are three
different approaches to defining the same class methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 4
# approach 1
class MyClass
  # defining a class method within the class definition
  def MyClass.capitalize_name
    name.upcase
  end
end

# approach 2
class MyClass;end
# defining a class method out with the class definition
def MyClass.capitalize_name
  name.upcase
end

# approach 3
# define a new class named MyClass
MyClass = Class.new
# add the capitalize_name to MyClass
def MyClass.capitalize_name
  name.upcase
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how similar approach 3 here is to Example 1? You will hopefully have
realised that when you write a class method in Ruby, it’s just the same
as creating an instance of any class and adding methods only to that
instance, only this time its an instance of the class “Class”.&lt;/p&gt;

&lt;h2 id=&#34;writing_code_that_writes_code:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Writing Code That Writes Code&lt;/h2&gt;

&lt;p&gt;An important philosophy in programming is DRY (Don’t Repeat Yourself).
Writing code that is the same (or similar) several times is not only an
inefficient waste of time, it can become a nightmare when you need to
make changes in future. In many cases, it’s possible to remove this
duplication of effort by writing code that writes the code for you.
Here’s an example…
 Consider an application for a car manufacturer to store and access data
on each of it’s models. Within the application we have a class called
CarModel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 5
class CarModel
  def engine_info=(info)
    @engine_info = info
  end

  def engine_info
    @engine_info
  end

  def engine_price=(price)
    @engine_price = price
  end

  def engine_price
    @engine_price
  end

  def wheel_info=(info)
    @wheel_info = info
  end

  def wheel_info
    @wheel_info
  end

  def wheel_price=(price)
    @wheel_price = price
  end

  def wheel_price
    @wheel_price
  end

  def airbag_info=(info)
    @airbag_info = info
  end

  def airbag_info
    @airbag_info
  end

  def airbag_price=(price)
    @airbag_price = price
  end

  def airbag_price
    @airbag_price
  end

  def alarm_info=(info)
    @alarm_info = info
  end

  def alarm_info
    @alarm_info
  end

  def alarm_price=(price)
    @alarm_price = price
  end

  def alarm_price
    @alarm_price
  end

  def stereo_info=(info)
    @stereo_info = info
  end

  def stereo_info
    @stereo_info
  end

  def stereo_price=(price)
    @stereo_price = price
  end

  def stereo_price
    @stereo_price
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each car model comes with various features such as “stereo”, “alarm”
etc. We have a method to get and set the values of each feature of the
car. Each feature has information and price so for every new feature we
add to the CarModel class, we need to define two new methods:
&lt;code&gt;feature_info&lt;/code&gt; and &lt;code&gt;feature_price&lt;/code&gt;.
 Since each of these methods are similar, we can do the following to
simplify this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 6
class CarModel
  FEATURES = [&amp;quot;engine&amp;quot;, &amp;quot;wheel&amp;quot;, &amp;quot;airbag&amp;quot;, &amp;quot;alarm&amp;quot;, &amp;quot;stereo&amp;quot;]

  FEATURES.each do |feature|
    define_method(&amp;quot;#{feature}_info=&amp;quot;) do |info|
      instance_variable_set(&amp;quot;@#{feature}_info&amp;quot;, info)
    end

    define_method(&amp;quot;#{feature}_info&amp;quot;) do
      instance_variable_get(&amp;quot;@#{feature}_info&amp;quot;)
    end

    define_method &amp;quot;feature_price=&amp;quot; do |price|
      instance_variable_set(&amp;quot;@#{feature}_price&amp;quot;, price)
    end

    define_method(&amp;quot;#{feature}_price&amp;quot;) do
      instance_variable_get(&amp;quot;@#{feature}_price&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we start by defining an array called &lt;code&gt;FEATURES&lt;/code&gt; which
includes all the features we wish to add methods for. Then, for each
feature, we use Ruby’s
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Module.html#M001654&#34;&gt;Module#define_method&lt;/a&gt;
to define four methods for each feature. Just like in Example 5, the
four methods are getter and setter methods for the feature’s price and
info. The only difference is, they have been written dynamically when
the class is defined and not by us. We use
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Object.html#M000368&#34;&gt;Object#instance_variable_set()&lt;/a&gt;
to set the value of instance variables for each feature and
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Object.html#M000378&#34;&gt;Object#instance_variable_get&lt;/a&gt;
to return the values for each.&lt;/p&gt;

&lt;p&gt;The need to define getter and setter methods like this is quite common
in Ruby so it’s not surprising that Ruby already has methods that do
just that. &lt;code&gt;Module#attr_accessor&lt;/code&gt; can be used to do the same thing as in
Example 6 with just a single line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 7
class CarModel
  attr_accessor :engine_info, :engine_price, :wheel_info, :wheel_price, :airbag_info, :airbag_price, :alarm_info, :alarm_price, :stereo_info, :stereo_price
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! But this still isn’t ideal. For each feature, we still need to
define two attributes (&lt;code&gt;feature_info&lt;/code&gt; and &lt;code&gt;feature_price&lt;/code&gt;). Ideally we
should be able to call a method that can do the same as in Example 7 but
by only listing each feature once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 8
class CarModel
  # define a class macro for setting features
  def self.features(*args)
    args.each do |feature|
      attr_accessor &amp;quot;#{feature}_price&amp;quot;, &amp;quot;#{feature}_info&amp;quot;
    end
  end

  # set _info and _price methods for each of these features
  features :engine, :wheel, :airbag, :alarm, :stereo
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we take each of the arguments for &lt;code&gt;CarModel#features&lt;/code&gt;
and pass them to &lt;code&gt;attr_accessor&lt;/code&gt; with &lt;code&gt;_price&lt;/code&gt; and &lt;code&gt;_info&lt;/code&gt; extensions.
Although this approach is slightly more involved than the one in Example
7, it ensures that each feature is treated the same and means that
adding more attributes in future will be simpler.&lt;/p&gt;

&lt;h2 id=&#34;a-brief-explanation-of-the-ruby-object-model:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;A Brief Explanation of the Ruby Object Model&lt;/h2&gt;

&lt;p&gt;Before going any further, it’s important that we understand the basics
of Ruby’s Object Model and how Ruby deals with method calls.  Whenever you call
a method on an object, the interpreter first looks through the object’s
instance methods to see if it can find that method.  If the interpreter can
find the method, it will execute it as expected but if not, it will pass the
request up the chain to the object’s class.  If it can’t find the method there
it will continue to look in that class’s parent class, then the parent’s parent
etc. up to the &lt;code&gt;Object&lt;/code&gt; class itself. But it doesn’t stop there… If the
interpreter can’t find the method anywhere up the object’s chain
of inheritance, it will go back to the object and call another method
called
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;.
Just like with our first method, the interpreter looks for
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
in the object’s methods, then the object’s class’s instance methods etc.
until reaches the &lt;code&gt;Object&lt;/code&gt; class where
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
&lt;strong&gt;is&lt;/strong&gt; defined and will raise a &lt;code&gt;NoMethodError&lt;/code&gt; error. This is when
metaprogramming really starts getting fun!&lt;/p&gt;

&lt;p&gt;By defining
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
yourself within a class, it’s possible to change this default behaviour
for some pretty useful effects.
&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Kernel.src/M005925.html&#34;&gt;method_missing()&lt;/a&gt;
is passed two arguments; the name of the missing method (as a symbol)
and array of its arguments. Let’s look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 9
class MyGhostClass
  def method_missing(name, *args)
    puts &amp;quot;#{name} was called with arguments: #{args.join(&#39;,&#39;)}&amp;quot;
  end
end

m = MyGhostClass.new
m.awesome_method(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;) # =&amp;gt; awesome_method was called with arguments: one,two
m.another_method(&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;) # =&amp;gt; another_method was called with arguments: three,four
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s no method named awesome_method() or another_method() within
our class yet when we try calling it, we don’t see the usual
&lt;code&gt;NoMethodError&lt;/code&gt;. Instead, we see the name of the methods and their
arguments, just like we defined in method_missing().&lt;/p&gt;

&lt;p&gt;We can expand this idea a little more by adding conditions to this
method. Let’s say, for example, that all methods containing the word
“awesome” should be printed out just like in Example 9. All other
methods should raise the default &lt;code&gt;NoMethodError&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 10
class MyGhostClass
  def method_missing(name, *args)
    if name.to_s =~ /awesome/
      puts &amp;quot;#{name} was called with arguments: #{args.join(&#39;,&#39;)}&amp;quot;
    else
      super
    end
  end
end

m = MyGhostClass.new
m.awesome_method(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;) # =&amp;gt;  awesome_method was called with arguments: one,two
m.another_method(&amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;) # =&amp;gt;  NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, calling &lt;code&gt;awesome_method&lt;/code&gt; behaves just like in Example 9, but
&lt;code&gt;another_method&lt;/code&gt; doesn’t contain the word “awesome” so we pass this up
the chain of inheritance so the default behaviour is not broken.&lt;/p&gt;

&lt;h2 id=&#34;ghost-methods:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Ghost Methods&lt;/h2&gt;

&lt;p&gt;Strictly speaking, &lt;code&gt;MyGhostClass#awesome_method&lt;/code&gt; is not really a method.
If we create an instance of MyGhostClass and scan it’s methods for any
with “awesome” in the name we won’t find any.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 11
@m = MyGhostClass.new
@m.methods.grep(/awesome/) # =&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, we call this a ghost method. Ghost methods come with pros and
cons. The major pro is the ability to write code that responds to
methods when you have no way of knowing the names of those methods in
advance. The major con is that changing Ruby’s default behaviour like
this may cause unexpected bugs if you’re not careful with your method
names.
 With that in mind, let’s go back to our CarModel example and see if we
can extend the functionality a little further.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 12
class CarModel
  def method_missing(name, *args)
    name = name.to_s
    super unless name =~ /(_info|_price)=?$/
    if name =~ (/=$/)
      instance_variable_set(&amp;quot;@#{name.chop}&amp;quot;, args.first)
    else
      instance_variable_get(&amp;quot;@#{name}&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example may look a little complex but is really quite simple.
First, we take the name argument and convert it from a symbol to a
string. Next, we say “send this method up the inheritance chain unless
the name ends with &lt;code&gt;_price&lt;/code&gt;, &lt;code&gt;_price=&lt;/code&gt;, &lt;code&gt;_info&lt;/code&gt; or &lt;code&gt;_info=&lt;/code&gt;&amp;rdquo;. If the
name ends in an equals sign then we know this is a setter method so we
set an instance variable with the same name as our method (minus the
&lt;code&gt;=&lt;/code&gt;). If there’s no equals sign then we know this is a getter method and
so we return the instance variable with the same name.&lt;/p&gt;

&lt;p&gt;Now, we don’t have to specify the features each car model has in
advance. We can simply get and set values on any &lt;code&gt;_price&lt;/code&gt; or &lt;code&gt;_info&lt;/code&gt;
attribute during runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 13
@car_model = CarModel.new

@car_model.stereo_info    = &amp;quot;CD/MP3 Player&amp;quot;
@car_model.stereo_price   = &amp;quot;£79.99&amp;quot;

@car_model.stereo_info  # =&amp;gt; &amp;quot;CD/MP3 Player&amp;quot;
@car_model.stereo_price # =&amp;gt; &amp;quot;£79.99&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:18bee3e64eb657db6a08ae0ff05e44b8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This tutorial has only scratched the surface of Ruby’s metaprogramming
capabilities but hopefully it’s enough to spark your curiosity and will
urge you to learn more about metaprogramming. The &lt;a href=&#34;http://ruby-doc.org/core/&#34;&gt;Ruby
API&lt;/a&gt; covers all the methods I’ve talked about
here plus more. For further reading, check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001660&#34;&gt;Module#included&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001650&#34;&gt;Module#class_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Object.html#M000334&#34;&gt;Object#instance_eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-doc.org/core/classes/Struct.html&#34;&gt;Struct&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I hope you found this article valuable. Feel free to ask questions and
give feedback in the comments section of this post. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do also read&lt;/em&gt; these awesome Guest Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/17/does-ruby-have-too-many-equality-tests/&#34;&gt;Does Ruby Have Too Many Equality
Tests?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/16/why-use-single-sign-in-solutions-in-rails/&#34;&gt;Why Use Single Sign-in Solutions in
Rails?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/08/how-does-your-code-smell/&#34;&gt;How does your code
smell?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/08/do-you-know-resque/&#34;&gt;Do YOU know
Resque?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/03/do-you-understand-rubys-objects-messages-and-blocks/&#34;&gt;Do You Understand Ruby’s Objects, Messages and
Blocks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/11/02/how-does-one-use-design-patterns-in-ruby/&#34;&gt;How Does One Use Design Patterns In
Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/26/do-you-know-whats-new-in-ruby-1-9/&#34;&gt;Do you know what’s new in Ruby
1.9?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/25/the-value-of-a-personal-bug-log/&#34;&gt;The value of a personal bug
log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/10/18/do-you-enjoy-your-code-quality/&#34;&gt;Do You Enjoy Your Code
Quality?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn &lt;strong&gt;Ruby Metaprogramming&lt;/strong&gt; in-depth, join our online
course that starts 4th Dec. 2010. For details &lt;a href=&#34;http://rubylearning.com/blog/2010/11/06/ruby-metaprogramming-course-6th-batch-learn-to-think-in-ruby/&#34;&gt;click
here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>