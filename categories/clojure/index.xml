<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on RubyLearning Blog</title>
    <link>http://rubylearning.com/categories/clojure/</link>
    <description>Recent content in Clojure on RubyLearning Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Sep 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rubylearning.com/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Programming Challenge for Newbies in Clojure and Python too?</title>
      <link>http://rubylearning.com/2010/09/02/programming-challenge-for-newbies-in-clojure-and-python-too/</link>
      <pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/09/02/programming-challenge-for-newbies-in-clojure-and-python-too/</guid>
      <description>

&lt;h2 id=&#34;programming-challenge-for-newbies-in-clojure-and-python-too:7050656c8ff6592bfe712a9a911d0369&#34;&gt;Programming Challenge for Newbies in Clojure and Python too?&lt;/h2&gt;

&lt;p&gt;RubyLearning has been conducting the monthly Ruby Programming Challenge
for Newbies for over a year now and so far 12 challenges have been
completed. The 13th challenge is in progress. All this was possible due
to the extensive support we got from
&lt;a href=&#34;http://ruby-challenge.rubylearning.org/&#34;&gt;Rubyists&lt;/a&gt; across the world.
Also, you all indicated that &lt;a href=&#34;http://rubylearning.com/blog/2010/08/09/do-you-want-us-to-continue-with-the-ruby-challenge-for-newbies/&#34;&gt;we continue with these
challenges&lt;/a&gt;
in the months to come.&lt;/p&gt;

&lt;p&gt;Recently, my colleague &lt;a href=&#34;http://blog.dhananjaynene.com/&#34;&gt;Dhananjay Nene&lt;/a&gt;
posted a &lt;a href=&#34;http://codeblog.dhananjaynene.com/2010/09/code-kata-ruby-programming-challenge-for-newbies-in-python/&#34;&gt;Python based
solution&lt;/a&gt;
to the 13th Ruby challenge. While discussing the solution it struck me
that it would help Clojure and Python Newbies, if we opened up these
challenges in these languages too. Dhananjay and some of my Clojure
colleagues are interested in evaluating the submitted solutions in
Clojure and Python and maybe we could start the challenges from Oct.
2010.&lt;/p&gt;

&lt;p&gt;Clojure and Python enthusiasts – interested? What Do you Think? What is
Your Opinion? Please share in the comments below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/update.jpg&#34; alt=&#34;Update&#34; title=&#34;Update&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3rd Sept.&lt;/strong&gt; Thanks for the very encouraging response. Based on the
feedback received so far, we have decided the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will start the challenges for Clojure, Python and Ruby from &lt;strong&gt;1st
Oct. 2010&lt;/strong&gt;. We will call these “&lt;strong&gt;Programming Challenge for
Newbies&lt;/strong&gt;” and host it on this blog till end Dec. 2010. If the
response is encouraging, we can host the challenges on different
domains.&lt;/li&gt;
&lt;li&gt;We will have separate panels to evaluate the solutions. One each for
Clojure, Python and Ruby.&lt;/li&gt;
&lt;li&gt;We will keep separate prizes for the 3 languages (and hopefully
would find some sponsors).&lt;/li&gt;
&lt;li&gt;The challenge problem setters (fixed till Dec. 2010) would be told
that the problem should be solvable in all languages and
specifically Clojure, Python and Ruby. This means that the problem
setter should not set a problem that needs to be solved by some
specific language feature.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Clojure: A Chat with Andrew Boekhoff</title>
      <link>http://rubylearning.com/2010/07/29/clojure-a-chat-with-andrew-boekhoff/</link>
      <pubDate>Thu, 29 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/07/29/clojure-a-chat-with-andrew-boekhoff/</guid>
      <description>&lt;p&gt;In this brief interview, Satish Talim of RubyLearning talks to &lt;strong&gt;Andrew
Boekhoff&lt;/strong&gt;, author of
&lt;a href=&#34;http://github.com/somnium/congomongo&#34;&gt;CongoMongo&lt;/a&gt;, a toolkit for using
MongoDB with Clojure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Satish&amp;gt;&amp;gt;&lt;/strong&gt; Welcome Andrew and thanks for taking out time to share
your thoughts. What programming languages have you used seriously?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrew&amp;gt;&amp;gt;&lt;/strong&gt; Seriously: Ruby and Clojure. Less Seriously: C, C++, Java
and now: Haskell, Scheme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Satish&amp;gt;&amp;gt;&lt;/strong&gt; Why and when did you decide to start working on Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrew&amp;gt;&amp;gt;&lt;/strong&gt; I’ve been using Clojure for a little over a year. I had
read Paul Graham’s essays, so I wanted to try a lisp dialect. I also
wanted to learn what functional programming was all about. Then I
watched Rich Hickey’s presentations on Clojure and by that point I was
pretty much sold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Satish&amp;gt;&amp;gt;&lt;/strong&gt; Could you name three features of Clojure that you like
the most, as compared to other languages? Why?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrew&amp;gt;&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Immutability&lt;/strong&gt;: Using immutable locals and data structures as the
default eliminates a huge class of potential errors. I’ve never
written as much code that worked on the first try in any other
language. Concurrency is often mentioned as a great benefit from
pervasive immutability — and it certainly is — but for me, the net
reduction in complexity is what I love most.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s a Lisp: It has Macros&lt;/strong&gt;: Whether its for shearing off boiler
plate, or embedding a parser for an internal DSL, the ability to
easily extend the syntax of the language is a uniquely expressive
trait of the lisp family.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The immense practicality of the JVM&lt;/strong&gt;: By being hosted on the JVM,
Clojure comes with batteries-included and can be deployed anywhere
that Java can (almost anywhere).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Satish&amp;gt;&amp;gt;&lt;/strong&gt; You have written a Clojure wrapper (congomongo) for the
mongo-db java api. Can you tell us more about this wrapper? Also, why
did you target MongoDB?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrew&amp;gt;&amp;gt;&lt;/strong&gt; I really like working with MongoDB. The combination of
schema-less document storage and ad-hoc queries is fantastic. The JSON
format fits Clojure’s data structures well, and the mongo-java-driver is
high quality and maintained. Congomongo is fairly light-weight — its
main goal is to make interacting with the database from Clojure
convenient and idiomatic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Andrew. In case you have any queries and/or questions, kindly
post your questions here (as comments to this blog post) and Andrew
would be glad to answer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clojure Tips from the Experts</title>
      <link>http://rubylearning.com/2010/07/26/clojure-tips-from-the-experts/</link>
      <pubDate>Mon, 26 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/07/26/clojure-tips-from-the-experts/</guid>
      <description>

&lt;p&gt;RubyLearning wrote to a lot of experts, gathering their best tips on
Clojure. The tips are still coming in, but here are some to get you
started with. Feel free to add your own tips in the comments section or
send the same to &lt;strong&gt;satishtalim [at] gmail.com&lt;/strong&gt;. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;antonio-cangiano:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Antonio Cangiano&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/acangiano&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://programmingzen.com/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When learning a new programming language, I find &lt;a href=&#34;http://projecteuler.net/&#34;&gt;Project
Euler&lt;/a&gt; to be an invaluable source of
self-contained, increasingly more challenging exercises. By solving
these mathematical problems in your language of choice, you’ll get some
degree of exposure and familiarity with that language before tackling
more complex, real world tasks.&lt;/p&gt;

&lt;p&gt;When you solve a problem, you gain access to a forum where you can
compare your implementation with those of other people who may have used
the same language as you, or a different one. Normally there is a
variety of common (and not so common) languages used by fellow
participants.&lt;/p&gt;

&lt;p&gt;Through the forum you’ll learn about more efficient algorithms and
clever tricks, but above all you’ll get to see different ways to solve
the same problem. It’s not hard to spot clean, concise, and idiomatic
implementations and as a result end up learning more about the language
you used.&lt;/p&gt;

&lt;p&gt;Unfortunately for Clojure beginners, the threads in the forum for many
of the initial problems were closed a long time ago. In practice, this
means that you can usually read solutions implemented in many
established programming languages, including Ruby and Haskell, but you
won’t find solutions in Clojure for most of the problems (Clojure is
after all much newer).&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;a href=&#34;http://clojure-euler.wikispaces.com/&#34;&gt;a wiki&lt;/a&gt; which
collects many solutions in Clojure exists. If you solve the problems
first on your own, you can then use this resource to compare your
approach with those of other Clojure programmers. You may discover that
there is a better, more idiomatic way of solving a given problem.&lt;/p&gt;

&lt;p&gt;In short, use &lt;a href=&#34;http://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt; and the &lt;a href=&#34;http://clojure-euler.wikispaces.com/&#34;&gt;Clojure
Euler wiki&lt;/a&gt; if you want to get
some experience with Clojure’s syntax and fundamental concepts, which
you may have only read about in books or online tutorials.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;baishampayan-ghose:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Baishampayan Ghose&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/ghoseb&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://github.com/ghoseb/&#34;&gt;GitHub&lt;/a&gt; a/c.&lt;/p&gt;

&lt;p&gt;It’s hard to pin point a few good tips because Clojure can do so many
things in very nice and ingenious ways, that it’s not even funny.
Anyway, here are a few:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #1&lt;/strong&gt;: Sort a map on multiple keys:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;;; Tip #1
;;; A vector of maps
(def some-maps [{:x 1 :y 2} {:x 2 :y 1} {:x 1 :y 4} {:x 2 :y 8}])

;;; Sort the maps first on :x and then on :y

(defn sort-maps-by
  &amp;quot;Sort a sequence of maps (ms) on multiple keys (ks)&amp;quot;
  [ms ks]
  (sort-by #(vec (map % ks)) ms))

;;; (sort-maps-by some-maps [:x :y])
;;; output&amp;gt; ({:x 1, :y 2} {:x 1, :y 4} {:x 2, :y 1} {:x 2, :y 8})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Tip #2&lt;/strong&gt;: When dealing with infinite sequences on the REPL, you can
set the number of items to be printed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;;; Tip #2
;;; When you type something like (iterate inc 1) on the REPL (or any
;;; kind of infinite, lazy sequence) the REPL will try to evaluate the
;;; whole thing and will never finish. One way to print some parts of
;;; an infinite sequence on the REPL is to do this on the REPL and
;;; then try to print the sequence -
;;; (set! *print-length* 10)
;;; (iterate inc 1)
;;; Which will only print the first 10 items of the above infinite
;;; sequence -
;;; (1 2 3 4 5 6 7 8 9 10 ...)
;;; There is also *print-level* which can be used to determine how
;;; nested/recursive data-structures are printed on the REPL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Tip #3&lt;/strong&gt;: Use of the -&amp;gt; &amp;amp; -&amp;gt;&amp;gt; threading macros:&lt;/p&gt;

&lt;p&gt;The -&amp;gt; &amp;amp; -&amp;gt;&amp;gt; threading macros are very useful to sometimes untangle
nested function calls. The -&amp;gt; macro takes a bunch of ‘forms’ and
‘threads them’ into each other by inserting every form as the second
item of the next form and so on. So, (-&amp;gt;&amp;gt; a (b c) (d e f) (g h))
becomes (g (d (b a c) e f) h). -&amp;gt;&amp;gt; is similar but it puts the form as
the last item of the next form. (-&amp;gt;&amp;gt; a (b c) (d e f) (g h)) then
becomes (g h (d e f (b c a))).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ns tips
  ;; requires clojure 1.2 if you are on 1.1.x, use this instead
  ;; (:require [clojure.contrib.duck-streams :as io])
  (:require [clojure.contrib.io :as io]))

;;; Tip #3
;;; Use of the -&amp;gt; &amp;amp; -&amp;gt;&amp;gt; threading macros.
(defn word-freq
  &amp;quot;Calculate a frequency map of words in a text file.&amp;quot;
  [f]
  (take 20 (-&amp;gt;&amp;gt; f
                io/read-lines
                (mapcat (fn [l] (map #(.toLowerCase %) (re-seq #&amp;quot;\w+&amp;quot; l))))
                (remove #{&amp;quot;the&amp;quot; &amp;quot;and&amp;quot; &amp;quot;of&amp;quot; &amp;quot;to&amp;quot; &amp;quot;a&amp;quot; &amp;quot;i&amp;quot; &amp;quot;it&amp;quot; &amp;quot;in&amp;quot; &amp;quot;or&amp;quot; &amp;quot;is&amp;quot;})
                (reduce #(assoc %1 %2 (inc (%1 %2 0))) {})
                (sort-by (comp - val)))))

;;; Run it like this (word-freq &amp;quot;/path/to/file.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;brian-carper:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Brian Carper&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/BrianCarper&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://briancarper.net/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“Named” or “keyword” arguments for functions have some benefits over
positional arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can specify arguments in any order.&lt;/li&gt;
&lt;li&gt;The arguments are named explicitly, resulting in less room for error
compared to positional arguments, where it’s easy to transpose two
arguments in the list.&lt;/li&gt;
&lt;li&gt;Your function can easily provide default argument values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a function that takes only one or two arguments, keyword arguments
might be overkill. But the benefits of keyword arguments quickly become
more apparent the more argumentss your function accepts.&lt;/p&gt;

&lt;p&gt;Clojure doesn’t have canonical support for keyword arguments. But there
are a couple of ways you can achieve the same result.&lt;/p&gt;

&lt;p&gt;The first is simply to force the user to pass a hash-map explicitly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn named-args-1 [foo argmap]
 (println &amp;quot;foo:&amp;quot; foo
          &amp;quot;bar:&amp;quot; (:bar argmap 0)
          &amp;quot;baz:&amp;quot; (:baz argmap 0))
 (println &amp;quot;bar-given?&amp;quot; (contains? argmap :bar)
          &amp;quot;baz-given?&amp;quot; (contains? argmap :baz)))

user&amp;gt; (named-args-1 1 {:baz 2})
foo: 1 bar: 0 baz: 2
bar-given? false baz-given? true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But wrapping arguments in braces is arguably an unnecessary burden on
users of your code. A better way is to use destructuring to allow the
user to “flatten” the map:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn named-args-2 [foo &amp;amp; args]
 (let [argmap (apply hash-map args)
       {:keys [bar baz]
        :or   {bar 0 baz 0}} argmap]
   (println &amp;quot;foo:&amp;quot; foo
            &amp;quot;bar:&amp;quot; bar
            &amp;quot;baz:&amp;quot; baz)
   (println &amp;quot;bar-given?&amp;quot; (contains? argmap :bar)
            &amp;quot;baz-given?&amp;quot; (contains? argmap :baz))))

user&amp;gt; (named-args-2 1 :baz 2)
foo: 1 bar: 0 baz: 2
bar-given? false baz-given? true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is OK for the user, but verbose for the function-writer. And the
argument list for the function is specified as “args”, giving the user
no clue as to what keys are expected or legal.&lt;/p&gt;

&lt;p&gt;As of recent releases of Clojure, you can do the destructuring right in
the function’s argument list, leading to this version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn named-args-3 [foo &amp;amp; {:keys [bar baz]
                          :or   {bar 0 baz 0}
                          :as   argmap}]
 (println &amp;quot;foo:&amp;quot; foo
          &amp;quot;bar:&amp;quot; bar
          &amp;quot;baz:&amp;quot; baz)
 (println &amp;quot;bar-given?&amp;quot; (contains? argmap :bar)
          &amp;quot;baz-given?&amp;quot; (contains? argmap :baz)))

user&amp;gt; (named-args-3 1 :baz 2)
foo: 1 bar: 0 baz: 2
bar-given? false baz-given? true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s also possible to roll your own macro to do keyword arguments. See
&lt;strong&gt;clojure.contrib.def/defnk&lt;/strong&gt;, for example.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;craig-andera:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Craig Andera&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/craigandera&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://www.pluralsight-training.net/community/blogs/craig/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have two. The first one I stole from Mike Fogus: to use “,,,” as a
placeholder in the &lt;strong&gt;-&amp;gt;&lt;/strong&gt; and &lt;strong&gt;-&amp;gt;&amp;gt;&lt;/strong&gt; macros. Since commas are
whitespace, they can be used as markers to indicate how the expressions
flow through the threading macros. So, for instance, you can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(-&amp;gt;&amp;gt;
 (iterate inc 1)
 (map #(* 5 %) ,,,)
 (filter odd? ,,,))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the commas indicate “the previous expression will be inserted here”.&lt;/p&gt;

&lt;p&gt;It’s not something you should put in production code, but I found it
enormously helpful in “getting” the -&amp;gt; and -&amp;gt;&amp;gt; macros. Honestly, I
only had to write it out this way once or twice before it clicked with
me and I stopped using the commas altogether.&lt;/p&gt;

&lt;p&gt;The other tip I have, has to do with understanding when to use &lt;strong&gt;map&lt;/strong&gt;,
&lt;strong&gt;filter&lt;/strong&gt;, and &lt;strong&gt;reduce&lt;/strong&gt;. These three functions are where an enormous
amount of Clojure’s power comes from, but I find that beginners (such as
myself) sometimes have a hard time selecting which one – or which
combination – to use. What I’ve found is that it’s helpful to think of
these in terms of what you *have* and what you *need*:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you *have* a sequence of length n and you *need* a sequence
of length n, use &lt;strong&gt;map&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you *have* a sequence of length n and you *need* a shorter
sequence, use &lt;strong&gt;filter&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you *have* a sequence of length n and you *need* a scalar,
use &lt;strong&gt;reduce&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems pretty obvious when stated like that, but it has been helpful
to me on occasion when I start to get lost in how to express a
particular algorithm.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;meikel-brandmeyer:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Meikel Brandmeyer&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/kotarak&#34;&gt;Twitter&lt;/a&gt;. His &lt;a href=&#34;http://bitbucket.org/kotarak&#34;&gt;BitBucket
Id&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is my tip on &lt;strong&gt;atoms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Clojure provides a lot of facilities to tackle the complexity of
concurrent programming. But still you have to understand the semantics
of the underlying facilities. One of these are &lt;strong&gt;refs&lt;/strong&gt;, which allow
coordinated access to several different entities at once. However, their
use inflicts quite a bit of ceremony. You have to invoke the STM
machinery whenever you want to write to a &lt;strong&gt;ref&lt;/strong&gt; or want a consistent
snapshot of several &lt;strong&gt;refs&lt;/strong&gt;. Also your transaction is rolled back
should a surrounding transaction retry. This is not always what you
want.&lt;/p&gt;

&lt;p&gt;In such cases, it is interesting to use an &lt;strong&gt;atom&lt;/strong&gt;. They are cheaper in
terms of overhead and don’t interact with the STM. So the retry of a
surrounding transaction doesn’t affect them. However they are
uncoordinated: you can’t safely update multiple &lt;strong&gt;atoms&lt;/strong&gt; at once.&lt;/p&gt;

&lt;p&gt;What is not so well known, is the fact, that &lt;strong&gt;refs&lt;/strong&gt; also coordinate
several accesses to the *same* &lt;strong&gt;ref&lt;/strong&gt;. Again, this does *not* work
well with &lt;strong&gt;atoms&lt;/strong&gt;. Consider a cache, eg. for a &lt;strong&gt;memoized&lt;/strong&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn memoize
 [f]
 (let [cache (atom {})]
   (fn [&amp;amp; args]
     (when-not (contains? @cache args)
       (swap! cache assoc args (apply f args)))
     (get @cache args))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code uses an &lt;strong&gt;atom&lt;/strong&gt; and clojure datastructures, so we have no
problems with concurrency, right? &lt;strong&gt;Wrong!&lt;/strong&gt; There are plenty of race
conditions between the different calls to &lt;strong&gt;contains?&lt;/strong&gt;, &lt;strong&gt;swap!&lt;/strong&gt; and
&lt;strong&gt;get&lt;/strong&gt;. In the example, the worst thing that can happen is that we
compute the value of the function call several times. This can already
be quite annoying if the call is expensive in computation time and/or
resources. But consider a more involved cache implementation which could
also remove entries from the cache. Then the call to &lt;strong&gt;contains?&lt;/strong&gt; could
see the value, but when we call get it might already be removed.&lt;/p&gt;

&lt;p&gt;The problem is, that we access the atom’s contents several times and
this is not coordinated. Contrary to &lt;strong&gt;refs&lt;/strong&gt; where we could call ensure
to – well – ensure that the &lt;strong&gt;ref&lt;/strong&gt; doesn’t change under our hands.&lt;/p&gt;

&lt;p&gt;How to solve this problem? Well, the problem is that we touch the
&lt;strong&gt;atom&lt;/strong&gt; several times. So the solution is to touch the &lt;strong&gt;atom&lt;/strong&gt; only
once!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn memoize
 [f]
 (let [cache  (atom {})
       update (fn [state args]
                (if-not (contains? state args)
                  (assoc state args (apply f args))
                  state))]
   (fn [&amp;amp; args]
     (get (swap! cache update args) args))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we do the contains check and update in one function which will see
a consistent view of the cache state. Note that we also use the return
value of the &lt;strong&gt;swap!&lt;/strong&gt;. Otherwise we would again have to access to the
atom several times!&lt;/p&gt;

&lt;p&gt;So while Clojure provides a lot of tools to tackle the problems of a
concurrent world, you still have to understand what the semantics of the
different tools are. And even then you have to carefully reason about
your code. How it behaves. Where race conditions might hide. Life is not
easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are other problems to the above problem. Eg. doing
expensive work – namely calling f – in a &lt;strong&gt;swap!&lt;/strong&gt;. Please read
&lt;a href=&#34;http://kotka.de/blog/2010/03/memoize_done_right.html&#34;&gt;Meikel’s blog
post&lt;/a&gt; on
&lt;strong&gt;memoize&lt;/strong&gt; where even more such considerations are taken into account.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;michael-fogus:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Michael Fogus&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/fogus&#34;&gt;Twitter&lt;/a&gt;. His book &lt;a href=&#34;http://fogus.me/&#34;&gt;The Joy of
Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many macros that I write start exactly the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   (defmacro a-macro [&amp;amp; forms]
     `&#39;~forms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it proceeds to be transformed into a pipeline where each piece does
a gradual transformation of forms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   (defn do-something [forms]
     (frobnicate forms))

   (defn do-something-else [forms]
     (moidilize forms))

   (defmacro a-macro [&amp;amp; forms]
     (let [forms (do-something forms)
           forms (do-something-else forms)])
     `&#39;~forms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes it easy to see the transformations occurring at each step,
keeps my macros small, and allows me to put error handling in each of
the transformation functions for compile-time exceptions.&lt;/p&gt;

&lt;p&gt;Although this is all pretty arcane as I try really really hard to avoid
writing macros else I get beaten.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;michael-kohl:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Michael Kohl&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/citizen428&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://citizen428.net/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My tip would be the &lt;a href=&#34;http://clojure.org/reader&#34;&gt;Clojure reader macro
&lt;strong&gt;#_&lt;/strong&gt;&lt;/a&gt; which completely ignores the next
form. From the docs:&lt;/p&gt;

&lt;p&gt;“The form following &lt;strong&gt;#_&lt;/strong&gt; is completely skipped by the reader. (This
is a more complete removal than the &lt;strong&gt;comment&lt;/strong&gt; macro which yields
&lt;strong&gt;nil&lt;/strong&gt;).”&lt;/p&gt;

&lt;p&gt;This can be immensely useful while debugging.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;nurullah-akkaya:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Nurullah Akkaya&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/nakkaya&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://nakkaya.com/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My tip would be on destructuring, which allows you to pull apart data
structures into local bindings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     (let [[x y] [1 2]] 
       x)
     ;;user=&amp;gt; 1

     (let [[a b c] &amp;quot;abc&amp;quot;] 
       c)
     ;;user=&amp;gt; \c

     (let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]
       [x1 y1 x2 y2])
     ;;user=&amp;gt; [1 2 3 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides destructuring sequential things (vectors, lists, seqs, strings,
arrays, or anything that supports nth), you can destructure maps as
well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     (let [{key1 :key1 key2 :key2} {:key1 5 :key2 6}] 
       [key1 key2])
     ;;user=&amp;gt; [5 6]

     (let [{[x1 y1] :player1 [x2 y2] :player2} {:player1 [5 6] :player2 [9 9]}] 
       [x1 y1 x2 y2])
     ;;user=&amp;gt; [5 6 9 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time, your local variables has the same names as the
keywords, Clojure provides a shortcut that saves you from typing binding
x keyword :x over and over again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     (let [{:keys [key1 key2]} {:key1 5 :key2 6}] 
            [key1 key2])
     ;;user=&amp;gt; [5 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more on destructuring, checkout the
&lt;a href=&#34;http://clojure.org/special_forms#Special%20Forms--(let[bindings*%20]%20exprs*&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ramakrishnan-muthukrishnan:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Ramakrishnan Muthukrishnan&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/vu3rdd&#34;&gt;Twitter&lt;/a&gt;. His &lt;a href=&#34;http://github.com/vu3rdd&#34;&gt;GitHub
Id&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #1&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;If you have a sequence and want to remove duplicates, there are
(atleast) two ways to do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(vec (into #{} [1 2 2 3 4 5])) ; =&amp;gt; [1 2 3 4 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(distinct [1 2 2 3 4 5]) ; =&amp;gt; [1 2 3 4 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second one is preferred.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #2&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;In a function, if you have a list of parameters, you can do the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn foo [x &amp;amp; xs]
 (...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same can be done in anonymous functions too. What if you are using
the abbreviated form (reader macro form) of an anonymous function? You
can still use it by using the “%&amp;amp;” to denote the rest of the argument as
a list. One example of the use of this form is shown
&lt;a href=&#34;http://www.bestinclass.dk/index.clj/2009/10/brians-functional-brain.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #3&lt;/strong&gt;: I echo Craig Andera’s opinions on &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt; and
&lt;strong&gt;reduce&lt;/strong&gt;. It is extremely important to master these three constructs.
Especially, the way &lt;strong&gt;reduce&lt;/strong&gt; can be used with hash-maps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #4&lt;/strong&gt;: If you want to have default values for some of the input
parameters, one way is to define functions of diferent arity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn foo
 ([] (foo &amp;quot;bar&amp;quot;))
 ([s] (........)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, when ‘foo’ is called without any arguments, we assume a default
value of “bar”, a string as argument to the function and call foo with
that argument.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stuart-sierra:8e2a8fa6113b13df9499ac52ecdd6e19&#34;&gt;Stuart Sierra&lt;/h2&gt;

&lt;p&gt;Find him on &lt;a href=&#34;http://twitter.com/stuartsierra&#34;&gt;Twitter&lt;/a&gt;. His
&lt;a href=&#34;http://stuartsierra.com/&#34;&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, I’ve said this before, but it bears saying again: Don’t write a
macro where a function will do. Functions are more flexible: they can be
composed and passed as values. Do not use macros solely to make the
syntax “prettier.”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you like these tips? We are eager to know your reactions as comments
to this post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Popular Posts on Clojure from RubyLearning</title>
      <link>http://rubylearning.com/2010/07/24/popular-posts-on-clojure-from-rubylearning/</link>
      <pubDate>Sat, 24 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/07/24/popular-posts-on-clojure-from-rubylearning/</guid>
      <description>&lt;p&gt;Many Rubyists today are talking about and exploring Clojure and I wanted
to share a list of some popular posts on Clojure from RubyLearning.
Enjoy!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/04/06/rich-hickey-talks-to-rubylearnings-clojure-course-participants/&#34;&gt;Rich
Hickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/10/stuart-halloway-talks-to-rubylearnings-clojure-course-participants/&#34;&gt;Stuart
Halloway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/10/michael-fogus-talks-to-rubylearnings-clojure-course-participants/&#34;&gt;Michael
Fogus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/18/amit-rathore-talks-to-rubylearnings-clojure-course-participants/&#34;&gt;Amit
Rathore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/07/29/clojure-a-chat-with-andrew-boekhoff/&#34;&gt;Andrew
Boekhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/07/26/clojure-tips-from-the-experts/&#34;&gt;Clojure Tips from the
Experts&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And hopefully more to come…&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RubyLearning Associates and Participants on Twitter and Facebook</title>
      <link>http://rubylearning.com/2010/07/09/rubylearning-associates-and-participants-on-twitter-and-facebook/</link>
      <pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/07/09/rubylearning-associates-and-participants-on-twitter-and-facebook/</guid>
      <description>

&lt;h2 id=&#34;rubylearning-associates-and-participants-on-twitter-and-facebook:c8429096bb847ee20e9d305b4b011f86&#34;&gt;RubyLearning Associates and Participants on Twitter and Facebook&lt;/h2&gt;

&lt;p&gt;RubyLearning is associated with some amazing, talented people these last
5 years. I am compiling a list (in alphabetical order) showcasing them;
people who have either undergone some of the courses at RubyLearning or
have been instrumental in taking RubyLearning to the next level.&lt;/p&gt;

&lt;h3 id=&#34;argentina:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Argentina&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Gustavo A. Courault on &lt;a href=&#34;http://twitter.com/Courault&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/gcourault&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;australia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Australia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dr Nic Williams on &lt;a href=&#34;http://twitter.com/drnic&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Rhys Powell on &lt;a href=&#34;http://twitter.com/FrogBawt&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;austria:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Austria&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Michael Kohl on &lt;a href=&#34;http://twitter.com/citizen428&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;https://plus.google.com/u/0/101046237539584353961/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;bangladesh:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Bangladesh&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Samiron Paul on &lt;a href=&#34;http://twitter.com/samironpaul&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;brazil:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Brazil&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Andre Lima Silva on &lt;a href=&#34;http://twitter.com/vixlima&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/vixlima&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;https://github.com/vixlima&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cassiano Faria on &lt;a href=&#34;http://twitter.com/cassianofaria&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/cassianofaria&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Christopher Moura on &lt;a href=&#34;http://twitter.com/christopher78&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/christopher.moura&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Daniel Freire on &lt;a href=&#34;http://twitter.com/danfoxz&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Daniel Kühl Lima on &lt;a href=&#34;http://twitter.com/dklima&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://pt-br.facebook.com/people/Daniel-Kuhl-Lima/1051337048&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Diógenes Fernandes on &lt;a href=&#34;http://twitter.com/diofeher&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/people/Diogenes-Herminio/100000328087335&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Elomar Franca on &lt;a href=&#34;http://twitter.com/elomar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/elomar.f&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Eric Fer on &lt;a href=&#34;http://twitter.com/ericfer&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/ericferz&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Felipe Elias Philipp on &lt;a href=&#34;http://twitter.com/felipeelias&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Felipe Sewaybricker Lombardi on
&lt;a href=&#34;http://twitter.com/felipe_kiros&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Fabio Akita on &lt;a href=&#34;http://twitter.com/akitaonrails&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/akitaonrails&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Herminio Torres on &lt;a href=&#34;http://twitter.com/herminiotorres&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/herminiocesar&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jefferson Jean Martins Girão on
&lt;a href=&#34;http://twitter.com/jeffersongirao&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://pt-br.facebook.com/people/Jefferson-Jean-Martins-Girao/100000634363833&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Joao Vitor Lacerda Guimaraes on
&lt;a href=&#34;http://twitter.com/joaovitor&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/joaovitor&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kleber Virgilio Correia on
&lt;a href=&#34;http://twitter.com/klebervirgilio&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Lucas Allan Cardoso on &lt;a href=&#34;http://twitter.com/lucasallan&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Marcio Giaxa Marinheiro on &lt;a href=&#34;http://twitter.com/marciogm&#34;&gt;Twitter&lt;/a&gt;
and &lt;a href=&#34;http://www.facebook.com/marciogiaxa&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Marcos Ricardo on &lt;a href=&#34;http://twitter.com/marcric&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/profile.php?id=100000351446343&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mariana M. Ribeiro on &lt;a href=&#34;http://twitter.com/MARIRIB1&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Michel Brito on &lt;a href=&#34;Michel%20Brito&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/michelbrito&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nícolas Faccin Iensen on &lt;a href=&#34;http://twitter.com/nicolasiensen&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Rafael Caetano Pinto on &lt;a href=&#34;http://twitter.com/barenko&#34;&gt;Twitter&lt;/a&gt;,
Facebook and &lt;a href=&#34;https://github.com/barenko&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Raphael Ivan on &lt;a href=&#34;http://twitter.com/raphaelivan&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;https://github.com/raphaelivan&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodolfo Luiz on &lt;a href=&#34;http://twitter.com/rodolfols&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rodolfols&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodrigo Flores on &lt;a href=&#34;http://twitter.com/rlmflores&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rodrigolmflores&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rodrigo Machad on &lt;a href=&#34;http://twitter.com/rcmachado&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://facebook.com/rcmachado&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;http://github.com/rcmachado&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rudak Duarte Mendonça on &lt;a href=&#34;http://twitter.com/rudak&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Saulo Arruda on &lt;a href=&#34;http://twitter.com/sauloarruda&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/sauloarruda&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sergio Lima on &lt;a href=&#34;http://twitter.com/sergiosouzalima&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/sergiosouzalima&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Willian Molinari on &lt;a href=&#34;http://twitter.com/WillianMolinari&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cambodia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Cambodia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Samnang Chhun on &lt;a href=&#34;http://twitter.com/samnangchhun&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;https://github.com/samnang&#34;&gt;Facebook&lt;/a&gt;,
&lt;a href=&#34;https://github.com/samnang&#34;&gt;GitHUb&lt;/a&gt; and
&lt;a href=&#34;https://plus.google.com/u/0/105136417144363639670/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prum Sambath on &lt;a href=&#34;http://twitter.com/Sambath&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;canada:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Canada&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alvaro Tejada Galindo on &lt;a href=&#34;http://twitter.com/Blag&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Antonio Cangiano on &lt;a href=&#34;http://twitter.com/acangiano&#34;&gt;Twitter&lt;/a&gt;,
Facebook and
&lt;a href=&#34;https://plus.google.com/104323476891214773710/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dennis Misener on &lt;a href=&#34;http://twitter.com/DMisener&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dennis Theisen on &lt;a href=&#34;http://twitter.com/soleone&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/dennistheisen&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jeff Savin on &lt;a href=&#34;http://twitter.com/JeffSavin&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jeff.l.savin&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Matthew Boehlig on &lt;a href=&#34;http://twitter.com/thetamind&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Paul Carvalho on &lt;a href=&#34;http://twitter.com/can_test&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;china:c8429096bb847ee20e9d305b4b011f86&#34;&gt;China&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;David Ruan on &lt;a href=&#34;http://twitter.com/ruanwz&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;denmark:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Denmark&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Roy Simon on &lt;a href=&#34;http://twitter.com/roydealsimon&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ecuador:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Ecuador&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Marcelo Bonilla on Twitter and
&lt;a href=&#34;http://www.facebook.com/chelobonilla&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;egypt:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Egypt&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Ahmad Al-Ajmi on &lt;a href=&#34;http://twitter.com/cssah&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/cssah&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;estonia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Estonia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jevgeni Holodkov on Twitter and
&lt;a href=&#34;http://www.facebook.com/jevgeni.holodkov&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;finland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Finland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abel B. Terefe on &lt;a href=&#34;http://twitter.com/abel_ter&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;france:c8429096bb847ee20e9d305b4b011f86&#34;&gt;France&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Michèle Garoche on &lt;a href=&#34;http://twitter.com/migatine&#34;&gt;Twitter&lt;/a&gt;, Facebook,
&lt;a href=&#34;http://github.com/migane&#34;&gt;GitHub&lt;/a&gt; and
&lt;a href=&#34;http://gplus.to/migatine&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thibaut Barrère on &lt;a href=&#34;http://twitter.com/thibaut_barrere&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;germany:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Germany&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dennis Theisen on &lt;a href=&#34;http://twitter.com/soleone&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://facebook.com/dennistheisen&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;http://github.com/Soleone&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;greece:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Greece&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;John Deliyiannis on &lt;a href=&#34;http://twitter.com/johndel&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/istoselidas&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;india:c8429096bb847ee20e9d305b4b011f86&#34;&gt;India&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abhinav Saxena on &lt;a href=&#34;http://twitter.com/abhinav&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/abhinavs&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Abhinav Upadhyay on &lt;a href=&#34;http://twitter.com/iamabhi9&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/abhinav.jacksparrow&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Akshat Paul on &lt;a href=&#34;http://twitter.com/paulakshat&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ambanna Yatnal on &lt;a href=&#34;http://twitter.com/ambanna&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/Ambanna&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Amol Londhe on Twitter and
&lt;a href=&#34;http://www.facebook.com/profile.php?id=100001645362511&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Anil Wadghule on &lt;a href=&#34;http://twitter.com/anildigital&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ankita Mathur on &lt;a href=&#34;http://twitter.com/anksangel&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://en-gb.facebook.com/people/Ankita-Mathur/1634648937&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Baishampayan Ghose on &lt;a href=&#34;http://twitter.com/ghoseb&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Balaji Alagusundaram on &lt;a href=&#34;http://twitter.com/aviniyan&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Bhushan G Ahire on &lt;a href=&#34;http://twitter.com/bhushangahire&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/bhushangahire&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dhanesh Purohit on &lt;a href=&#34;http://twitter.com/dhaneshpurohit&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/dhanesh.purohit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dhruva Sagar on &lt;a href=&#34;http://twitter.com/dhruvasagar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/people/Dhruva-Sagar/100001257499345&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gautam Rege on &lt;a href=&#34;http://twitter.com/gautamrege&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/gautam.rege&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Gokula Murthy on &lt;a href=&#34;http://twitter.com/gokulamurthy&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/gokulamurthy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jigar Gosar on &lt;a href=&#34;http://twitter.com/jigargosar&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ketan Doshi on &lt;a href=&#34;http://twitter.com/ketandoshi&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/ketandoshi81&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Manik Juneja on &lt;a href=&#34;http://twitter.com/mjuneja&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Manimaran Malaichamy on &lt;a href=&#34;http://twitter.com/manimaranm&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/people/Manimaran-Malaichamy/100000858117720&#34;&gt;Facebook&lt;/a&gt;,
&lt;a href=&#34;http://github.com/maniempire&#34;&gt;GitHub&lt;/a&gt; and
&lt;a href=&#34;http://gplus.to/manimaran&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manoj Mathai on &lt;a href=&#34;http://twitter.com/letronje&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Mohammed Aslam on &lt;a href=&#34;http://twitter.com/tweeslam&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/mohammed.aslam&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nithin Bekal on &lt;a href=&#34;http://twitter.com/nithinbekal&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/nithinbekal&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Piyush Gupta on &lt;a href=&#34;https://twitter.com/mba_piyush&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/mba.piyushgupta&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prakash Sejwani on &lt;a href=&#34;http://twitter.com/peter_sejwani&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Rajarshi Das on Twitter and
&lt;a href=&#34;http://www.facebook.com/rajarshi2576&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rajeev Sharma on Twitter and
&lt;a href=&#34;http://www.facebook.com/rajeevkannav&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ramakrishnan Muthukrishnan on &lt;a href=&#34;http://twitter.com/vu3rdd&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Ravikumar N on &lt;a href=&#34;http://twitter.com/HappyRavi&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Rohan R Arora on &lt;a href=&#34;http://twitter.com/rohan071290&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Rohit Arondekar on &lt;a href=&#34;http://twitter.com/rohitarondekar&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/rohit.arondekar&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rohit Pal on &lt;a href=&#34;http://twitter.com/rohitpal&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/palrohit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;S K Prasad on &lt;a href=&#34;http://twitter.com/skprasad&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://facebook.com/skprasad&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sandip Ransing on &lt;a href=&#34;http://twitter.com/sandipransing&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://github.com/sandipransing&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Santosh Gokak on &lt;a href=&#34;http://twitter.com/santoshgokak&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Satish Talim on &lt;a href=&#34;http://twitter.com/IndianGuru&#34;&gt;Twitter&lt;/a&gt;,
&lt;a href=&#34;http://www.facebook.com/satishtalim&#34;&gt;Facebook&lt;/a&gt; and
&lt;a href=&#34;https://plus.google.com/107809992818057105754/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Saurabh Bhatia on &lt;a href=&#34;http://twitter.com/safew&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/saurabh.a.bhatia&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Saurabh Purnaye on &lt;a href=&#34;http://twitter.com/saurabhp/&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Shyammohan Kanojia on &lt;a href=&#34;http://twitter.com/_shyam&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/Shyammohankanojia&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sheetal Prasad Goyal on &lt;a href=&#34;http://twitter.com/spgoyalmnit&#34;&gt;Twitter&lt;/a&gt;
and &lt;a href=&#34;http://www.facebook.com/spgoyalmnit&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Siva Gollapalli on &lt;a href=&#34;http://twitter.com/sivagollapalli&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;SoftMind Technology on &lt;a href=&#34;http://twitter.com/SoftMind&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Sreelakshmi Sridharan on Twitter and
&lt;a href=&#34;http://www.facebook.com/sree.lakshmi1&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Suman Mukherjee on &lt;a href=&#34;http://twitter.com/mukherjeesuman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Surya Raj Tripathi on &lt;a href=&#34;http://twitter.com/surya_raj&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/tripathi.surya&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vamsi Krishna on &lt;a href=&#34;https://twitter.com/VAMccrishna&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Vinay Seshadri on &lt;a href=&#34;http://twitter.com/ytvinay&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;japan:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Japan&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Kenneth Burling on &lt;a href=&#34;http://twitter.com/burlingk&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Satoshi Asakawa on &lt;a href=&#34;http://twitter.com/ashbb&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;malaysia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Malaysia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Yuvan Kumar Danabalan on &lt;a href=&#34;http://twitter.com/yuvankumar&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;macedonia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Macedonia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dalibor Nasevic on &lt;a href=&#34;http://twitter.com/blackflasher&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mexico:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Mexico&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alonso Delgado on &lt;a href=&#34;http://twitter.com/adam_9_dz&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Emmanuel Delgado on &lt;a href=&#34;http://twitter.com/chischaschos&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/chischaschos&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hector Sansores on &lt;a href=&#34;http://twitter.com/hectorsq&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jose Castaneyra on &lt;a href=&#34;http://twitter.com/jcastaneyra&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jcastaneyra&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;netherlands:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Netherlands&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Julio Javier Cicchelli on
&lt;a href=&#34;http://twitter.com/monsieur_rock&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;pakistan:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Pakistan&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Ahmed Mubbashir Khan on &lt;a href=&#34;http://twitter.com/mubbashir&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Hasham Malik on &lt;a href=&#34;http://twitter.com/hasham2&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/hasham2&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;peru:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Peru&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Alvaro Pereyra on &lt;a href=&#34;http://twitter.com/yaraher&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;José Corcuera Z. on &lt;a href=&#34;http://twitter.com/jcorcuera&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jzcorcuera&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;philippines:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Philippines&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dennis Carique on Twitter and
&lt;a href=&#34;http://www.facebook.com/dcarique&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;poland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Poland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Daniel Kotowski on &lt;a href=&#34;http://twitter.com/kotosha&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/kotosha&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Grzegorz Smajdor on &lt;a href=&#34;http://twitter.com/sfistak&#34;&gt;Twitter&lt;/a&gt;, Facebook
and &lt;a href=&#34;http://github.com/gs&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Michal Kuklis on &lt;a href=&#34;http://twitter.com/mkuklis&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;portugal:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Portugal&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jorge Mendes on &lt;a href=&#34;http://twitter.com/jorgemendes&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/jorge.mendes75&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;romania:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Romania&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cristi Ispas on &lt;a href=&#34;http://twitter.com/cispas2000&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;serbia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Serbia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Milan Dobrota on &lt;a href=&#34;http://twitter.com/milandobrota&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;singapore:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Singapore&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Sau Sheong on &lt;a href=&#34;http://twitter.com/sausheong&#34;&gt;Twitter&lt;/a&gt;, Facebook and
&lt;a href=&#34;https://plus.google.com/u/0/114610362086938873953/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;slovenia:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Slovenia&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Jure Srsen on &lt;a href=&#34;http://twitter.com/Hoornet&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/hoornet&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;spain:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Spain&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Javier Neira on &lt;a href=&#34;http://twitter.com/jneira&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Juanjo Bazan on &lt;a href=&#34;http://twitter.com/xuanxu&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Lorenzo Planas on &lt;a href=&#34;http://twitter.com/lorenzoplanas&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;switzerland:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Switzerland&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Vincent Jacquel on &lt;a href=&#34;http://twitter.com/minikermit&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;thailand:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Thailand&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Twin Panichsombat on &lt;a href=&#34;http://twitter.com/roofimon&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/roofimon&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;turkey:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Turkey&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Burc Yildirim on &lt;a href=&#34;http://twitter.com/phrewww&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/burc.yildirim&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Niyazi Ates on &lt;a href=&#34;http://twitter.com/hazal1&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://tr-tr.facebook.com/people/Niyazi-Ates/615514520&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;uk:c8429096bb847ee20e9d305b4b011f86&#34;&gt;UK&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bruce Scharlau on &lt;a href=&#34;http://twitter.com/scharlau&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jamie van Dyke on &lt;a href=&#34;http://twitter.com/fearoffish&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Maris Orbidans on &lt;a href=&#34;http://twitter.com/Marutks&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Peter Cooper on &lt;a href=&#34;http://twitter.com/peterc&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Richard Taylor on &lt;a href=&#34;http://twitter.com/moomerman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Sam Aaron on &lt;a href=&#34;http://twitter.com/samaaron&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Sami Bashraheel on &lt;a href=&#34;http://twitter.com/#!/samib_&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ukraine:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Ukraine&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Vladyslav Sumskyi on &lt;a href=&#34;http://twitter.com/sumskyi&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://tr-tr.facebook.com/people/Niyazi-Ates/615514520&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;uruguay:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Uruguay&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bernhard Üllenberg on &lt;a href=&#34;http://twitter.com/Fotoretusche&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/#!/bernhard.uellenberg&#34;&gt;http://www.facebook.com/#!/bernhard.uellenberg&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;usa:c8429096bb847ee20e9d305b4b011f86&#34;&gt;USA&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Aaron Quint on &lt;a href=&#34;http://twitter.com/aq&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Al Snow on &lt;a href=&#34;http://twitter.com/jasnow&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/al.snow&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Amit Rathore on &lt;a href=&#34;http://twitter.com/amitrathore&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ashish Dixit on &lt;a href=&#34;http://twitter.com/tundal45&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Braxton Gregory Smith on &lt;a href=&#34;http://twitter.com/braxtongsmith&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Bruce Williams on &lt;a href=&#34;http://twitter.com/wbruce&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Charles Nutter on &lt;a href=&#34;http://twitter.com/headius&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Chris Strom on &lt;a href=&#34;http://twitter.com/eee_c&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Dan Wanek on &lt;a href=&#34;http://twitter.com/zentourist&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Daniel Solano Gómez on &lt;a href=&#34;http://twitter.com/deepbluelambda&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Darren Shafae on &lt;a href=&#34;http://twitter.com/Papercheck&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dave Thomas on &lt;a href=&#34;http://twitter.com/pragdave&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;David A Black on &lt;a href=&#34;http://twitter.com/david_a_black&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;David Loeffler on &lt;a href=&#34;http://twitter.com/#!/loeffler&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Doug Sparling on &lt;a href=&#34;http://twitter.com/scriptrunner&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Dustin Shafae on &lt;a href=&#34;http://twitter.com/#!/DustinShafae&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Eric Lavigne on &lt;a href=&#34;http://twitter.com/ericlavigne&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Fletcher Fowler on &lt;a href=&#34;http://twitter.com/fzf&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;George Thompson on &lt;a href=&#34;http://twitter.com/millionmonkey&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Greg Newman on &lt;a href=&#34;http://twitter.com/gregnewman&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Ian Dees on &lt;a href=&#34;http://twitter.com/undees&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;James Edward Gray II on &lt;a href=&#34;http://twitter.com/JEG2&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Jerry Anning on &lt;a href=&#34;http://twitter.com/anatman&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;John Trupiano on &lt;a href=&#34;http://twitter.com/jtrupiano&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Juan Gomez on &lt;a href=&#34;http://twitter.com/#!/_juandg&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/juandg&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lea Caldwell on Twitter and
&lt;a href=&#34;http://www.facebook.com/Sienta414&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mark Fayngersh on &lt;a href=&#34;http://twitter.com/gmaster1440&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Mark Champine on &lt;a href=&#34;http://twitter.com/mchampine&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/mchampine&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mark Nyon on &lt;a href=&#34;http://twitter.com/scorintha&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Mark Volkmann on &lt;a href=&#34;http://twitter.com/mark_volkmann&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Michael Fogus on &lt;a href=&#34;http://twitter.com/fogus&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Narayan Iyer on &lt;a href=&#34;http://twitter.com/iyerland&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Naum Trifanoff on &lt;a href=&#34;http://twitter.com/naum&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Nick Hird on &lt;a href=&#34;http://twitter.com/boondox&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Noel Rappin on &lt;a href=&#34;http://twitter.com/noelrap&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Prakash N Murthy on &lt;a href=&#34;http://twitter.com/#!/_prakash&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/prakash.murthy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Raghava Nellaturu on &lt;a href=&#34;http://twitter.com/rnella01&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Raj Kandati on &lt;a href=&#34;http://twitter.com/raj421&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Ricardo J Sanchez on &lt;a href=&#34;http://twitter.com/ricardojsanchez&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;li&gt;Ryan Bates on &lt;a href=&#34;http://twitter.com/rbates&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Solomon White on &lt;a href=&#34;http://twitter.com/rubysolo&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Spencer Poplin on &lt;a href=&#34;http://twitter.com/slpoplin&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Spencer Roach on &lt;a href=&#34;http://twitter.com/spncrgr&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/spncrgr&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Steve Kim on &lt;a href=&#34;http://twitter.com/skim&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Stuart Halloway on &lt;a href=&#34;http://twitter.com/stuarthalloway&#34;&gt;Twitter&lt;/a&gt; and
Facebook.&lt;/li&gt;
&lt;li&gt;Thomas Thornton on &lt;a href=&#34;http://twitter.com/tltjr&#34;&gt;Twitter&lt;/a&gt; and Facebook.&lt;/li&gt;
&lt;li&gt;Tom Marrs on &lt;a href=&#34;http://twitter.com/TomMarrs&#34;&gt;Twitter&lt;/a&gt; and
&lt;a href=&#34;http://www.facebook.com/thomasamarrs&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tom Mulcahy on Twitter and
&lt;a href=&#34;http://www.facebook.com/tom.mulcahy&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Victor Goff III on &lt;a href=&#34;http://twitter.com/kotp&#34;&gt;Twitter&lt;/a&gt;, Facebook and
&lt;a href=&#34;http://gplus.to/vhgiii&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Winston Lawrence on &lt;a href=&#34;http://twitter.com/winstonlawrence&#34;&gt;Twitter&lt;/a&gt;
and Facebook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;vietnam:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Vietnam&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Bui Dinh Ngoc on Twitter and
&lt;a href=&#34;http://www.facebook.com/bdngoc&#34;&gt;Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tinh T. Dinh on Twitter, Facebook and
&lt;a href=&#34;https://plus.google.com/u/0/104618807642305066883/&#34;&gt;Google+&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;update:c8429096bb847ee20e9d305b4b011f86&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;I’ll be updating this page from time to time. If you have been
associated with RubyLearning in some way or the other and would like
your information (Full name, Country of Residence, Twitter Id and / or
Facebook Profile URL and / or GitHub URL) displayed here, please post
the information here as a comment or email me at satish [dot] talim [at]
gmail.com.&lt;/p&gt;

&lt;p&gt;Thank you for your time and help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Promotion: The Joy of Clojure</title>
      <link>http://rubylearning.com/2010/05/08/book-promotion-the-joy-of-clojure/</link>
      <pubDate>Sat, 08 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/05/08/book-promotion-the-joy-of-clojure/</guid>
      <description>

&lt;h2 id=&#34;book-promotion-the-joy-of-clojure:25485a31d404219193dcf4bd6386001b&#34;&gt;Book Promotion: The Joy of Clojure&lt;/h2&gt;

&lt;p&gt;RubyLearning is pleased to announce the promotion of the book “&lt;strong&gt;&lt;a href=&#34;http://www.manning.com/fogus/&#34;&gt;The
Joy of Clojure&lt;/a&gt;&lt;/strong&gt;” by author Michael
Fogus and Chris Houser. The general idea of a &lt;strong&gt;book promotion&lt;/strong&gt; is that
it gives the participants a chance to ask relevant questions, interact
with the author of the book and in the process possibly win a copy of
the book, all for free!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.manning.com/fogus/&#34;&gt;&lt;img src=&#34;http://rubylearning.com/images/fogusbook.jpg&#34; alt=&#34;The Joy of
Clojure&#34; title=&#34;The Joy of Clojure&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promotion Period: &lt;strong&gt;25 to 27 May 2010&lt;/strong&gt;. Michael Fogus will be
online in the forum to answer your questions.&lt;/li&gt;
&lt;li&gt;Registrations have started. Anyone interested in Clojure programming
can join. It is &lt;strong&gt;FREE&lt;/strong&gt;. Join
&lt;a href=&#34;http://rubylearning.org/class/course/view.php?id=35&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; and
use Enrollment key: &lt;strong&gt;BPCE101&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You can start posting your questions related to the book,
immediately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; Don’t wait! You could win a copy of this book and it’s
free to join.&lt;/p&gt;

&lt;p&gt;The previous book promotions were a big success.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements:25485a31d404219193dcf4bd6386001b&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Special thanks to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/10/michael-fogus-talks-to-rubylearnings-clojure-course-participants/&#34;&gt;Michaelsmore.
Fogus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.manning.com/fogus/&#34;&gt;Manning Publications Co.&lt;/a&gt; for
sponsoring three ebook winners (participants asking the best
questions) and for offering a 35% discount for any version of The
Joy of Clojure (print book+MEAP or ebook+MEAP) to the participants.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions related to this blog post or to schedule a new book
promotion, contact: satish.talim [at] gmail [dot] com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>20&#43; Clojurians to Follow on Twitter</title>
      <link>http://rubylearning.com/2010/04/15/20-clojurians-to-follow-on-twitter/</link>
      <pubDate>Thu, 15 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/04/15/20-clojurians-to-follow-on-twitter/</guid>
      <description>

&lt;h2 id=&#34;what-s-clojure:ef1240f8c915d5b66487f10ecb698455&#34;&gt;What’s Clojure?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://clojure.org/file/view/clojure-icon.gif&#34; alt=&#34;Clojure&#34; title=&#34;Clojure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&#34;http://en.wikipedia.org/wiki/Clojure&#34;&gt;Wikipedia&lt;/a&gt;: “Clojure
is a modern dialect of the Lisp programming language. It is a
general-purpose language supporting interactive development that
encourages a functional programming style, and simplifies multithreaded
programming. Clojure runs on the Java Virtual Machine and the Common
Language Runtime. Clojure honors the code-as-data philosophy and has a
sophisticated Lisp macro system.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart Halloway&lt;/strong&gt; in his &lt;strong&gt;&lt;a href=&#34;http://www.pragprog.com/titles/shcloj/programming-clojure&#34;&gt;Programming
Clojure&lt;/a&gt;&lt;/strong&gt;
book says – “Clojure feels like a general-purpose language beamed back
from the near future. Its support for functional programming and
software trans-actional memory is well beyond current practice and is
well suited for multicore hardware. At the same time, Clojure is well
grounded in the past and the present. It brings together Lisp and the
Java Virtual Machine. Lisp brings wisdom spanning most of the history of
programming, and Java brings the robustness, extensive libraries, and
tooling of the dominant platform available today.”&lt;/p&gt;

&lt;h2 id=&#34;who-s-a-clojurian:ef1240f8c915d5b66487f10ecb698455&#34;&gt;Who’s a Clojurian?&lt;/h2&gt;

&lt;p&gt;A Clojurian is a person who uses the Clojure programming language.&lt;/p&gt;

&lt;h2 id=&#34;a-list-of-clojurians-using-twitter:ef1240f8c915d5b66487f10ecb698455&#34;&gt;A list of Clojurians Using Twitter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/icon_d.png&#34; alt=&#34;Twitter&#34; title=&#34;http://twitter.com/IndianGuru&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/citizen428&#34;&gt;Michael Kohl&lt;/a&gt; of RubyLearning has
compiled this list of over 20 Clojurians, in alphabetical order, with a
link to their Twitter profile. The following list is &lt;em&gt;not&lt;/em&gt; intended to
be all-inclusive, but it should give you a great start to following some
talented Clojurians.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adityo Deshmukh, Pune (India) – &lt;a href=&#34;http://twitter.com/adityo&#34;&gt;adityo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Ott, Paderborn (Germany) –
&lt;a href=&#34;http://twitter.com/alexott_en&#34;&gt;alexott_en&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amit Rathore, Mountain View, CA (USA) –
&lt;a href=&#34;http://twitter.com/amitrathore&#34;&gt;amitrathore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anthony Simpson, Eldridge, Alabama (USA) –
&lt;a href=&#34;http://twitter.com/iorayne&#34;&gt;iorayne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Baishampayan Ghose, Pune (India) –
&lt;a href=&#34;http://twitter.com/ghoseb&#34;&gt;ghoseb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bradford Cross, San Francisco (USA) –
&lt;a href=&#34;http://twitter.com/bradfordcross&#34;&gt;bradfordcross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian Carper – &lt;a href=&#34;http://twitter.com/BrianCarper&#34;&gt;BrianCarper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chas Emerick, USA – &lt;a href=&#34;http://twitter.com/cemerick&#34;&gt;cemerick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chris Houser, Indiana (USA) –
&lt;a href=&#34;http://twitter.com/chrishouser&#34;&gt;chrishouser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Christian Guimarães, Europe – &lt;a href=&#34;http://twitter.com/csgui&#34;&gt;csgui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Christophe Grand, Saint-Étienne (France) –
&lt;a href=&#34;http://twitter.com/cgrand&#34;&gt;cgrand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Craig Andera, Washington DC (USA) –
&lt;a href=&#34;http://twitter.com/craigandera&#34;&gt;craigandera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Daniel Glauser, Castle Rock, Colorado (USA) –
&lt;a href=&#34;http://twitter.com/danielglauser&#34;&gt;danielglauser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Daniel Solano Gómez, Houston, Texas (USA) –
&lt;a href=&#34;http://twitter.com/deepbluelambda&#34;&gt;deepbluelambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dave Fayram – &lt;a href=&#34;http://twitter.com/kirindave&#34;&gt;kirindave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Edgar Liebke, Silver Spring, Maryland (USA) –
&lt;a href=&#34;http://twitter.com/liebke&#34;&gt;liebke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javier Neira, Gasteiz (Spain) – &lt;a href=&#34;http://twitter.com/jneira&#34;&gt;jneira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kyle Burton, Philadelphia (USA) –
&lt;a href=&#34;http://twitter.com/kyleburton&#34;&gt;kyleburton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lau Jensen, Denmark – &lt;a href=&#34;http://twitter.com/LauJensen&#34;&gt;LauJensen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Fogus, Washinton DC (USA) –
&lt;a href=&#34;http://twitter.com/fogus&#34;&gt;fogus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Kohl, Vienna (Austria) –
&lt;a href=&#34;http://twitter.com/citizen428&#34;&gt;citizen428&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nathan Marz, San Francisco (USA) –
&lt;a href=&#34;http://twitter.com/nathanmarz&#34;&gt;nathanmarz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nikhil Prabhakar, Pune (India) – &lt;a href=&#34;http://twitter.com/nipra&#34;&gt;nipra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nurullah Akkaya, Turkey – &lt;a href=&#34;http://twitter.com/nakkaya&#34;&gt;nakkaya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phil Bennett – &lt;a href=&#34;http://twitter.com/philoUK&#34;&gt;philoUK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ramakrishnan, Bangalore (India) –
&lt;a href=&#34;http://twitter.com/vu3rdd&#34;&gt;vu3rdd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rich Hickey, USA – &lt;a href=&#34;http://twitter.com/richhickey&#34;&gt;richhickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Robert Stehwien, Albuquerque, NM (USA) –
&lt;a href=&#34;http://twitter.com/rstehwien&#34;&gt;rstehwien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Roy Deal Simon – &lt;a href=&#34;http://twitter.com/RoyDealSimon&#34;&gt;RoyDealSimon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sam Aaron, Amsterdam (Netherlands) –
&lt;a href=&#34;http://twitter.com/samaaron&#34;&gt;samaaron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sean Devlin – &lt;a href=&#34;http://twitter.com/fulldisclojure&#34;&gt;fulldisclojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Seth Schroeder – &lt;a href=&#34;http://twitter.com/foogoof&#34;&gt;foogoof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Siddhartha Reddy, Bangalore (India) –
&lt;a href=&#34;http://twitter.com/sids&#34;&gt;sids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stuart Halloway, Chapel Hill, NC (USA) –
&lt;a href=&#34;http://twitter.com/stuarthalloway&#34;&gt;stuarthalloway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stuart Sierra, NYC (USA) –
&lt;a href=&#34;http://twitter.com/stuartsierra&#34;&gt;stuartsierra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;T Batchelli, San Francisco (USA) –
&lt;a href=&#34;http://twitter.com/tbatchelli&#34;&gt;tbatchelli&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;others:ef1240f8c915d5b66487f10ecb698455&#34;&gt;Others&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;DisClojure – &lt;a href=&#34;http://twitter.com/disclojure&#34;&gt;disclojure&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Have we missed out any Clojurians? You can help&lt;/strong&gt;. Please feel free to add a
link to a Clojurian’s Twitter profile. We would love to hear why you think the
particular Clojurian is important to Twitter with. Also, do add a link to your
Twitter profile in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rich Hickey talks to RubyLearning&#39;s Clojure Course Participants</title>
      <link>http://rubylearning.com/2010/04/06/rich-hickey-talks-to-rubylearnings-clojure-course-participants/</link>
      <pubDate>Tue, 06 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/04/06/rich-hickey-talks-to-rubylearnings-clojure-course-participants/</guid>
      <description>&lt;p&gt;On the eve of the first free, online “&lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/09/clojure-101-a-new-course/&#34;&gt;Clojure
101&lt;/a&gt;&lt;/strong&gt;”
course, Michael Kohl of RubyLearning caught up with &lt;strong&gt;Rich Hickey&lt;/strong&gt;, the
creator of Clojure. In this interview, Rich Hickey talks to the Clojure
101 course participants on &lt;strong&gt;Clojure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/RichHickey.jpg&#34; alt=&#34;Rich
Hickey&#34; title=&#34;Rich Hickey&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Welcome, Rich and thanks for taking out time for
RubyLearning’s Clojure course participants. For their benefit, could you
tell us something about yourself?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; I’m an independent professional software developer, and the
author of Clojure. For over 2 decades, I’ve worked on a variety of
interesting systems – scheduling, yield management, broadcast
automation, digital audio etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Why and when did you decide to start working on Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; I decided I couldn’t stay interested for 2 more decades if
I had to keep writing software in C-derived languages like C++/Java/C#.
I guess I first committed to creating a language in 2005. I wrote
Clojure because, having great affection for Lisp, I hadn’t been able to
come up with a satisfying way to bridge Common Lisp and the platforms on
which I had to deliver systems – the JVM and .Net. In addition, I’d
decided I wanted to program in a language that was more oriented towards
functional programming than traditional Lisps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Many of RubyLearning’s Clojure course participants have
a Java and or Ruby background. What, according to you, are the benefits
to these participants after learning Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; I think everyone can benefit by taking a more functional
approach to programming. The more you use immutable data and pure
functions, in any programming language, the simpler and more robust your
programs will be. Clojure makes that idiomatic and relatively
approachable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How should our users go about acquiring knowledge and
skills in Clojure? What’s the best approach?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; Everyone learns differently. I would encourage people to
get Programming Clojure, and any other available Clojure books. Try
things out at the REPL – the interactive learning experience is great.
Look at code in Clojure and various libraries. and don’t miss out on the
terrific community on the Clojure google group and #clojure IRC
channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Which areas in Clojure should a would-be Clojure
programmer concentrate on in your opinion?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; If you are coming from an OO background, the most
fundamental thing is to concentrate on programming with values. Don’t
try to replicate your mutable objects, you need them far less than you
might think.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you think this free online course at RubyLearning
will be beneficial to the Clojure community?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; I hope so!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; After the course, most participants would like to
contribute their time, skills and expertise to a Clojure project but
invariably are unaware of where and how to do so. Do you have any
suggestions for them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; Get engaged with the community on the Clojure google group,
find libraries that are useful to you, use them, then see if you have
something to add and coordinate with the library author.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you have any parting words for our Clojure course
participants? Anything you would like to share with them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rich&amp;gt;&amp;gt;&lt;/strong&gt; Clojure is based on the idea that programming can and
should be much less complex. Once you get past any unfamiliarity, I hope
you come to cherish the simplicity that underlies it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Rich. In case you have any queries and/or questions, kindly
post your questions here (as comments to this blog post) and Rich would
be glad to answer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amit Rathore talks to RubyLearning&#39;s Clojure Course Participants</title>
      <link>http://rubylearning.com/2010/03/18/amit-rathore-talks-to-rubylearnings-clojure-course-participants/</link>
      <pubDate>Thu, 18 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/03/18/amit-rathore-talks-to-rubylearnings-clojure-course-participants/</guid>
      <description>&lt;p&gt;On the eve of the first free, online “&lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/09/clojure-101-a-new-course/&#34;&gt;Clojure
101&lt;/a&gt;&lt;/strong&gt;”
course, Michael Kohl of RubyLearning caught up with &lt;strong&gt;Amit Rathore&lt;/strong&gt;,
author of the forthcoming book – &lt;a href=&#34;http://www.clojureinaction.com/&#34;&gt;Clojure in
Action&lt;/a&gt;. In this interview, Amit
Rathore talks to the Clojure 101 course participants on &lt;strong&gt;Clojure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/amitrathore.png&#34; alt=&#34;Amit
Rathore&#34; title=&#34;Amit Rathore&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Welcome, Amit and thanks for taking out time for
RubyLearning’s Clojure course participants. For their benefit, could you
tell us something about yourself?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; I’ve been programming since I was 11, and been designing
and developing software systems in a professional setting for about ten
years now. The last few years have seen me transition from Java to Ruby,
along with a smattering of other languages such as Python, Scheme, and
Smalltalk. Since late 2008, I’ve been using Clojure full-time. I’ve made
a few open-source contributions to the Clojure community – some examples
are data-mappers for HBase and Redis, and another one called Swarmiji
which allows you to write distributed programs (that span multiple CPUs,
not just multiple cores) in Clojure. I’m currently the Chief Software
Architect at a startup called &lt;a href=&#34;http://runa.com/&#34;&gt;Runa&lt;/a&gt;, in Mountain
View, CA. We are a provider of SaaS solutions to online e-tailers to
enable them to provide real-time, analytics-driven promotions to their
shoppers. More than 90% of our backend is written in Clojure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How did you get involved with Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; As I said earlier, I’ve used Scheme on my personal projects
from time to time. At Runa, we always knew we could benefit from using a
Lisp for our back-end, what with all the analytics and machine-learning
that the system needs to do. When all the scalability requirements were
thrown in, we seriously considered using Erlang, thanks to it being
functional and its concurrency support. It was just around then that the
Clojure community really started taking off, and we decided to try it
out. We’ve never looked back, and we’re extremely pleased with the
outcome so far. Our analytics-powered, adaptive, conversion-marketing
engine is miles ahead of any potential competition… and we can add
features (and make sure things still work, and are as performant as
needed) faster than any potential competition. If you have read Paul
Graham’s essay called Beating The Averages, you know what I’m talking
about. In Jan 2009, following our initial Clojure deployment, I started
the &lt;a href=&#34;http://www.meetup.com/The-Bay-Area-Clojure-User-Group/&#34;&gt;Bay Area Clojure User
Group&lt;/a&gt;. It’s
going to host its 17th Meetup next month. It’s great to see the
community growing, and its great being a part of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; You are currently writing “Clojure in Action”. What can
you tell us about the book?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; When Manning Publications contacted me regarding a new
Clojure book, they wanted something different from what was already
available, and what they knew was in progress. When we discussed my
Clojure experience and startup background, we came up with the concept
of the Clojure in Action book. The idea basically resulted in a Clojure
book that does a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Teaches Clojure from first principles i.e. why are certain things
the way they are, and how they’re better than what currently exists
in popular languages.&lt;/li&gt;
&lt;li&gt;Teaches a developer new to Clojure to get going after reading the
book – it answers the “OK, what now?” question – by addressing
issues like test-driven development, IDEs, dependency management,
debugging/profiling, and so on.&lt;/li&gt;
&lt;li&gt;Real-world usage for web-scale applications – from all the
experience I’ve gleaned working with HBase, Redis, RabbitMQ, Amazon
services, Hadoop/MapReduce, and so on.&lt;/li&gt;
&lt;li&gt;And finally, advanced usage of macros to build DSLs (domain-specific
languages). So readers of all levels will get something from the
book – folks new to Clojure can get started quickly, while
intermediate to advanced users can gain also.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Many of RubyLearning’s Clojure course participants have
a Java and or Ruby background. What, according to you, are the benefits
to these participants after learning Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; The functional approach is just a better way to program. So
that, in itself, is a huge learning opportunity. In the words of Eric
Raymond, the famed hacker, “LISP is worth learning for a different
reason — the profound enlightenment experience you will have when you
finally get it. That experience will make you a better programmer for
the rest of your days, even if you never actually use LISP itself a
lot.” And the great news is that Clojure, the latest incarnation of
LISP, is actually so usable that once you start, you will never want to
program in any other language again. This influence includes
meta-programming, which will especially benefit Ruby folks. On the other
hand, it will also make developers from both the camps (especially Java)
realize just how limiting their languages are. Actually, this is also a
good thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Why do you think that such a free, online Clojure course
at RubyLearning would be beneficial to the Clojure community?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; Clojure will only succeed if more and more people adopt it.
While it is a no-brainer once you understand what it offers in terms of
productivity and code-quality, it has the initial problem of
getting-the-word-out. Such a free, online course can do this quite
effectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How should they go about acquiring knowledge and skills
in Clojure? What’s the best approach?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; There is one book published so far, and several coming out.
Those are good resources. There are plenty of tutorials online, as well
as a ton of open-source code which can be great resources. There are
several very active Clojure user groups around the country, and indeed
all over the world. Also, the IRC channel is fantastic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Which areas in Clojure should a would-be Clojure
programmer concentrate on?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; Functional programming would be an important topic. People
coming from an imperative background have to sort of re-wire their
brains. Another topic is “the Lisp way”, which is this idea of bottom-up
design (as opposed to the traditional top-down approach to breaking
things down). Creating mini-languages (fashionably called Domain
Specific Languages these days) that allow the developer to program at a
much higher-level of abstraction is another important design philosophy.
These I’d say are things that take time to really “get into”… so some
deliberate attention should be paid them. Other things, such as
Clojure’s concurrency mechanism are also important, and yet easy to
learn and use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you have any suggestions for RubyLearning’s Clojure
course participants? Anything you would like to share with them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; I’d just like to say this: As developers gain experience,
they learn certain things that become guiding principles. One such thing
is the power of abstractions. As they gain expertise of the programming
language they’re using, they discover the natural limit to the kind of
abstractions that their language of choice can create. They realize that
certain things just can’t be expressed in that language. At times this
manifests in wishing that the language had this feature or that. Lisp
frees you from such tyranny. The parenthesis are there for a reason, and
that reason is to make the macro system possibly. And that makes
wonderful things happen. And Clojure is an incredible Lisp. So, stay
with it, give it a real go, the parenthesis disappear in a few days, and
the real power becomes apparent. And then you can never go back
&lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; After the course, most participants would like to
contribute their time, skills and expertise to a Clojure project but
invariably are unaware of where and how to do so. Could you suggest how
this can be achieved?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; There are plenty of open-source projects that add something
to the Clojure world. GitHub is a great place to start looking, and
there are others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; On a final note: What do you perceive as the future of
Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amit&amp;gt;&amp;gt;&lt;/strong&gt; We are all craftsmen: programming languages and software
requirements are our raw material. Given that complexity of software
requirements is continuing to grow, it behooves us all to use better and
better tools and languages to create the next software system. As a
matter of fact, tomorrow’s software almost needs to be adaptive – it
needs to learn and adjust its behavior based on things like the data
that it sees, or patterns of usage, and so on. This kind of complexity
needs really flexible and powerful tools on the implementation side. A
Lisp is a natural fit for such a dynamic, demanding world. Further,
Clojure’s functional and concurrency story is very strong – as software
moves to clouds of multi-core CPUs, this becomes a great advantage.
Finally, being able to leverage battle-tested Java libraries in such a
seamless manner is another boon. I see more and more people being
enlightened about these issues, and more and more adoption of Clojure.
I’d be very surprised if it doesn’t become the discerning developer’s
first choice within the next couple of years.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Amit. In case you have any queries and/or questions, kindly
post your questions here (as comments to this blog post) and Amit would
be glad to answer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Michael Fogus talks to RubyLearning - Clojure Course Participants</title>
      <link>http://rubylearning.com/2010/03/10/michael-fogus-talks-to-rubylearning---clojure-course-participants/</link>
      <pubDate>Wed, 10 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/03/10/michael-fogus-talks-to-rubylearning---clojure-course-participants/</guid>
      <description>&lt;p&gt;On the eve of the first free, online “&lt;strong&gt;&lt;a href=&#34;http://rubylearning.com/blog/2010/03/09/clojure-101-a-new-course/&#34;&gt;Clojure
101&lt;/a&gt;&lt;/strong&gt;”
course, Michael Kohl of RubyLearning caught up with &lt;strong&gt;Michael Fogus&lt;/strong&gt;,
author of the forthcoming book – &lt;a href=&#34;http://joyofclojure.com/&#34;&gt;The Joy of
Clojure&lt;/a&gt;. In this interview, Michael Fogus
talks to the Clojure 101 course participants on &lt;strong&gt;Clojure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/fogus.jpg&#34; alt=&#34;Michael
Fogus&#34; title=&#34;Michael Fogus&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Welcome, Fogus and thanks for taking out time for
RubyLearning’s Clojure course participants. For their benefit, could you
tell us something about yourself?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; I am a software programmer in the Washington DC area with
a background in Java, C, and C++ creating expert systems, hard real-time
acquisition systems, machine vision, and distributed simulations. Over
the past couple years I’ve been working professionally with Scala and
Java/GWT creating web services and user interfaces. On my own time I am
writing a book for Manning Publishing with a great hacker Chris Houser
titled “The Joy of Clojure” due out in fall 2010. I am an official
external contributor to the Scala language project, but have been
grossly negligent in that respect since starting the work on the book.
Finally, my only other claim to fame is that I am the “official”
custodian of why the lucky stiff’s little language Potion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How and when did you get involved with Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; Sometime around October of 2007 I stood at a crossroads. I
had always loved Lisp having used it in undergrad and grad school and
like many programmers of a certain generation found Paul Graham’s Lisp
essays highly inspirational. So around that time I decided to finally
bite the bullet and really learn *a* Lisp as deeply as I could and
like many programmers, I decided to write my own. Actually, what I
started writing was a dialect of Scheme in Java that was complete and
utter rubbish, but while researching implementations of big numbers I
came across a Sourceforge project about a language called Clojure. Well,
soon after I scrapped my Scheme as a lost cause and instead decided to
dig deeper into Clojure by using it to write a few pet projects; but was
still mostly just dabbling. However, while reading through Graham’s “On
Lisp” I thought it might be a good idea to port the examples from the
book as a public project to elicit feedback about my style, Clojure
idioms, etc… That exercise turned out to be a huge success for me
because the unbelievably helpful Clojure community was the final and
definitive selling point for the language.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.manning.com/fogus/fogus_cover150.jpg&#34; alt=&#34;The Joy of
Clojure&#34; title=&#34;The Joy of Clojure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; You are currently writing “The Joy of Clojure” for
Manning Publications. What can you tell us about the book and your
co-author Chris Houser?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; There are a few Clojure books coming out including our
own, but I think that ours stands out because it’s meant as the “next”
book on Clojure. That is, we intend to cover not only many of the
advanced techniques, but are also trying to develop the story of
Clojure, or rather the “why” of Clojure. Much of what comprises Clojure
has been done before (although there are plenty of novel ideas also),
but the confluence of features is so well put together that we feel that
readers can come away from a discussion of these underlying ideas a
better programmer overall. As far as my co-author goes, Chris Houser is
likely the most knowledgeable person in the world about Clojure not
named Rich Hickey. It’s been a challenge keeping up with him because the
guy is an endless fount of Clojure knowledge and eats difficult
programming problems for breakfast. It’s very motivational for me to
push out quality content with Houser as the co-author.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Many of RubyLearning’s Clojure course participants have
a Java and or Ruby background. Why, in your opinion, should they learn
Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; My knowledge of Ruby is superficial at best, so I hope I
do not speak out of turn. Having said that, I think that object-oriented
programming languages in general tend to foster very large solution
spaces. Another interesting point to take away from Clojure is that
immutable data is king. Applications built with the typical
object-oriented idioms are structured as graphs of mutable objects that
is difficult to reason about. However, there is a mountain of
single-threaded code written that seems to be “reasonable”. But with the
advent of multicore CPUs replacing the perpetually rising processor
clock speeds, the need to leverage those cores to gain application speed
will be very important. From day one Clojure has been designed and built
to make concurrent (and in some instances parallel) programming … well,
not easy, because it’s still a very hard problem … possible. Right now I
think there is no language, at least that I’m familiar with, that
facilitates the process of writing applications using shared-memory
concurrency quite like Clojure does.&lt;/p&gt;

&lt;p&gt;More generally, Clojure favors simplicity in design and implementation,
with the core tenet being that most problems can be viewed as some
combination of maps, sets, and sequences rather than complex hierarchies
of classes. As a result, Clojure is built to make the case of handling
these abstractions very efficiently. The same efficiencies might not
necessarily be available in either Ruby or Java, but the overarching
goal is the same — striving for simplicity. Finally, Clojure is a
functional programming language at its core and with many programming
languages subsuming some subset of functional ideals, thinking
functionally will be an important skill to cultivate moving forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Why do you think that such a free, online Clojure course
at RubyLearning would be beneficial to the Clojure community?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; I think so. Clojure only celebrated its 2nd birthday late
last year, but it’s influence is already being felt throughout the
programming landscape. For example, Clojure’s JVM cousin Scala is
planning to adopt some of Clojure’s immutable, persistent, data
structures for its 2.8 release. People are talking about Clojure and are
hungry for more information, and anything that can spread information
about its benefits is great. All the better if people can get some value
from the proposition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How should interested developers go about acquiring
knowledge and skills in Clojure? What’s the best approach?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; It’s hard to say since I can only speak from my
perspective, but keeping that in mind I say the best way is to write a
lot of Clojure code. There is a proverb about the game Go that goes
“Lose Your First 100 Games As Quickly As Possible”; it’s this phrase
perfectly describes how I went about learning Clojure. Additionally, I
can’t stress enough the fervent desire to help that pervades the Clojure
community. I think Rich Hickey has done a great job in setting the tone
of the community and leading by example. There is a &lt;a href=&#34;http://groups.google.com/group/clojure%20&#34;&gt;Clojure message
group&lt;/a&gt; and an IRC channel on
freenode.net #clojure where really smart people go to talk about
Clojure all day long — drop by, ask questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you see any areas in the language a would-be Clojure
programmer should concentrate on?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; The immediate things that *must* be focused on are the
immutable data structures, laziness, and functional programming styles.
There is really no way around those, and this is a good thing because
they will force you to think about writing code differently. However,
aside from the things that you have no control over I would say that
neophytes should look into the interoperability that Clojure provides
for its host platform. In most cases people will use the Java Virtual
Machine as the host, but there are currently projects targeting the .NET
platform and Javascript. You can’t go wrong exploring Clojure’s
reference types for concurrency: atoms, agents, refs, futures, promises,
and cells (a feature currently being developed). Finally, the next
release of Clojure will provide new features, types and protocols for
structuring your larger codebases in abstract and powerful ways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; After the course, most participants would like to
contribute their time, skills and expertise to a Clojure project but
invariably are unaware of where and how to do so. Could you suggest how
this can be achieved?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; Seriously with the onslaught of GitHub there is no longer
an excuse not to contribute to open-source projects. Just recently
Clojure moved into the top-20 most-popular languages on GitHub, so there
are plenty of opportunities to contribute to many interesting Clojure
projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you have any suggestions for RubyLearning’s Clojure
course participants? Anything you would like to share with them?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; Well, the fact that they are taking the time to work
through the Clojure course is a good start. It’s tough to motivate
people who are already self-motivated. I guess I’d say to keep it up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; On a final note: What do you perceive as the future of
Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fogus&amp;gt;&amp;gt;&lt;/strong&gt; Clojure stands as a direct call to action to both Java and
Common Lisp, so minimally it should stimulate some growth in both. I
also think that Clojure’s efficient persistent collection types have all
but signaled the beginning of the end for mutable structures. More and
more languages moving forward will adopt Clojure’s collections outright,
or further their state of the art. Likewise, Clojure’s novel
implementation of Software Transactional Memory system modeled on
database principles (e.g. Multiversion Concurrency Control) for some of
its concurrency features will likely find larger adoption in other
languages. Finally, Clojure in its own right will continue to grow in
popularity as the Lisp that finally breaks through into the mainstream.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Fogus. In case you have any queries and/or questions, kindly
post your questions here (as comments to this blog post) and Fogus would
be glad to answer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stuart Halloway talks to RubyLearning&#39;s Clojure Course Participants</title>
      <link>http://rubylearning.com/2010/03/10/stuart-halloway-talks-to-rubylearnings-clojure-course-participants/</link>
      <pubDate>Wed, 10 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rubylearning.com/2010/03/10/stuart-halloway-talks-to-rubylearnings-clojure-course-participants/</guid>
      <description>&lt;p&gt;On the eve of the first free, online “&lt;strong&gt;Clojure 101&lt;/strong&gt;” course, Michael
Kohl of RubyLearning caught up with &lt;strong&gt;Stuart Halloway&lt;/strong&gt;, author of
&lt;a href=&#34;http://www.pragprog.com/titles/shcloj/programming-clojure&#34;&gt;Programming
Clojure&lt;/a&gt; and
talked to him on &lt;strong&gt;Clojure&lt;/strong&gt;, for the benefit of the &lt;a href=&#34;http://rubylearning.com/blog/2010/03/09/clojure-101-a-new-course/&#34;&gt;Clojure 101
course&lt;/a&gt;
participants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rubylearning.com/images/stuart_halloway.jpg&#34; alt=&#34;Stuart Halloway,
USA&#34; title=&#34;Stuart Halloway, USA&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Welcome, Stuart and thanks for taking out time for
RubyLearning’s Clojure course participants. For their benefit, could you
tell us something about yourself?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; Along with Justin Gehtland, I co-founded
&lt;a href=&#34;http://thinkrelevance.com/&#34;&gt;Relevance&lt;/a&gt;, a development shop that takes
pride in staying near the cutting edge. We were early adopters of Ruby
(and Rails), are are now early adopters of Clojure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How and when did you get involved with Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; I have been interested in Lisps for years, as a result of
living in Emacs and reading Paul Graham and Steve Yegge. I discovered
Clojure in early 2008, and quickly realized that it was the Lisp I had
been looking for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; You were closely involved with the Ruby language, what
made you switch to Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; I still use Ruby, but it is fair to say that Clojure is
currently my favorite general-purpose language. In short: I came for the
Lisp, and I stayed for the fp and concurrency features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Many of RubyLearning’s Clojure course participants have
a Java and or Ruby background. Why, in your opinion, should they learn
Clojure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; Used well, Clojure will be as fast as Java, as expressive
as Ruby, and more thread-safe and multicore-ready than either. It is
also one of those languages that rewires your brain, and makes you a
better programmer in other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Why do you think that such a free, online Clojure course
at RubyLearning would be beneficial to the Clojure community?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; There have already been many Ruby programmers exploring
Clojure, and it is a natural fit. In my experience, the Ruby community
is fearless: tell them there is a better way and they will dive in an
see for themselves, rather than becoming defensive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets0.pragprog.com/images/covers/190x228/shcloj.jpg?1236205285&#34; alt=&#34;Programming
Clojure&#34; title=&#34;Programming Clojure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; How should interested developers go about acquiring
knowledge and skills in Clojure? What’s the best approach?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; Well, there’s a book.
&lt;img src=&#34;http://rubylearning.com/blog/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34; /&gt;

&lt;a href=&#34;http://www.pragprog.com/titles/shcloj/programming-clojure&#34;&gt;Programming
Clojure&lt;/a&gt;. And
several more books are coming. But really there is no substitute for
trying things out. There is a lot going on in Clojure, particularly if
you have not been exposed to functional programming, or Lisp, so you
have to be patient and let it steep. Also, join the &lt;a href=&#34;http://groups.google.com/group/clojure/&#34;&gt;mailing
list&lt;/a&gt;. The community is
remarkably friendly and supportive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&amp;gt;&amp;gt;&lt;/strong&gt; Do you see any areas in the language a would-be Clojure
programmer should concentrate on?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuart&amp;gt;&amp;gt;&lt;/strong&gt; Clojure’s approach to values, identity, and
&lt;a href=&#34;http://clojure.org/state&#34;&gt;state&lt;/a&gt; is game-changing, and most people will
need to spend some time with it to appreciate its power. If you haven’t
already, definitely watch Rich’s keynote from last year’s &lt;a href=&#34;http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey&#34;&gt;JVM Languages
Summit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you Stuart. In case you have any queries and/or questions, kindly
post your questions here (as comments to this blog post) and Stuart
would be glad to answer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>